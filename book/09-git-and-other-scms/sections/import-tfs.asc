[[_git_tfs]]
==== TFS

(((TFS)))(((Importing, from TFS)))
Se il tuo team sta cambiando controllo del codice sorgente passando da TFVC (Team Foundation Version Control di Microsoft, Ndt.) a Git, otterrete la più fedele possibile ottenibile.
Questo vuol dire che, pur descrivendo sia git-tfs che git-tf nella sezione sull'interoperabilità, in questa parte affronteremo solo git-tfs, in quanto git-tfs supporta le ramificazioni [branch], e questo risulta estrememente complicato con git-tf.

[NOTE]
====
Questa è una conversione a senso unico.
Il repository Git ottenuto non sarà in grado di connettersi al progetto TFVC originale.
====

Si inizia mappando i nomi-utente.
TFVC lascia molta libertà sul contenuto del campo author [autore] nelle modifiche, ma Git vuole un nome ed una e-mail leggibile da un umano.
Quest'informazione si può ottenere col comando `tf` sulla riga di comando, in questo modo:

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

Questo comando estrae tutte le modifiche [changesets] dallo storico del progetto mettendole nel file AUTHORS_TMP da cui verrà estratta la colonna 'User' column (la seconda).
Si apre il file e si cerca la posizione [numero di caratteri, Ndt.] di inizio e quella di fine della colonna sostituendo, sulla riga di comando seguente, i parametri `11-20` del comando `cut` con i valori trovati:

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | uniq | sort > AUTHORS
----

Il comando `cut` terrà solo il testo tra l'11° e il 20° carattere di ciascuna riga.
Il comando `tail` salta le prime due righe, che contengono rispettivamente le intestazioni e le sottolineature estetiche.
Il risultato di tutto questo è accodato [piped] al comando `uniq` per eliminare i duplicati, e salvato nel file `AUTHORS`.
Il passo successivo è manuale; affinché git-tfs possa usare questo file, ogni riga deve avere questo formato:

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

La parte a sinistra del segno uguale, è il campo ``User'' di TFVC, quella a destra è il nome dell'utente che verrà usato nelle commit di Git.

Con questo file, la successiva cosa da fare consiste nel clonare tutto il progetto TFVC cui si è interesati:

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

Si elimineranno poi dalle sezioni `git-tfs-id` le parti finali dei messaggi dei commit.
Questo è il comando per farlo:

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' -- --all
----

Si usa il comando `sed` dall'ambiente Git-bash per sostituire tutte le righe che iniziano con ``git-tfs-id:'' col nulla e che Git ignorerà.

Fatto questo, si è pronti per aggiungere un nuovo indirizzo remoto, fare il push di tutti i branch, e consentire al team di cominciare a usare Git.

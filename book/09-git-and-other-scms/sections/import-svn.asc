==== Subversion

(((Subversion)))
(((Importing, from Subversion)))
Se hai letto la sezione precedente sull'uso di `git svn`, puoi usare facilmente quelle istruzioni per clonare un repository con `git svn clone`; smettere, quindi, di usare il server Subversion, effettuare il push su un nuovo server Git, e cominciare a usare quest'ultimo.
Se si vuole lo storico, lo si può ottenere rapidamente quanto ci si impiega per estrarre i dati dal server di Subversion (che ci può mettere un po').

L'import, però, non è perfetto; e dato che richiede tempo, lo si può fare bene.
Il primo problema riguarda l'informazione sull'autore.
In Subversion, ognuno che effettua il commit ha un'utenza sul sistema che viene registrata tra le informazioni del commit.
Gli esempi nella sezione precedente mostrano a volte `schacon`, come nell'output di `blame` e di `git svn log`.
Volendo mappare meglio il dato sull'autore in Git, è necessario mappare gli utenti Subversion con gli autori Git.
Si crea un file chiamato `users.txt` che ha questa mappatura nel seguente formato:

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

Per ottenere la lista dei nomi degli autori usati da SVN, si può eseguire questo:

[source,console]
----
$ svn log --xml | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

Questo genera in output un log in formato XML, quindi isola le righe contenenti l'informazione sull'autore, scarta i duplicati, rimuove i tag XML.
(Ovviamente il tutto funziona sulle macchine su cui vi sono installati `grep`, `sort`, e `perl`.)
Poi, reindirizza l'output nel file users.txt in modo che vi si possano aggiungere i dati degli equivalenti utenti Git dopo ogni voce.

Si può fornire questo file a `git svn` per mappare accuratamente i dati degli autori.
Si può anche dire a `git svn` di non includere i metadati che normalmente importa Subversion, passando il parametro `--no-metadata` al comando `clone` o a `init`.
Questo trasforma il comando `import` in questo modo:


[source,console]
----
$ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata -s my_project
----

A questo punto si dovrebbe ottenere un import migliore di Subversion nella propria directory `my_project`.
I commit anziché apparire in questo modo

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

appariranno così:

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

Non solo il campo Author avrà un aspetto migliore, ma non ci saranno più le i `git-svn-id`.

Si dovrebbe fare poi un po' di pulizia post-import.
Prima di tutto, si devono ripulire gli strani riferimenti usati da `git svn`.
Prima si spostano i tag in modo che ci siano quelli effettivi e non degli strani branch remoti, poi si spostano i restanti branch in modo da renderli locali.

Per trasformare i tag in appropriati tag Git, si esegue

[source,console]
----
$ cp -Rf .git/refs/remotes/origin/tags/* .git/refs/tags/
$ rm -Rf .git/refs/remotes/origin/tags
----

Questo trasforma i riferimenti a branch remoti che iniziano con `remotes/origin/tags/` in tag reali (lightweight).

Poi, si spostano gli altri riferimenti sotto `refs/remotes` per renderli branch locali:

[source,console]
----
$ cp -Rf .git/refs/remotes/* .git/refs/heads/
$ rm -Rf .git/refs/remotes
----

Ora tutti i vecchi branches sono veri branch Git e tutti i vecchi tag sono veri tag Git.
L'ultima cosa da fare è aggiungere il proprio nuovo server Git come indirizzo remoto ed effettuarvi un push.
Ecco un esempio che aggiunge il proprio server come remoto:

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

Dato che si vuole che tutti i your branch ed i tag funzionino, si può eseguire questo:

[source,console]
----
$ git push origin --all
----

Tutti i branch ed i tag staranno sul nuovo server Git server in un bell'import pulito.

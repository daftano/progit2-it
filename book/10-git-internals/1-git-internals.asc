[[_git_internals]]
== I comandi interni di Git

A questo capitolo si arriva saltandone altri o dal precedente seguendo l'ordine naturale. In ogni caso qui approfondiremo il funzionamento interno e l'implementazione di Git.
Abbiamo constatato che queste informazioni sono di fondamentali importanza per capire quanto Git sia utile e potente, ma per qualcuno sono inutilmente complicate e confondono i principianti.
Per questo motivo trattiamo l'argomento nell'ultimo capitolo del libro in modo che lo si possa leggere nella fase dell'apprendimento che si ritiene più opportuna.
A te la scelta.

Dato che sei qui, possiamo partire.
Per prima cosa, se non fosse ancora chiaro, Git è fondamentalmente un filesystem a contenuto indirizzabile sul quale si appoggia un'interfaccia utente VCS.
Tra breve vedremo meglio cosa significhi.

Nelle prime versioni di Git (principalmente pre 1.5) l'interfaccia utente era molto più complessa perché veniva privilegiato il filesystem anziché un VCS pulito.
Negli ultimi anni l'interfaccia utente è stata rifinita fino a diventare chiara e facile da usare come qualsiasi altro sistema simile, ma è rimasto lo stereotipo che l'interfaccia di Git sia complessa e difficile da capire.

Il filesystem a contenuto indirizzabile è qualcosa di veramente formidabile, quindi in questo capitolo inizieremo da questo; parleremo dei meccanismi di trasporto e le attività per la manutenzione del repository con cui potresti dover aver a che fare.

include::sections/plumbing-porcelain.asc[]

include::sections/objects.asc[]

include::sections/refs.asc[]

include::sections/packfiles.asc[]

include::sections/refspec.asc[]

include::sections/transfer-protocols.asc[]

include::sections/maintenance.asc[]

include::sections/environment.asc[]

=== Riepilogo

A questo punto dovresti avere una discreta conoscenza di quello che fa Git in background e anche un'idea di come sia fatto.
In questo capitolo abbiamo descritto alcuni comandi *plumbing*: comandi che sono a più basso livello e più semplici dei comandi *porcelain* discussi nel resto del libro.
Capire come funziona Git a basso livello dovrebbe aiutarti a capire il perché fa quello che fa, ma anche permetterti di scrivere strumenti e script specifici per il tuo flusso di lavoro.

Git come filesystem a contenuto indirizzabile è uno strumento molto potente e spesso va oltre il semplice VCS.
Speriamo che si usi la conoscenza del funzionamento di Git per implementare delle proprie stupende applicazioni con questa tecnologia e trovarsi a proprio agio nell'uso avanzato di Git.

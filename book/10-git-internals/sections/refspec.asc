[[_refspec]]
=== Le refspec

In questo libro abbiamo sempre usato delle semplici mappature, dai branch remoti a riferimenti locali, ma possono anche essere molto più complesse.
Si supponga di aggiungere un repository remoto:

[source,console]
----
$ git remote add origin https://github.com/schacon/simplegit-progit
----

Con questo si aggiunge una sezione al proprio `.git/config` specificando, del repository remoto, il nome (`origin`), l’URL e le specifiche di riferimento (refspec) per recuperare i dati (fetch):

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
----

Il formato delle refspec è: un `+` (opzionale) seguito da `<src>:<dst>`, dove `<src>` è lo schema per i riferimenti remoti e `<dst>` è dove tali riferimenti verranno salvati in locale.
Il `+` dice a Git di aggiornare i riferimenti anche se non si tratta di un avanzamento (*fast-forward*).

Nel caso predefinito, che si ha eseguendo il comando `git remote add`, Git recupera tutti i riferimenti in `refs/heads/` sul server e li scrive localmente in `refs/remotes/origin/`.
Quindi, se c'è un branch `master` sul server, si può accedere al log di questo branch  localmente tramite

[source,console]
----
$ git log origin/master
$ git log remotes/origin/master
$ git log refs/remotes/origin/master
----

Sono tutti equivalenti, perché Git li espande tutti con `refs/remotes/origin/master`.

Se si vuole, ogni volta, effettuare il pull soltanto del branch `master` e non di tutti gli altri branch del server remoto, si deve cambiare la riga del fetch in

[source]
----
fetch = +refs/heads/master:refs/remotes/origin/master
----

Questo è solo il refspec di default per `git fetch` per questo repository remoto.
Volendo fare qualcosa una sola volta, si può specificare anche il refspec sulla riga di comando.
Per fare un *pull* del branch `master` sul repository remoto portandolo localmente in `origin/mymaster`, si può eseguire

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster
----

Si possono indicare anche più refspec.
Sulla riga di comando, si può fare una *pull* di più branch così:

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster \
	 topic:refs/remotes/origin/topic
From git@github.com:schacon/simplegit
 ! [rejected]        master     -> origin/mymaster  (non fast forward)
 * [new branch]      topic      -> origin/topic
----

In questo caso il *pull* del branch master è stato rifiutato perché non era un riferimento *fast-forward*.
Lo si può aggirare aggiungendo un `+` davanti alla refspec.

Si possono anche indicare più refspec, per l'operazione di fetch, nel file di configurazione.
Volendo sempre effettuare il fetch del 'master' e dei branch 'experiment', si aggiungono queste due righe:

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/experiment:refs/remotes/origin/experiment
----

Non si possono usare schemi parziali, quindi l'espressione seguente non è valida:

[source]
----
fetch = +refs/heads/qa*:refs/remotes/origin/qa*
----

Si possono però usare i namespace (o le directory) per ottenere qualcosa di simile.
Se si ha un gruppo chiamato 'QA' che faccia il *push* di una serie di branch e si vuol prendere il 'master' e qualsiasi branch del gruppo 'QA' e nient'altro, si usa un pezzo di configurazione simile a questo:

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/qa/*:refs/remotes/origin/qa/*
----

Se si ha un flusso di lavoro complesso, dove il gruppo 'QA' e gli sviluppatori fanno *push* di branch e il gruppo d'integrazione oltre ai push e collabora su branch remoti, si possono facilmente raggruppare nel modo appena visto.

[[_pushing_refspecs]]
==== Il push dei refspec

Va bene che si possa fare il fetch con i riferimenti raggruppati in namespace, ma come fa il gruppo QA a prendere i suoi branch nel namespace `qa/` nel primo posto?
Lo si può fare usando le refspec per la *push*.

Se quelli del gruppo QA vogliono fare la *push* del loro `master` in `qa/master` sul server remoto, possono eseguire

[source,console]
----
$ git push origin master:refs/heads/qa/master
----

Se vogliono che Git lo faccia automaticamente ogni volta che eseguono `git push origin` basta che aggiungano una `push` al loro file di configurazione:

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
	push = refs/heads/master:refs/heads/qa/master
----

Inoltre, questo farà in modo che, per default, eseguendo `git push origin` si invii il branch locale `master` al branch remoto `qa/master`.

==== Eliminare i riferimenti

I refspec si possono usare anche per eliminare i riferimenti dal server remoto eseguendo qualcosa del genere:

[source,console]
----
$ git push origin :topic
----

Poiché il formato di una refspec è `<src>:<dst>`, omettendo la parte `<src>` sarà come dire che il branch remoto è “niente” e quindi verrà cancellato.

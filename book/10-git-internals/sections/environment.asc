=== Variabili d'ambiente

Git gira sempre in una shell `bash` e ne usa un certo numero di variabili d'ambiente per decidere come comportarsi.
A volte, è utile sapere quali sono, e come si possono usare per modificare il comportamento di Git.
Non sarà un elenco completo di tutte le variabili d'ambiente a cui Git presta attenzione, ma solo delle più utili.


==== Funzionamento globale

Come un qualsiasi programma per computer, alcuni dei comportamenti generali di Git,  dipendono dalle variabili d'ambiente.

*`GIT_EXEC_PATH`* determina dove Git cerca i propri sotto-programmi (come `git-commit`, `git-diff`, ed altri).
  Il valore corrente si può vedere eseguendo `git --exec-path`.

*`HOME`* non è solitamente considerata personalizzabile (troppe altre cose dipendono da questa), ma è dove Git cerca il file di configurazione globale.
  Se si vuole un'installazione pienamente portabile di Git, comprendente la configurazione globale, si deve sovrascrivere `HOME` nel profilo della shell del Git portabile.

*`PREFIX`* è simile, ma per la configurazione a livello di sistema.
  Git cerca il file `$PREFIX/etc/gitconfig`.

*`GIT_CONFIG_NOSYSTEM`*, se valorizzato, disabilita l'uso del file di configurazione di sistema.
  È utile quando la configurazione del sistema interferisce con i propri comandi, ma non se ne ha l'accesso  per modificarla.

*`GIT_PAGER`* controlla il programma usato per mostrare l'output multi-pagina sulla riga di comando.
Se non è valorizzata, verrà usata `PAGER`.

*`GIT_EDITOR`* è l'editor che lancerà Git quando l'utente dovrà modificare del testo (un messaggio di una commit, per esempio).
Se non impostato, si intende `EDITOR`.


==== Posizioni dei repository

Git usa diverse variabili d'ambiente per determinare come interfacciarsi al repository corrente.

*`GIT_DIR`* è la locazione della cartella `.git`.
Se non è specificata, Git risale l'albero della directory fino a `~` o `/`, cercando ad ogni passo una directory `.git`.

*`GIT_CEILING_DIRECTORIES`* regola la ricerca di una directory `.git`.
Se l'accesso alle directory è lento (come nel caso di unità a nastro, o con una connessione di rete lenta), si può indicare a Git di non proseguire oltre un certo punto nella ricerca, specie se Git viene richiamato durante la costruzione del prompt della shell [ndt.].

*`GIT_WORK_TREE`* è la locazione della root della directory di lavoro per un repository non vuoto.
Se non specificato, si usa la directory padre di `$GIT_DIR`.

*`GIT_INDEX_FILE`* è il percorso del file indice (solo per i repository non vuoti).

*`GIT_OBJECT_DIRECTORY`* si può usare per indicare la locazione della directory che solitamente risiede in `.git/objects`.

*`GIT_ALTERNATE_OBJECT_DIRECTORIES`* è un elenco con i valori separati con ':' (formattato come `/dir/uno:/dir/due:…`),  indica a Git dove cercare gli oggetti se non li trova in `GIT_OBJECT_DIRECTORY`.
Se capita di avere tantissimi progetti con dei file di grandi dimensioni con lo stesso identico contenuto, la si può usare per evitare di memorizzarne troppe copie.


==== Pathspec

Con ``pathspec'' si indica il modo di descrivere i path degli oggetti in Git, compreso l'uso dei caratteri jolly [wildcards].
Questi si usano nel file `.gitignore`, ma anche sulla riga di comando (`git add *.c`).

*`GIT_GLOB_PATHSPECS` e `GIT_NOGLOB_PATHSPECS`* controllano il comportamento di default dei caratteri jolly nei pathspec.
Se `GIT_GLOB_PATHSPECS` è impostatoa a 1, i caratteri jolly agiranno come tali (che è il default); se `GIT_NOGLOB_PATHSPECS` è impostato a 1, i caratteri jolly corrisponderanno solo a se stessi, vale a dire che `*.c` indicherà solo un file _chiamato_ ``*.c'', anziché tutti i file il cui name termina con `.c`.
Questi singoli casi si possono ignorare facendo precedere il pathspec con `:(glob)` o `:(literal)`, per esempio `:(glob)*.c`.

*`GIT_LITERAL_PATHSPECS`* disabilita entrambi i comportamenti precedenti; non funzionerà alcun carattere jolly, nemmeno i prefissi per bypassarli.

*`GIT_ICASE_PATHSPECS`* fa sì che tutti i pathspec siano case-insensitive.


==== Committing

La creazione finale di un oggetto commit di Git viene solitamente fatta da`git-commit-tree`, che usa queste variabili d'ambiente come fonte primaria di informazione, per poi ripiegare verso i valori della configurazione solo se la variabili non sono presenti.

*`GIT_AUTHOR_NAME`* è il nome leggibile da umano nel campo ``author''.

*`GIT_AUTHOR_EMAIL`* è la email per il campo ``author''.

*`GIT_AUTHOR_DATE`* è il timestamp [data-ora] per il campo ``author''.

*`GIT_COMMITTER_NAME`* imposta il nome umano per il campo ``committer''.

*`GIT_COMMITTER_EMAIL`* è l'indirizzo di email per il campo ``committer''.

*`GIT_COMMITTER_DATE`* è usato come timestamp nel campo ``committer''.

*`EMAIL`* è l'indirizzo email di riserva nel caso in cui il valore di configurazione `user.email`non sia impostato.
Se _questo_ non è impostato, Git ripiega sui nomi dell'utente del sistema e dell'host.


==== Networking

Git usa la libreria `curl` per le operazioni di rete su HTTP, quindi  *`GIT_CURL_VERBOSE`* indica a Git di emettere tutti i messaggi generati da tale libreria.
Equivale ad eseguire `curl -v` sulla riga di comando.

*`GIT_SSL_NO_VERIFY`* dice a Git di non verificare i certificati SSL.
Questo a volte si rende necessario se si usa un certificato auto-firmato per i repository Git su HTTPS, o se si sta configurando un server Git ed ancora non è completo il sistema di certificazione.


Se la velocità di trasmissione di un'operazione HTTP è inferiore a *`GIT_HTTP_LOW_SPEED_LIMIT`* byte al secondo per più di *`GIT_HTTP_LOW_SPEED_TIME`* secondi, Git abortirà l'operazione.
Questi valori sostituiscono i valori `http.lowSpeedLimit` e `http.lowSpeedTime` della configurazione.

*`GIT_HTTP_USER_AGENT`* imposta la stringa user-agent usata da Git nella comunicazione HTTP.
Il valore di default è tipo `git/2.0.0`.


==== Differenze e unioni

*`GIT_DIFF_OPTS`* è fuorviante.
I soli valori validi sono `-u<n>` e `--unified=<n>`, che controllano il numero di righe di contesto mostrate in un comando `git diff`.

*`GIT_EXTERNAL_DIFF`* si usa per sovrastare il valore di configurazione `diff.external`.
Se impostato, Git richiamerà questo programma quando si eseguirà il comando `git diff`.

*`GIT_DIFF_PATH_COUNTER`* e *`GIT_DIFF_PATH_TOTAL`* sono utili all'interno del programma specificato da `GIT_EXTERNAL_DIFF` o `diff.external`.
Il primo indica di quale, tra una serie di file, se ne vuol fare il diff (a cominciare da 1), il secondo è il numero totale di file nel batch.

*`GIT_MERGE_VERBOSITY`* controlla l'output per a strategia del merge ricorsivo.
I valori ammessi sono i seguenti:

* 0 nessun output, tranne forse un solo messaggio di errore.
* 1 mostra solo i conflitti.
* 2 mostra anche le modifiche.
* 3 mostra i file saltati perché non modificati.
* 4 mostra tutti i percorsi man mano che vengono elaborati.
* 5 e sopra mostra delle informazioni dettagliate di debug.

Il valore di default è 2.

==== Debugging

Si vuol _veramente_ sapere cosa fa Git?
Git include una serie alquanto completa di tracciamenti [trace], tutto quello che c'è da fare è abilitarli.
I valori possibili per queste variabili sono i seguenti:

* ``true'', ``1'', o ``2'' – la categoria di trace viene inviata allo stderr.
* Un path assoluto che inizia con `/` – l'output del trace viene scritto su tale file.

*`GIT_TRACE`* regola i tracciamenti in generale che non ricadono in alcuna categoria specifica.
Tra cui le espansioni degli alias, e la delega ad altri sotto-programmi.

[source,console]
----
$ GIT_TRACE=true git lga
20:12:49.877982 git.c:554               trace: exec: 'git-lga'
20:12:49.878369 run-command.c:341       trace: run_command: 'git-lga'
20:12:49.879529 git.c:282               trace: alias expansion: lga => 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.879885 git.c:349               trace: built-in: git 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.899217 run-command.c:341       trace: run_command: 'less'
20:12:49.899675 run-command.c:192       trace: exec: 'less'
----

*`GIT_TRACE_PACK_ACCESS`* controlla il tracciamento dell'accesso ai packfile.
Il primo campo è il packfile a cui si accede, il secondo è l'offset in questo stesso file:

[source,console]
----
$ GIT_TRACE_PACK_ACCESS=true git status
20:10:12.081397 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 12
20:10:12.081886 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 34662
20:10:12.082115 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 35175
# […]
20:10:12.087398 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 56914983
20:10:12.087419 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 14303666
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

*`GIT_TRACE_PACKET`* abilita il tracciamento a livello pacchetto per le operazioni di rete.

[source,console]
----
$ GIT_TRACE_PACKET=true git ls-remote origin
20:15:14.867043 pkt-line.c:46           packet:          git< # service=git-upload-pack
20:15:14.867071 pkt-line.c:46           packet:          git< 0000
20:15:14.867079 pkt-line.c:46           packet:          git< 97b8860c071898d9e162678ea1035a8ced2f8b1f HEAD\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress include-tag multi_ack_detailed no-done symref=HEAD:refs/heads/master agent=git/2.0.4
20:15:14.867088 pkt-line.c:46           packet:          git< 0f20ae29889d61f2e93ae00fd34f1cdb53285702 refs/heads/ab/add-interactive-show-diff-func-name
20:15:14.867094 pkt-line.c:46           packet:          git< 36dc827bc9d17f80ed4f326de21247a5d1341fbc refs/heads/ah/doc-gitk-config
# […]
----

*`GIT_TRACE_PERFORMANCE`* regola il log dei dati sulle prestazioni.
L'output mostra quanto tempo impiega ogni esecuzione di Git.

[source,console]
----
$ GIT_TRACE_PERFORMANCE=true git gc
20:18:19.499676 trace.c:414             performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune'
20:18:19.845585 trace.c:414             performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all'
Counting objects: 170994, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (43413/43413), done.
Writing objects: 100% (170994/170994), done.
Total 170994 (delta 126176), reused 170524 (delta 125706)
20:18:23.567927 trace.c:414             performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack'
20:18:23.584728 trace.c:414             performance: 0.000910000 s: git command: 'git' 'prune-packed'
20:18:23.605218 trace.c:414             performance: 0.017972000 s: git command: 'git' 'update-server-info'
20:18:23.606342 trace.c:414             performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago'
Checking connectivity: 170994, done.
20:18:25.225424 trace.c:414             performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago'
20:18:25.232403 trace.c:414             performance: 0.001051000 s: git command: 'git' 'rerere' 'gc'
20:18:25.233159 trace.c:414             performance: 6.112217000 s: git command: 'git' 'gc'
----

*`GIT_TRACE_SETUP`* mostra le informazioni rilevate da Git riguardo il repository e l'ambiente [environment] con cui interagisce.

[source,console]
----
$ GIT_TRACE_SETUP=true git status
20:19:47.086765 trace.c:315             setup: git_dir: .git
20:19:47.087184 trace.c:316             setup: worktree: /Users/ben/src/git
20:19:47.087191 trace.c:317             setup: cwd: /Users/ben/src/git
20:19:47.087194 trace.c:318             setup: prefix: (null)
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

==== Varie

*`GIT_SSH`*, se specificato, è un programma che viene eseguito invece di `ssh` quando Git instaura una connessione ad un host SSH.
Viene richiamato con `$GIT_SSH [username@]host [-p <port>] <command>`.
Si noti che questo non è il modo più semplice per personalizzare l'invocazione di `ssh`; non supporta ulteriori parametri sulla riga di comando, quindi ci si deve scrivere uno script ed usare `GIT_SSH` per richiamare se stesso.
Per questo risulta forse più semplice usare il file `~/.ssh/config`.

*`GIT_ASKPASS`* è una sostituzione per il valore di configurazione `core.askpass`.
Questo è il programma richiamato quando Git deve richiedere le credenziali all'utente, ci si aspetta un messaggio testuale di richiesta come argomento sulla riga di comando, e dovrebbe restituire la risposta su `stdout`.
(Vedi il Capitolo <<_credential_caching>> per approfondire.)

*`GIT_NAMESPACE`* controlla l'accesso ai riferimenti del namespace, ed è equivalente al flag `--namespace`.
È particolarmente utile lato server, dove si potrebbero voler memorizzare più fork di un solo repository in un solo repository, mantenendo separati solo i riferimenti [refs, Ndt.].

*`GIT_FLUSH`* si può usare per obbligare Git ad usare l/O non bufferizzato durante la scrittura incrementale nello stdout.
Il valore 1 fa sì che Git effettui il *flush* più spesso, col valore 0 tutto l'output è bufferizzato.
Il valore di default (se questa variabile non è impostata) consiste nello scegliere uno schema di bufferizzazione dipendente dall'attività e dalla modalità di output.

*`GIT_REFLOG_ACTION`* consente di indicare il testo descrittivo scritto nel reflog.
Ecco un esempio:

[source,console]
----
$ GIT_REFLOG_ACTION="La mia azione" git commit --allow-empty -m 'Il mio messaggio'
[master 9e3d55a] Il mio messaggio
$ git reflog -1
9e3d55a HEAD@{0}: La mia azione: Il mio messaggio
----

[[_plumbing_porcelain]]
=== Tubature e sanitari

Questo libro descrive come usare Git con circa 30 verbi come `checkout`, `branch`, `remote` e così via.
Poiché lo sviluppo di Git è inizialmente come un insieme di strumenti per un VCS, piuttosto che un completo VCS user-friendly, ha un mucchio di termini per eseguire lavori di basso livello e progettati per essere concatenati insieme nello stile UNIX o invocati da script.
Di solito ci si riferisce a questi comandi come ``plumbing'' (tubatura), mentre i comandi più user-friendly sono detti comandi ``porcelain'' (sanitari).

I primi nove capitoli del libro hanno a che fare quasi esclusivamente con comandi *porcelain*.
In questo capitolo vedremo invece i comandi *plumbing*, di basso livello, perché permettono di accedere al funzionamento interno di Git e consentono di mostrare come e perché Git fa quello che fa.
Molti di questi comandi non sono pensati per essere lanciati manualmente sulla riga di comando ma sono da considerare piuttosto come mattoni con cui comporre nuovi strumenti e script personalizzati.

Eseguendo `git init` in una directory nuova o esistente, Git vi crea la directory `.git` dove si trova quasi tutto quello che Git registra e gestisce.
Volendo fare un backup o un clone del repository basta copiare questa directory da qualche altra parte per avere praticamente tutto quello che serve.
Tutto questo capitolo riguarda il contenuto di tale directory.
Ecco come si presenta:

[source,console]
----
$ ls -F1
HEAD
config*
description
hooks/
info/
objects/
refs/
----

Ci potrebbero essere altri file, ma questo è un repository appena creato con `git init` — è ciò che si vede per default.
Il file `description` è usato solo dal programma GitWeb, quindi non ce ne occupiamo.
Il file `config` contiene le configurazioni specifiche del progetto e nella directory `info` c'è un file .gitignore di esclusione globale (((excludes))) che contiene i pattern dei file di cui non si vuol tener traccia.
La directory `hooks` contiene i propri script di hook client/server, discussi in dettaglio nel Capitolo <<_git_hooks>>.

Restano ancora quattro voci importanti: i file `HEAD` e (non ancora creato) `index`, e le directory `objects` e `refs`.
Questi costituiscono il nucleo di Git.
La directory `objects` contiene tutto il contenuto del database, la directory `refs` contiene i puntatori agli oggetti commit nei diversi branch, il file `HEAD` punta al branch dell'ultimo checkout e nel file `index` Git registra la informazioni dell'area di staging.
Vedremo in dettaglio ognuna di queste sezioni per capire come opera Git.

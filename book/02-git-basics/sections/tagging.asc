[[_git_tagging]]
=== Etichettare

(((tags)))
Come la maggior parte dei VCS, Git ha la possibilità di contrassegnare (tag, ndt) come importanti dei punti specifici della cronologia di un repository.
Le persone generalmente usano questa funzionalità per segnare i punti di rilascio (v1.0, v2.0 e così via).
In questa sezione, imparerai come elencare le etichette esistenti, come creare e cancellare le etichette e i diversi tipi di etichette disponibili.

==== Elencare le Etichette

Elencare le etichette esistenti in Git è facilissimo.
Digita semplicemente `git tag` (eventualmente con `-l` or `--list`):(((git commands, tag)))

[source,console]
----
$ git tag
v1.0
v2.0
----

Questo comando elenca le etichette in ordine alfabetico; l'ordine con cui sono visualizzate non ha importanza.

Puoi inoltre cercare etichette che corrispondono ad uno schema specifico.
Il repository sorgente di Git, per esempio, contiene più di 500 etichette.
Se sei interessato a vedere solo quelli della serie 1.8.5, puoi eseguire:

[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

[NOTE]
.Elencare i tag jolly richiede l'opzione `-l` o `--list`
====
Se si desidera solo l'elenco completo dei tag, l'esecuzione del comando `git tag` presuppone implicitamente che si desidera una semplice elencazione e ne fornisce una.

Tuttavia, se stai fornendo uno schema di caratteri jolly per far corrispondere i nomi dei tag, l'uso di `-l` o `--list` è obbligatorio.
====

==== Creare Etichette

Git supports two types of tags: _lightweight_ and _annotated_.
Git rende disponibili due tipi di etichette: semplici (_lightweight_, ndt) e annotate (_annotated_, ndt).
Un'etichetta semplice è molto simile a una ramificazione che non cambia mai -- è semplicemente un riferimento ad una commit specifica.
Le etichette annotate, al contrario, sono salvate come oggetti complessi nel database Git.
Ne viene calcolato il checksum, contengono il nome, l'email e la data di chi ha inserito l'etichetta, hanno un messaggio d'etichetta; e possono essere firmate e verificate con GPG (GNU Privacy Guard).
Generalmente si raccomanda di usare le etichette annotate così da avere tutte queste informazioni, ma se vuoi aggiungere un'etichetta temporanea o per qualche ragione non vuoi salvare quelle informazioni aggiuntive, hai sempre a disposizione le etichette semplici.

[[_annotated_tags]]
==== Etichette Annotate

(((tags, annotated)))
Creare un'etichetta annotate in Git è semplice.
Il modo più facile è specificare `-a` quando esegui il comando `tag`:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----

`-m` specifica il messaggio per l'etichetta, che viene salvato con la stessa.
Se non specifichi un messaggio per un'etichetta annotata, Git lancerà il tuo editor così da scriverla.

Puoi vedere i dati dell'etichetta assieme alla commit etichettata con il comando `git show`:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

Questo mostra le informazioni di chi ha creato l'etichetta, la data in cui la commit è stata etichettata e il messaggio, prima di mostrare le informazioni della commit.

==== Etichette semplici

(((tags, lightweight)))
Un altro modo per etichettare una commit è con le etichette semplici.
Questo in pratica è salvare il checksum della commit in un file -- non viene salvata nessun'altra informazione.
Per creare un'etichetta semplice, non usare nessuna delle opzioni `-a`, `s` o `-m` ma fornire solamente un nome di etichetta:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

Questa volta, se esegui `git show` per l'etichetta, non vedrai altre informazioni aggiuntive.(((git commands, show)))
Il comando mostra solamente la commit:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== Etichettare Successivamente

Puoi etichettare anche commit passate.
Supponiamo che la cronologia delle tue commit sia questa: 

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

Supponiamo che tu abbia dimenticato di etichettare il progetto alla v1.2, che era con la commit ``updated rakefile''.
Puoi sempre aggiungerla in un secondo momento.
Per etichettare questa commit, alla fine del comando, devi indicare il checksum (o parte di esso) della commit:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

Puoi vedere che hai etichettato la commit:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== Condividere le Etichette

Per impostazione predefinita il comando `git push` non invia le etichette sui server remoti.
Devi farlo esplicitamente, dopo averle create, per condividerle con il server.
Questo procedimento è come la condivisione delle diramazioni remote -- puoi eseguire `git push origin <nome-tag>`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

Se hai molte etichetta che vuoi inviare tutte assieme, puoi farlo usando l'opzione `--tags` col comando `git push`.
Questo trasferirà al server remoto tutte le tue etichette che non sono ancora presenti.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Quando qualcuno clonerà il repository o scaricherà gli aggiornamenti, scaricherà anche tutte le tue etichette.

[NOTE]
.`git push` invia entrambi i tipi di etichette
====
Inviare le etichette utilizzando `git push <remote> --tags` non fa distinzione tra etichette leggere ed annotate; non c'é un'opzione semplice che consenta di selezionare soltanto un tipo per l'invio.
====

==== Cancellare le Etichette

Per cancellare un'etichetta dal tuo repository locale puoi utilizzare `git tag -d <tagname>`.
Ad esempio potremmo rimuovere la nostra etichetta semplice creata precedentemente in questo modo:

[source,console]
----
$ git tag -d v1.4-lw
Deleted tag 'v1.4-lw' (was e7d5add)
----

Da notare che questo comando non rimuove l'etichetta da nessun server remoto.
Ci sono due varianti comuni per cancellare un'etichetta da un server remoto.

La prima variante é `git push <remote> :refs/tags/<tagname>`:

[source,console]
----
$ git push origin :refs/tags/v1.4-lw
To /git@github.com:schacon/simplegit.git
 - [deleted]         v1.4-lw
----

Il modo di interpretare quanto sopra scritto è quello di leggerlo come se il valore null prima dei due punti venga inviato come nome dell'etichetta remota, di fatto cancellandolo.

Il secondo (e più intuitivo) modo per cancellare un'etichetta remota é con:

[source,console]
----
$ git push origin --delete <tagname>
----

==== Fare il Check Out delle Etichette

Se vuoi vedere le versioni dei file contrassegnati da un'etichetta, puoi fare un  `git checkout` di questa etichetta, anche se questo mette il tuo repository in uno stato di ``detached HEAD'', che ha alcuni effetti collaterali pericolosi: 

[source,console]
----
$ git checkout 2.0.0
Note: checking out '2.0.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch>

HEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final

$ git checkout 2.0-beta-0.1
Previous HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final
HEAD is now at df3f601... add atlas.json and cover image
----

Nello stato ``detached HEAD'', se esegui modifiche e poi crei una commit, l'etichetta rimarrà la stessa ma la tua nuova commit non apparterrà a nessuna diramazione e sarà irraggiungibile, tranne che tramite il suo esatto hash.
Quindi, se hai necessità di fare modifiche -- diciamo che tu abbia corretto un bug su una versione più vecchia, ad esempio -- normalmente dovrai creare una diramazione:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

Se fai così e crei una commit, la tua diramazione `version2` sarà leggermente diversa dalla tua etichetta `v2.0.0` poichè andrà avanti con le tue nuove modifiche, quindi agisci con cautela.

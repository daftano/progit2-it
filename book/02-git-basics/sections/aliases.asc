[[_git_aliases]]
=== Alias di Git

(((aliases)))
Prima di terminare questo capitolo sulle basi di Git, ecco giusto un piccolo suggerimento per rendere la tua esperienza con Git più semplice, più facile e più familiare: gli alias.
In seguito nel libro non ci riferiremo ad essi né presumeremo che tu li abbia usati, ma probabilmente dovresti sapere come realizzarli.

Git non indovina automaticamente il tuo comando se ne digiti solo una parte.
Se non vuoi scrivere tutto il testo di un qualsiasi comando Git puoi configurare facilmente un alias per ogni comando usando `git config`.(((git commands, config)))
Di seguito ci sono alcuni esempi che potresti voler usare:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Questo significa che, per esempio, invece di digitare `git commit`, dovrai scrivere solo `git ci`.
Andando avanti con l'uso di Git userai alcuni comandi con maggiore frequenza: non esitare a creare nuovi alias.

Questa tecnica può essere anche molto utile per creare comandi che ritieni dovrebbero esistere.
Per esempio, per correggere un problema comune in cui si incorre quando si vuole rimuovere un file dall'area di stage, puoi aggiungere il tuo alias `unstage` in Git:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Questo rende equivalenti i due comandi seguenti:

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

Questo sembra un po' più chiaro.
É anche abituale aggiungere un comando `last` come questo:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

In questo modo puoi vedere facilmente l'ultima commit:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Come puoi immaginare, Git semplicemente sostituisce il nuovo comando con qualsiasi cosa corrisponda all'alias.
Potresti anche voler eseguire un comando esterno, piuttosto che uno di Git.
In questo caso devi iniziare il comando con un carattere "!".
Questo è utile se stai scrivendo degli strumenti di lavoro personali per gestire un repository Git.
Possiamo illustrarlo creando l'alias `git visual` per eseguire `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----

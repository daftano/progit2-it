[[_git_aliases]]
=== Alias di Git

(((aliases)))
Prima di terminare questo capitolo sui fondamenti di Git, ecco alcuni suggerimenti e trucchi per semplificare, facilitare e rendere più familiare il lavoro con Git: gli alias.
In seguito, non vi si farà riferimento né se ne assumerà l'utilizzo nel libro, ma si devono conoscere per usarli.

Git non indovina il comando se ne digiti solo una parte.
Se non vuoi digitare tutto il testo di un qualsiasi comando Git, puoi configurare facilmente un alias per ogni comando usando `git config`.(((git commands, config)))
Ecco un paio di esempi d'uso:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Questo significa che, per esempio, invece di digitare `git commit`, dovrai scrivere solo `git ci`.
Proseguendo con l'uso di Git userai alcuni comandi con maggiore frequenza e in questi casi non esitare a creare nuovi alias.

Questa tecnica può essere anche molto utile per creare comandi che ritieni dovrebbero esistere.
Per esempio, per correggere un problema comune in cui si incorre quando si vuole rimuovere un file dall'area di stage, puoi aggiungere il tuo alias `unstage` in Git:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Questo rende equivalenti i due comandi seguenti:

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

Così sembra più pulito.
It's also common to add a `last` command, like this:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

In questo modo puoi vedere facilmente l'ultima commit:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Come immaginerai, Git semplicemente sostituisce il nuovo comando con qualsiasi cosa corrisponda all'alias.
Potresti anche voler eseguire un comando esterno, piuttosto che uno di Git.
In questo caso devi iniziare il comando col carattere `!`.
Questo è utile se stai scrivendo degli strumenti di lavoro tuoi per lavorare con un repository Git.
Vediamolo praticamente creando l'alias `git visual` per eseguire `gitk`:

[source,console]
----
$ git config --global alias.visual "!gitk"
----

[[_getting_a_repo]]
=== Prelevare un repository Git

Puoi creare un progetto Git principalmente con due approcci.
Il primo prende un progetto esistente o una directory e la importa in Git.
Il secondo clona un repository Git esistente, su un altro server.

==== Generare un repository da una directory esistente

Se vuoi iniziare a tenere traccia con Git di un progetto esistente, devi andare nella directory del progetto e digitare:

[source,console]
----
$ git init
----

Questo creerà una nuova sottodirectory chiamata `.git` che conterrà tutti i file necessari per il tuo repository, una struttura del repository Git.
A questo punto non è ancora stato tracciato niente del tuo progetto.
(Vedi il Capitolo <<_git_internals>> per sapere esattamente quali file sono contenuti nella directory  `.git` appena creata.)(((git commands, init)))

Se vuoi iniziare a tracciare i file esistenti (a differenza di una directory vuota), dovresti iniziare a monitorare questi file con una commit iniziale.
Lo puoi fare con pochi comandi `git add`, che specificano quali file vuoi tracciare, seguiti da un `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Tra un minuto vedremo cosa fanno questi comandi.
A questo punto hai un repository Git con dei file tracciati e una commit iniziale.

[[_git_cloning]]
==== Clonare un Repository Esistente

Se vuoi una copia di un repository Git esistente, per esempio un progetto a cui vuoi contribuire, il comando di cui hai bisogno è `git clone`.
Se hai familiarità con altri sistemi VCS come Subversion, noterai che il comando è "clone" e non "checkout".
Questa è una distinzione importante: anziché prelevare soltando una copia funzionante, Git riceve una copia di quasi tutti i dati che sono sul server.
Quando esegui `git clone` vengono scaricate tutte le versioni di tutti i file del progetto con la rispettiva cronologia.
Infatti, se si danneggiasse il disco del tuo server, potresti usare qualsiasi clone di qualsiasi client per ripristinare il server allo stato in cui era quando è stato clonato (potresti perdere alcuni `hooks` lato-server, ma tutte le versioni dei dati saranno presenti: vedi il Capitolo <<_git_on_the_server>> per i dettagli).

Un repository si clona con `git clone [url]`.(((git commands, clone)))
Per esempio, se vuoi clonare la libreria linkabile di Git chiamata libgit2, puoi farlo così:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Questo creerà una directory chiamata ``libgit2'', vi inizializza all'interno una directory `.git`, scarica tutti i dati del repository e fa il checkout dell'ultima versione funzionante.
Se vai nella nuova directory `libgit2`, vedrai i file del progetto, pronti per essere modificati o usati.
Se vuoi clonare il repository in una directory con un nome diverso da ``libgit2'', puoi specificarlo sulla riga di comando:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Questo comando fa la stessa cosa del precedente, ma la directory di destinazione si chiamerà `mylibgit`.

Git può usare differenti protocolli di trasferimento.
L'esempio precedente usa il protocollo `https://`, ma puoi anche vedere `git://` o `user@server:path/to/repo.git`, che usa il protocollo di trasferimento SSH.
<<_git_on_the_server>> illustrerà tutte le opzioni disponibili come impostazioni sul server per l'accesso al proprio repository Git con i rispettivi pro e contro.

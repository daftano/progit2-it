[[_remote_repos]]
=== Lavorare con i Repository Remoti

Per poter collaborare con un qualsiasi progetto Git, devi sapere come amministrare i tuoi repository remoti.
I repository remoti sono versioni dei progetti ospitate da qualche parte su Internet o sulla rete locale.
Puoi averne molti e normalmente avrai un accesso in sola lettura o anche in scrittura.
Collaborare con altri implica di sapere amministrare questi repository remoti, inviarne e prelevarne dati per condividere il lavoro.
Amministrare i repository remoti significa sapere come aggiungerli, rimuovere quelli che non sono più validi, amministrare varie diramazioni remote e decidere quali tracciare e quali no, e altro ancora.
Di seguito tratteremo alcune conoscenze necessarie per farlo.

[NOTE]
.I repository remoti possono essere in locale sul tuo computer.
====
É del tutto possibile che tu possa lavorare con un repository ``remoto'' che in realtà è sullo stesso computer dove sei tu.
La parola ``remoto'' non implica necessariamente che il repository sia da qualche altra parte sulla rete o su Internet, ma solo che è altrove.
Lavorare con un repository remoto del genere comporta comunque tutte le operazioni standard di invio, estrazione e recupero come con qualsiasi altro repository remoto.
====


==== Vedere i Propri Server Remoti 

Per vedere i server remoti che hai configurato, puoi eseguire il comando `git remote`.(((git commands, remote)))
Questo elenca i nomi brevi di ogni nodo remoto che hai configurato.
Se hai clonato il tuo repository, dovresti vedere almeno `origin` --  che è il nome predefinito che Git da al server da cui cloni:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Puoi anche aggiungere `-v`, che mostra anche l'URL che Git ha associato a quel nome breve per utilizzarlo quando si legge o si scrive su questo repository remoto:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Se hai più di un server remoto, il comando li elenca tutti.
Per esempio un repository, con multipli server remoti per lavorare con diversi collaboratori, appare così:

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Questo significa che posso prendere facilmente i contributi da qualunque di questi utenti.
Potremmo inoltre avere il permesso di inviare dati (push) ad uno o più di questi, anche se non ne possiamo parlare qui.

Nota che questi server remoti utilizzano una molteplicità di protocolli; al riguardo ne tratteremo di più in <<ch04-git-on-the-server#_getting_git_on_a_server>>.

==== Aggiungere un Repository Remoto

Abbiamo citato e dato alcune dimostrazioni di come il comando `git clone` aggiunga implicitamente il repository remoto `origin`.
Ecco qui come aggiungere esplicitamente un nuovo repository remoto.(((git commands, remote)))
Per aggiungere un nuovo repository Git remoto con un nome breve a cui possa riferirti facilmente, esegui `git remote add <nome breve> <url>`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Ora potrai usare il nome `pb` alla riga di comando al posto dell'URL intero.
Se vuoi, per esempio, prendere tutte le informazioni che ha Paul, ma che non sono ancora nel tuo repository, puoi eseguire `git fetch pb`:


[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Adesso la diramazione `master` di Paul è accessibile localmente come `pb/master` --  puoi farne il `merge` in uno delle tue diramazioni, o puoi scaricarla in una tua diramazione locale se vuoi controllarla.
(Cosa siano le diramazioni e come utilizzarle lo vedremo in maggior dettaglio in <<ch03-git-branching#ch03-git-branching>>.)

[[_fetching_and_pulling]]
==== Scarica e Condividi coi Server Remoti

Come abbiamo appena visto, per scaricare dati da un progetto remoto, puoi fare:(((git commands, fetch)))

[source,console]
----
$ git fetch <remote>
----

Il comando va sul progetto remoto e scarica tutti i dati dal progetto remoto che tu ancora non hai.
Dopo averlo fatto dovresti trovare i riferimenti a tutte le diramazioni di quel server, che potrai unire o controllare in qualsiasi momento.

Quando cloni un repository, viene aggiunto automaticamente un repository remoto chiamato ``origin''.
In questo modo `git fetch origin` scarica le modifiche che sono state condividise con il server remoto da quando lo hai clonato (o dall'ultimo tuo aggiornamento).
È importante notare che il comando `git fetch` esegue soltanto lo scarico di queste informazioni nel tuo repository locale -- non le unisce automaticamente e non modifica alcun file su cui stai lavorando.
Quando sei pronto dovrai essere tu a unirle al tuo lavoro, manualmente.

Se la diramazione su cui sei è impostata per tracciarne una remota (vedi la prossima sezione e il <<ch03-git-branching#ch03-git-branching>> per maggiori informazioni), puoi usare il comando `git pull` per scaricare e unire automaticamente questa diramazione remota nella tua diramazione attuale.
Questo potrebbe essere un modo più facile e più comodo per lavorare; e in modo predefinito, il comando `git clone` imposta automaticamente la tua diramazione `master` per tracciare la diramazione master remota (o comunque si chiami la diramazione predefinita) del server che hai clonato. 
Eseguendo `git pull` vengono generalmente scaricati i dati dal server da cui hai fatto il clone originario e viene eseguito il tentativo di unirli automaticamente con il codice su cui stai lavorando.

[[_pushing_remotes]]
==== Condividi coi Server Remoti 

Quando il tuo progetto raggiunge uno stato che vuoi condividere, devi caricarlo sul server principale.
Il comando per farlo è semplice: `git push <nome-remoto> <diramazione>`.(((git commands, push)))
Se vuoi condividere la tua diramazione `master` sul tuo server `origin` (lo ripeto: clonando vengono generalmente definiti automaticamente questi nomi), puoi eseguire il comando seguente per caricare ogni commit di cui hai fatto il back up sul server:

[source,console]
----
$ git push origin master
----

Questo comando funziona solamente se hai clonato il tuo progetto da un server su cui hai i permessi di scrittura e se nessun altro ha caricato modifiche nel frattempo.
Se cloni un repository assieme ad altri e questi caricano delle modifiche sul server, il tuo invio verrà rifiutato.
Dovrai prima scaricare le loro modifiche e incorporarle con le tue per poterle poi inviare.
Vedi il <<ch03-git-branching#ch03-git-branching>> per maggiori informazioni su come fare il `push` su server remoti.

[[_inspecting_remote]]
==== Controllare un Server Remoto

Se vuoi più informazioni su una particolare server remoto, puoi usare il comando `git remote show <remoto>`.(((git commands, remote))) 
Se esegui il comando con un nome particolare, per esempio `origin`, avrai qualcosa di simile:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

che mostra gli URL del repository remoto oltre alle informazioni sulle diramazioni tracciate.
Il comando ti dice anche che, se esegui `git pull` mentre sei su `master`, integrerà automaticamente le modifiche sul `master` remoto dopo aver scaricato tutti i riferimenti remoti.
iInoltre elenca anche i riferimenti remoti che hai già scaricato.

Questo è un esempio semplice di quanto probabilmente vedrai.
Tuttavia, quando usi intensamente Git potresti trovare molte più informazioni con `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Questo comando mostra quale diramazione viene scaricata automaticamente quando esegui `git push` mentre sei su certe diramazioni.
Mostra anche quali diramazioni remote non hai ancora scaricato, quali diramazioni remote hai in locale che sono state rimosse dal server e le diramazioni locali che sono in grado di unirsi automaticamente con le proprie corrispettive, tracciate in remoto, quando esegui `git pull`.

==== Rimuovere e Rinominare Server Remoti 

Puoi eseguire `git remote rename` per cambiare il nome breve di un server remoto.(((git commands, remote)))
Se vuoi per esempio rinominare `pb` in `paul`, puoi farlo con `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Vale la pena ricordare che questo cambia anche tutti i nomi delle diramazioni tracciate in remoto.
Quello che prima veniva chiamato `pb/master` ora è `paul/master`.

Se, per qualsiasi ragione, vuoi rimuovere un server remoto (hai spostato il server o non stai più usando un particolare mirror, o magari un collaboratore non contribuisce più) puoi usare `git remote remove` oppure `git remote rm`:

[source,console]
----
$ git remote remove paul
$ git remote
origin
----

Quando hai cancellato in questo modo il riferimento a un server remoto, vengono cancellate anche tutte le diramazioni tracciate in remoto e le impostazioni di configurazione associate con questo server remoto.

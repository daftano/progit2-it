[[_remote_repos]]
=== Lavorare con indirizzi remoti

Per poter collaborare con un qualsiasi progetto Git, devi sapere come amministrare i tuoi repository remoti.
I repository remoti sono versioni dei progetti ospitate da qualche parte su Internet o sulla rete locale.
Puoi averne molti e normalmente avrai un accesso in sola lettura o anche in scrittura.
Collaborare con altri implica il saper amministrare questi repository remoti, inviarne e prelevarne dati per condividere il lavoro.
Amministrare i repository remoti significa sapere come aggiungerli, rimuovere quelli che non più validi, amministrare varie diramazioni remote e decidere quali tracciare e quali no, e ancora altro.
Di seguito tratteremo le conoscenze necessarie per farlo.

==== Elencare gli indirizzi remoti

Per vedere quali sono i server remoti sono stati configurati, puoi eseguire il comando `git remote`.(((git commands, remote)))
Questo elenca i nomi abbreviati di ogni nodo remoto configurato.
Se hai clonato il tuo repository, dovresti vedere almeno *origin* —che è il nome predefinito che Git da al server da cui cloni:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Puoi anche aggiungere `-v`, che mostra anche l'URL che Git ha associato a quell'abbreviazione da usarsi come riferimento a quel server remoto:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Se hai più di un server remoto, il comando li elenca tutti.
Per esempio, a repository con più server remoti per lavorare con diversi collaboratori, potrebbe assomigliare a questo.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Questo significa che posso prendere facilmente i contributi da qualunque di questi utenti. Inoltre si può avere il permesso di effettuare il push in uno o più di questi, anche se non si può dire con quale.

Si noti che questi indirizzi remoti usano diversi protocolli; approfondiremo l'argomento in <<_git_on_the_server>>.

==== Aggiungere repository remoti

Nei paragrafi precedenti, ho già illustrato e fornito alcuni esempi sul come aggiungere repository remoti, ma quì lo faremo in modo esplicito.(((git commands, remote)))
Per aggiungere un nuovo indirizzo remoto il repository Git ha un'abbreviazione per farvi riferimento in modo semplice, esegui il comando `git remote add [shortname] [url]`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Ora potrai usare il nome `pb` alla riga di comando al posto dell'URL intero.
Se vuoi, per esempio, prendere tutto ciò che ha Paul, ma che non sono ancora nel tuo repository, puoi eseguire `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

La diramazione `master` di Paul diventa accessibile localmente come `pb/master` —puoi farne il `merge` in uno delle tue diramazioni, o puoi effettuare il checkout in una tua diramazione locale per ispezionarla.
(Vedremo in dettaglio cosa sono le diramazioni e come usarle nel Capitolo <<_git_branching>>.)

[[_fetching_and_pulling]]
==== Fetch e Pull da indirizzi remoti

Come abbiamo appena visto, per recuperare dati da un progetto remoto, si può eseguire:(((git commands, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

Il comando va sul progetto remoto e ne preleva tutti i dati che tu ancora non hai.
Dopo averlo fatto dovresti trovare i riferimenti a tutte le diramazioni di quel server, che potrai unire o controllare in qualsiasi momento.

Quando cloni un repository, viene aggiunto automaticamente un repository remoto chiamato ``origin''.
In questo modo `git fetch origin` scarica le modifiche che sono state condividise con server remoto da quando lo hai clonato (o dall'ultimo tuo aggiornamento).
È importante notare che il comando `git fetch` scarica queste informazioni nel tuo repository locale: non le unisce automaticamente e non modifica alcun file su cui stai lavorando.
Quando sei pronto dovrai essere tu a unirle al tuo lavoro, manualmente.

Se hai una diramazione impostata per tracciarne una remota (vedi il prossimo paragrafo e il Capitolo <<_git_branching>> per maggiori informazioni), puoi usare il comando `git pull` per scaricare e unire [merge] automaticamente una diramazione remota nel branch attuale.(((git commands, pull)))
Ne potrebbe risultare un modo più facile e più comodo per lavorare; e per default, il comando `git clone` imposta automaticamente la tua diramazione `master` locale affinché tenga traccia del master del server che hai clonato (comunque si chiami il branch di default).
Eseguendo `git pull` vengono generalmente scaricati [fetch] i dati dal server da cui hai fatto il clone originario e prova a unirli [merge] automaticamente con il codice su cui stai lavorando.

[[_pushing_remotes]]
==== Push verso indirizzi remoti

Quando il tuo progetto raggiunge uno stato che vuoi condividere, devi caricarlo sul server principale.
Il comando per questo è semplice: `git push [remote-name] [branch-name]`.(((git commands, push)))
Se vuoi condividere [push] la tua diramazione `master` sul tuo server `origin` (lo ripeto: con la clonazione questi nomi vengono generalmente definiti automaticamente), puoi eseguire il comando seguente per riportare [push] sul server tutto il tuo storico dei commit:

[source,console]
----
$ git push origin master
----

Questo comando funziona solamente se hai clonato il tuo progetto da un server su cui hai i permessi di scrittura e se nessun altro ha caricato modifiche nel frattempo.
Se cloni un repository assieme ad altri e questi caricano delle modifiche sul server, il tuo invio verrà rifiutato.
Dovrai prima tirarti [pull] le loro modifiche e incorporarle con le tue per poterle poi inviare con un push.
Vedi il Capitolo <<_git_branching>> per maggiori informazioni su come fare il `push` su server remoti.

[[_inspecting_remote]]
==== Ispezionare indirizzo remoto

Se vuoi più informazioni su un particolare server remoto, puoi usare il comando `git remote show [remote-name]`.(((git commands, remote)))
Se esegui il comando con un'abbreviazione particolare, per esempio `origin`, otterrai qualcosa di simile:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

Che elencha la URL del repository remoto oltre alle informazioni sulle diramazioni tracciate.
Il comando ti dice anche che se esegui `git pull` mentre sei su `master`, integrerà [merge] le modifiche sul `master` remoto dopo aver scaricato [fetch] tutti i riferimenti remoti.
Elenca anche i riferimenti remoti che hai già scaricato.

Questo è un esempio semplice tra quelli che probabilmente incontrerai.
Tuttavia, quando usi intensamente Git potresti trovare molte più informazioni con `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Questo comando mostra quale diramazione viene scaricata automaticamente eseguendo `git push` stando su certe diramazioni.
Mostra anche quali diramazioni remote non hai ancora scaricato, quali diramazioni remote hai in locale che sono state rimosse dal server, e le diramazioni multiple che vengono unite automaticamente quando esegui `git pull`.

==== Rimuovere e rinominare server remoti

Se vuoi rinominare un riferimento puoi farlo con `git remote rename` per cambiare l'abbreviazione di un server remoto.(((git commands, remote)))
Se vuoi per esempio rinominare `pb` in `paul`, puoi farlo con `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Vale la pena ricordare che questo cambia anche i nomi delle diramazioni remote.
Quello che prima veniva chiamato `pb/master` ora è `paul/master`.

Se vuoi rimuovere, per qualsiasi ragione, un riferimento remoto (hai spostato il server o non stai più usando un particolare mirror, o magari un collaboratore che non collabora più) puoi usare `git remote rm`:

[source,console]
----
$ git remote rm paul
$ git remote
origin
----

[[_remote_repos]]
////
=== Working with Remotes

To be able to collaborate on any Git project, you need to know how to manage your remote repositories.
Remote repositories are versions of your project that are hosted on the Internet or network somewhere.
You can have several of them, each of which generally is either read-only or read/write for you.
Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work.
Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more.
In this section, we'll cover some of these remote-management skills.

[NOTE]
.Remote repositories can be on your local machine.
====
It is entirely possible that you can be working with a ``remote'' repository that is, in fact, on the same host you are.
The word ``remote'' does not necessarily imply that the repository is somewhere else on the network or Internet, only that it is elsewhere.
Working with such a remote repository would still involve all the standard pushing, pulling and fetching operations as with any other remote.
====
////
=== Lavorare con i Repository Remoti

Per poter collaborare con un qualsiasi progetto Git, devi sapere come amministrare i tuoi repository remoti.
I repository remoti sono versioni dei progetti ospitate da qualche parte su Internet o sulla rete locale.
Puoi averne molti e normalmente avrai un accesso in sola lettura o anche in scrittura.
Collaborare con altri implica di sapere amministrare questi repository remoti, inviarne e prelevarne dati per condividere il lavoro.
Amministrare i repository remoti significa sapere come aggiungerli, rimuovere quelli che non sono più validi, amministrare varie diramazioni remote e decidere quali tracciare e quali no, e altro ancora.
Di seguito tratteremo alcune conoscenze necessarie per farlo.

[NOTE]
.I repository remoti possono essere in locale sul tuo computer.
====
É del tutto possibile che tu possa lavorare con un repository ``remoto'' che in realtà è sullo stesso computer dove sei tu.
La parola ``remoto'' non implica necessariamente che il repository sia da qualche altra parte sulla rete o su Internet, ma solo che è altrove.
Lavorare con un repository remoto del genere comporta comunque tutte le operazioni standard di invio, estrazione e recupero come con qualsiasi altro repository remoto.
====


==== Vedere i Propri Server Remoti 

////
To see which remote servers you have configured, you can run the `git remote` command.(((git commands, remote)))
It lists the shortnames of each remote handle you've specified.
If you've cloned your repository, you should at least see `origin` -- that is the default name Git gives to the server you cloned from:
////

Per vedere i server remoti che hai configurato, puoi eseguire il comando `git remote`.(((git commands, remote)))
Questo elenca i nomi brevi di ogni nodo remoto che hai configurato.
Se hai clonato il tuo repository, dovresti vedere almeno `origin` --  che è il nome predefinito che Git da al server da cui cloni:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

////
You can also specify `-v`, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:
////

Puoi anche aggiungere `-v`, che mostra anche l'URL che Git ha associato a quel nome breve per utilizzarlo quando si legge o si scrive su questo repository remoto:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

////
If you have more than one remote, the command lists them all.
For example, a repository with multiple remotes for working with several collaborators might look something like this.
////

Se hai più di un server remoto, il comando li elenca tutti.
Per esempio un repository, con multipli server remoti per lavorare con diversi collaboratori, appare così:

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

////
This means we can pull contributions from any of these users pretty easily.
We may additionally have permission to push to one or more of these, though we can't tell that here.
////

Questo significa che posso prendere facilmente i contributi da qualunque di questi utenti.
Potremmo inoltre avere il permesso di inviare dati (push) ad uno o più di questi, anche se non ne possiamo parlare qui.

////
Notice that these remotes use a variety of protocols; we'll cover more about this in <<ch04-git-on-the-server#_getting_git_on_a_server>>.
////

Nota che questi server remoti utilizzano una molteplicità di protocolli; al riguardo ne tratteremo di più in <<ch04-git-on-the-server#_getting_git_on_a_server>>.

////
==== Adding Remote Repositories
////
==== Aggiungere un Repository Remoto

////
We've mentioned and given some demonstrations of how the `git clone` command implicitly adds the `origin` remote for you.
Here's how to add a new remote explicitly.(((git commands, remote)))
To add a new remote Git repository as a shortname you can reference easily, run `git remote add <shortname> <url>`:
////

Abbiamo citato e dato alcune dimostrazioni di come il comando `git clone` aggiunga implicitamente il repository remoto `origin`.
Ecco qui come aggiungere esplicitamente un nuovo repository remoto.(((git commands, remote)))
Per aggiungere un nuovo repository Git remoto con un nome breve a cui possa riferirti facilmente, esegui `git remote add <nome breve> <url>`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

////
Now you can use the string `pb` on the command line in lieu of the whole URL.
For example, if you want to fetch all the information that Paul has but that you don't yet have in your repository, you can run `git fetch pb`:
////

Ora potrai usare il nome `pb` alla riga di comando al posto dell'URL intero.
Se vuoi, per esempio, prendere tutte le informazioni che ha Paul, ma che non sono ancora nel tuo repository, puoi eseguire `git fetch pb`:


[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Adesso la diramazione `master` di Paul è accessibile localmente come `pb/master` --  puoi farne il `merge` in uno delle tue diramazioni, o puoi scaricarla in una tua diramazione locale se vuoi controllarla.
(Cosa siano le diramazioni e come utilizzarle lo vedremo in maggior dettaglio in <<ch03-git-branching#ch03-git-branching>>.)

[[_fetching_and_pulling]]
==== Scarica e Condividi coi Server Remoti

Come abbiamo appena visto, per scaricare dati da un progetto remoto, puoi fare:(((git commands, fetch)))

[source,console]
----
$ git fetch <remote>
----

////
The command goes out to that remote project and pulls down all the data from that remote project that you don't have yet.
After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.
////

Il comando va sul progetto remoto e scarica tutti i dati dal progetto remoto che tu ancora non hai.
Dopo averlo fatto dovresti trovare i riferimenti a tutte le diramazioni di quel server, che potrai unire o controllare in qualsiasi momento.

////
If you clone a repository, the command automatically adds that remote repository under the name ``origin''.
So, `git fetch origin` fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.
It's important to note that the `git fetch` command only downloads the data to your local repository -- it doesn't automatically merge it with any of your work or modify what you're currently working on.
You have to merge it manually into your work when you're ready.
////

Quando cloni un repository, viene aggiunto automaticamente un repository remoto chiamato ``origin''.
In questo modo `git fetch origin` scarica le modifiche che sono state condividise con il server remoto da quando lo hai clonato (o dall'ultimo tuo aggiornamento).
È importante notare che il comando `git fetch` esegue soltanto lo scarico di queste informazioni nel tuo repository locale -- non le unisce automaticamente e non modifica alcun file su cui stai lavorando.
Quando sei pronto dovrai essere tu a unirle al tuo lavoro, manualmente.

////
If your current branch is set up to track a remote branch (see the next section and <<ch03-git-branching#ch03-git-branching>> for more information), you can use the `git pull` command to automatically fetch and then merge that remote branch into your current branch.(((git commands, pull)))
This may be an easier or more comfortable workflow for you; and by default, the `git clone` command automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from.
Running `git pull` generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you're currently working on.
////

Se la diramazione su cui sei è impostata per tracciarne una remota (vedi la prossima sezione e il <<ch03-git-branching#ch03-git-branching>> per maggiori informazioni), puoi usare il comando `git pull` per scaricare e unire automaticamente questa diramazione remota nella tua diramazione attuale.
Questo potrebbe essere un modo più facile e più comodo per lavorare; e in modo predefinito, il comando `git clone` imposta automaticamente la tua diramazione `master` per tracciare la diramazione master remota (o comunque si chiami la diramazione predefinita) del server che hai clonato. 
Eseguendo `git pull` vengono generalmente scaricati i dati dal server da cui hai fatto il clone originario e viene eseguito il tentativo di unirli automaticamente con il codice su cui stai lavorando.

[[_pushing_remotes]]
==== Pushing to Your Remotes

When you have your project at a point that you want to share, you have to push it upstream.
The command for this is simple: `git push <remote> <branch>`.(((git commands, push)))
If you want to push your master branch to your `origin` server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you've done back up to the server:

[source,console]
----
$ git push origin master
----

This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.
If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.
You'll have to fetch their work first and incorporate it into yours before you'll be allowed to push.
See <<ch03-git-branching#ch03-git-branching>> for more detailed information on how to push to remote servers.

[[_inspecting_remote]]
==== Inspecting a Remote

If you want to see more information about a particular remote, you can use the `git remote show <remote>` command.(((git commands, remote)))
If you run this command with a particular shortname, such as `origin`, you get something like this:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

It lists the URL for the remote repository as well as the tracking branch information.
The command helpfully tells you that if you're on the master branch and you run `git pull`, it will automatically merge in the master branch on the remote after it fetches all the remote references.
It also lists all the remote references it has pulled down.

That is a simple example you're likely to encounter.
When you're using Git more heavily, however, you may see much more information from `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

This command shows which branch is automatically pushed to when you run `git push` while on certain branches.
It also shows you which remote branches on the server you don't yet have, which remote branches you have that have been removed from the server, and multiple local branches that are able to merge automatically with their remote-tracking branch when you run `git pull`.

==== Renaming and Removing Remotes

You can run `git remote rename` to change a remote's shortname.(((git commands, remote)))
For instance, if you want to rename `pb` to `paul`, you can do so with `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

It's worth mentioning that this changes all your remote-tracking branch names, too.
What used to be referenced at `pb/master` is now at `paul/master`.

If you want to remove a remote for some reason -- you've moved the server or are no longer using a particular mirror, or perhaps a contributor isn't contributing anymore -- you can either use `git remote remove` or `git remote rm`:

[source,console]
----
$ git remote remove paul
$ git remote
origin
----

Once you delete the reference to a remote this way, all remote-tracking branches and configuration settings associated with that remote are also deleted.

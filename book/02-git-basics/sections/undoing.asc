[[_undoing]]
=== Annullare qualcosa

In qualsiasi momento puoi voler annullare qualcosa.
Rivedremo alcuni strumenti basilari per annullare le modifiche fatte.
Attenzione però, perché non sempre puoi ripristinare ciò che annulli.
Questa è una delle aree di Git dove puoi perdere del lavoro svolto se commetti un errore.

Uno degli annullamenti più comuni si verifica quando registri una commit troppo presto e magari dimentichi di aggiungere qualche file, o sbagli qualcosa nel messaggio di commit.
Se vuoi rifare questa commit, esegui le ulteriori modifiche che hai dimenticato, mettile nell'area di stage e esegui di nuovo la commit utilizzando l'opzione `--amend`:

[source,console]
----
$ git commit --amend
----

Questo comando usa la tua area di `stage` per la commit.
Se non hai fatto modifiche dalla tua ultima commit (per esempio, esegui questo comando subito dopo la tua commit precedente), allora il tuo snapshot sarà identico e potrai cambiare il tuo messaggio di commit.

Verrà lanciata la stessa applicazione per scrivere il messaggio della commit, ma conterrà già il messaggio della commit precedente.
Puoi modificare il messaggio normalmente, ma questo sovrascriverà la commit precedente.

Per esempio, se fai una commit e realizzi di non aver messo nello `stage` le modifiche a un file e vuoi aggiungerlo a questa commit, puoi fare così:

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

Ti ritroverai con una sola commit: la seconda sovrascrive la prima.

[NOTE]
====
É importante comprendere che quando si corregge la propria ultima commit, non è tanto una semplice correzione quanto piuttosto una completa _sostituzione_ con una nuova commit migliorata che spinge via la vecchia commit e mette al suo posto la nuova commit.
In pratica è come se la commit precedente non ci fosse mai stata e quindi non apparirà nella cronologia del tuo repository.

L'ovvio significato della correzione delle commit è quello di fare miglioramenti minori della tua ultima commit, senza intasare la cronologia del tuo repository con messaggi di commit del tipo ``Oops, dimenticato di aggiungere un file'' oppure ``Accidenti, corretto un refuso nell'ultima commit''.
====


[[_unstaging]]
==== Rimuovere un file dall'area di `stage`

Le prossime due sezioni mostrano come lavorare con le modifiche della tua area di stage e della directory di lavoro.
La parte divertente è che il comando che usi per determinare lo stato di queste due aree ti ricorda come annullare le modifiche alle stesse.
Per esempio, supponiamo che hai modificato due file e vuoi registrarli (commit) come modifiche separate, ma accidentalmente digiti `git add *` e li metti entrambi in `stage`.
Come puoi rimuoverne uno?
Il comando `git status` ti ricorda:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

Il testo sotto ``Changes to be committed'' ti dice di usare `git reset HEAD <file>...` per rimuovere dallo `stage`.
Usa quindi questo consiglio per rimuovere `CONTRIBUTING.md`:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Il comando è un po' strano, ma funziona.
Il file `CONTRIBUTING.md` ora è modificato ma non più nello `stage`.

[NOTE]
=====
É vero che `git reset` può essere un comando pericoloso, specialmente se si usa l'opzione `--hard`.
Ad ogni modo, nello scenario sopra descritto, il file nella tua directory di lavoro non viene toccato e quindi è una situazione relativamente sicura.
=====

Per adesso questa invocazione magica è tutto quello che ti è necessario conoscere sul comando `git reset`.
Andremo più nel dettaglio su cosa esegue `reset` e su come padroneggiarlo per fare cose realmente interessanti in <<ch07-git-tools#_git_reset>>.


==== Annullare le modifiche a un file

Come fare se ti rendi conto che non vuoi più mantenere le modifiche di `CONTRIBUTING.md`?
Come puoi annullarle facilmente -- ritornare a come era prima dell'ultima commit (o al clone iniziale, o comunque lo avevi nella tua directory di lavoro)?
Fortunatamente `git status` ti dice come farlo.
Nell'ultimo output di esempio, l'area dei file modificati appare così:


[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Ti dice abbastanza chiaramente come annullare le modifiche che hai fatto.
Vediamo cosa dice:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

Puoi vedere come le modifiche siano state annullate.

[IMPORTANT]
=====
É importante capire che `git checkout -- <file>` è un comando pericoloso.
Tutte le modifiche locali fatte al file sono sparite -- Git ha praticamente rimpiazzato il file con la versione della commit più recente.
Non usare mai questo comando a meno che tu non sia assolutamente certo di non volere quei cambiamenti locali non salvati.
=====

Se desideri mantenere le modifiche apportate a questo file ma tuttavia hai bisogno per adesso di toglierlo di torno, vedremo i `ripostigli` (*stash*) e le diramazioni (*branch*) in <<ch03-git-branching#ch03-git-branching>>, che generalmente sono le strade migliori da seguire.

Ricorda: qualsiasi cosa che sia stata _registrata in una commit_ in Git può quasi sempre essere recuperata.
Tutte le commit che erano su diramazioni che sono state cancellate o le commit sovrascritte con una commit `--amend` possono essere recuperate (vedi il <<ch10-git-internals#_data_recovery>> per il recupero dei dati).
Ma qualsiasi cosa che perdi, che non sia stata mai registrata su commit, non la vedrai mai più.

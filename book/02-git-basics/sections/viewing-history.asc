[[_viewing_history]]
=== Vedere la Cronologia delle Commit 

Dopo che avrai creato un po' di commit, o se hai clonato un repository che già ha la sua cronologia di commit, vorrai probabilmente guardare cos'è successo nel passato.
Lo strumento essenziale e quello più potente per farlo è il comando `git log`.

Questi esempi usano un progetto veramente semplice chiamato ``simplegit''.
Per ottenere il progetto, esegui

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

Quando esegui `git log` in questo progetto, dovresti avere un output che assomiglia a questo:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

In modo predefinito, senza argomenti, `git log` mostra le commit fatte nel repository in ordine cronologico inverso, in questo modo la commit più recente è la prima ad apparire.
Come vedi, questo comando elenca ogni commit con il suo codice SHA-1, il nome e l'email dell'autore, la data di salvataggio e il messaggio della commit.

Sono disponibili moltissime opzioni da passare al comando `git log` per mostrare esattamente quello che stai cercando.
Qui ne vedremo alcune tra quelle più famose.

Una delle opzioni più utili è `-p` o `--patch`, che mostra le differenze (l'output _patch_) introdotte da ciascuna commit.
Puoi anche limitare il numero delle voci visualizzate, ad esempio utilizzando `-2` per mostrare solo le ultime due voci. 

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
----

Quest'opzione mostra le stessi informazioni ma ciascun elemento è seguito dalle differenze.
Questo è molto utile per revisionare il codice o per dare un'occhiata veloce a cosa è successo in una serie di commit che un collaboratore ha aggiunto.

Puoi usare anche una serie di opzioni di riassunto con `git log`.
Per esempio, se vuoi vedere alcune statistiche brevi per ciascuna commit, puoi usare l'opzione `--stat`:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Come puoi vedere, l'opzione `--stat` visualizza sotto ogni commit la lista dei file modificati, quanti file sono stati modificati, e quante righe in questi file sono state aggiunte e rimosse.
Alla fine aggiunge anche un resoconto delle informazioni.

Un'altra opzione veramente utile è `--pretty`.
Questa opzione modifica gli output di log rispetto a quella predefinita.
Alcune opzioni predefinite sono pronte all'uso.
L'opzione  `oneline` visualizza ogni commit su una singola linea, che è utile se stai controllando una lunga serie di commit.
In aggiunta le opzioni `short`, `full` e `fuller` mostrano più o meno lo stesso output ma con più o meno informazioni, rispettivamente:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

L'opzione più interessante è `format`, che ti permette di specificare la formattazione dell'output di log.
Questa è estremamente utile quando stai generando un output che sarà sottoposto ad analisi automatica -- perché specificando esplicitamente il formato, sai che non cambierà con gli aggiornamenti di Git:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

<<pretty_format>> elenca alcune delle opzioni maggiormente utili che `format` accetta. 

[[pretty_format]]
.Opzioni utili per `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Opzione   | Descrizione dell'Output
| `%H`      | Hash della commit
| `%h`      | Hash della commit abbreviato
| `%T`      | Hash dell'albero
| `%t`      | Hash dell'albero abbreviato
| `%P`      | Hash del genitore
| `%p`      | Hash del genitore abbreviato
| `%an`     | Nome dell'autore
| `%ae`     | e-mail dell'autore
| `%ad`     | Data di commit dell'autore (il formato rispetta l'opzione --date=)
| `%ar`     | Data relativa di commit dell'autore
| `%cn`     | Nome di chi ha fatto la commit (`committer`, in inglese)
| `%ce`     | e-mail di chi ha fatto la commit
| `%cd`     | Data della commit
| `%cr`     | Data relativa della commit
| `%s`      | Oggetto
|================================

Potresti essere sorpreso dalla differenza tra _autore_ e _committer_ (chi ha eseguito la commit).
L'autore è la persona che ha scritto il testo, mentre il committer è l'ultima persona che ha applicato il testo.
Così, se invii una modifica a un progetto ed uno dei membri principali del progetto la applica, ne avranno entrambi il riconoscimento — tu come l'autore ed il membro del progetto come chi l'ha committata. Vedremo meglio questa distinzione nel *Capitolo 5*.

Le opzioni `oneline` e `format` sono particolarmente utili con un'altra opzione di `log` chiamata `--graph`. Questa aggiunge un piccolo grafico ASCII carino che mostra le diramazioni e le unioni della cronologia, che possiamo vedere nella copia del repository del progetto Grit:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

Questo tipo di output diventerà più interessante quando ci inoltreremo nel _brancing_ e nel _merging_ nel prossimo capitolo.

Queste sono solo alcune semplici opzioni per la formattazione dell'output di `git log` -- ce ne sono altre.
<<log_options>> elenca le opzioni che abbiamo visto prima, come anche altre opzioni comunemente usate che possono essere utili per cambiare l'output del comando log.

[[log_options]]
.Opzioni comuni di `git log`
[cols="1,4",options="header"]
|================================
| Opzione           | Descrizione
| `-p`              | Mostra la modifica introdotta con ogni commit.
| `--stat`          | Mostra le statistiche per i file modificati in ogni commit.
| `--shortstat`     | Mostra solo le righe cambiate/aggiunte/rimosse del comando --stat.
| `--name-only`     | Mostra l'elenco dei file modificati dopo le informazione della commit.
| `--name-status`   | Mostra l'elenco dei file con le informazioni aggiunte/modifiche/eliminate.
| `--abbrev-commit` | Mostra solo i primi caratteri del codice SHA-1 invece di tutti i 40.
| `--relative-date` | Mostra la data in un formato relativo (per esempio, "2 week ago", "2 settimane fa") invece di usare il formato completo della data.
| `--graph`         | Mostra un grafico ASCII della cronologia delle diramazioni e delle unioni insieme all'output del log.
| `--pretty`        | Mostra le commit in un formato alternativo. L'opzione include oneline, short, full, fuller, e format (quando specifichi un tuo formato).
| `--oneline`       | Abbreviazione per `--pretty=oneline --abbrev-commit` usate assieme.
|================================

==== Limitare l'Output del Log

Oltre alle opzioni per la formattazione dell'output, `git log` accetta una serie di utili opzioni restrittive, ovvero opzioni che ti permettono di vedere solo alcune commit.
Abbiamo già visto una opzione del genere, l'opzione `-2`, che visualizza solamente le ultime due commit.
Infatti, puoi usare `-<n>`, dove `n` è un intero, per vedere le ultime `n` commit.
In realtà non la userai spesso, perché Git accoda tutti gli output paginandoli, così vedrai solamente una pagina alla volta.

Le opzioni temporali come `--since` e `--until` sono invece molto utili.
Questo comando, per esempio, prende la lista delle commit fatte nelle ultime due settimane:

[source,console]
----
$ git log --since=2.weeks
----

Questo comando funziona con molti formati --  puoi specificare una data `"2008-01-15"` o una data relativa come `"2 years 1 day 3 minutes ago"`.

Puoi inoltre filtrare l'elenco delle commit che corrispondono a dei criteri di ricerca.
L'opzione `--author` ti permette di filtrare per uno specifico autore e l'opzione `--grep` ti permette di cercare delle parole chiave nei messaggi delle commit.

[NOTE]
====
Puoi specificare più di una istanza di entrambi i criteri di ricerca `--author` e `--grep`, che limiteranno l'output della commit alle registrazioni che corrispondono ad _ognuno_ degli schemi `--author` ed ad _ognuno_ degli schemi `--grep`; comunque, aggiungendo l'ulteriore opzione `--all-match` si limita l'output solo a quelle commit che corrispondono a _tutti_ gli schemi `--grep`.
====

Un altro filtro estremamente utile è l'opzione `-S` (a cui confidenzialmente ci si riferisce come l'opzione ``picozza'' di Git),che accetta una stringa e mostra solo quelle commit in cui è cambiato il numero di occorrenze di tale stringa.
Ad esempio, se cerchi di trovare l'ultima commit che aggiunge o rimuove il riferimento ad una funzione specifica, potresti richiamare:

[source,console]
----
$ git log -S function_name
----

L'ultima opzione veramente utile da passare a `git log` come filtro è il percorso.
Se specifichi il nome di una directory o di un file, puoi limitare l'output del log alle sole commit che introducono modifiche a quei file.
Questa è sempre l'ultima opzione e generalmente è preceduta dal doppio meno (`--`) per separare i percorsi dalle opzioni.

Nella <<limit_options>> vediamo una lista di riferimento di queste e di altre opzioni comuni.

[[limit_options]]
.Opzioni per limitare l'output di `git log`
[cols="2,4",options="header"]
|================================
| Opzione               | Descrizione
| `-<n>`                | Mostra solo le ultime n commit
| `--since`, `--after`  | Limita le commit a quelle create dopo la data specificata.
| `--until`, `--before` | Limita le commit a quelle create prima della data specificata.
| `--author`            | Mostra solo le commit in cui la voce autore corrisponde alla stringa specificata.
| `--committer`         | Mostra solo le commit in cui la voce committer corrisponde alla stringa specificata.
| `--grep`              | Mostra solo le commit il cui messaggio contiene la stringa
| `-S`                  | Mostra solo le commit con aggiunte o rimozioni di codice in cui la stringa trova corrispondenza
|================================

Ad esempio, se vuoi vedere quali commit, che modificano i file di test nella cronologia del codice sorgente di Git, sono state registrate da Junio Hamano nel mese di Ottobre 2008 e non sono commit di fusione (merge), puoi eseguire qualcosa come questo:

[source,console]
----
$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Delle quasi 40.000 commit, presenti nella cronologia del codice sorgente di Git, questo comando mostra le 6 che corrispondono a tali criteri.

[TIP]
.Evitare di visualizzare le commit di fusione (merge)
====
Dipende dal flusso di lavoro utilizzato nel tuo repository, ma è possibile che una considerevole percentuale delle commit nella cronologia di log siano soltanto commit di fusione, che in genere non sono molto istruttive.
Per evitare di visualizzare un ammasso di commit di fusione nella tua cronologia di log, aggiungi semplicemente l'opzione di log `--no-merges`.
====

=== Salvare le modifiche sul repository

A questo punto dovresti avere un _autentico_ repository Git sul tuo computer e un checkout, ovvero una _copia di lavoro_, di tutti i suoi file di fronte a te.
Solitamente vorrai iniziare a fare modifiche e inviare gli snapshot di queste al tuo repository ogni volta che il progetto raggiunga uno stato che vuoi salvare.

Ricorda che ogni file della tua directory di lavoro può essere in uno dei due stati seguenti: _tracked_ (tracciato, ndt.) o _untracked_ (non tracciato, ndt.).
I file tracked sono già presenti nell'ultimo snapshot; possono quindi essere unmodified (non modificati, ndt.), modified (modificati, ndt.) o staged.
In breve i file tracked sono file che Git conosce.

I file untracked sono tutti gli altri -- qualsiasi file nella tua directory di lavoro che non è presente nell'ultimo snapshot o nella tua area di stage.
Quando cloni per la prima volta un repository, tutti i tuoi file sono tracciati e non modificati perché Git li ha appena prelevati e non hai modificato ancora niente.

Quando editi dei file, Git li vede come modificati, perché sono cambiati rispetto all'ultima commit.
Quando lavori, metti selettivamente nell'area di stage i file modificati e poi fai la commit di tutto ciò che è in quest'area, e quindi il ciclo si ripete.

.Il ciclo di vita dello stato dei tuoi file.
image::images/lifecycle.png[Il ciclo di vita dello stato dei tuoi file]


[[_checking_status]]
==== Controlla lo stato dei tuoi file 

Lo strumento principale che userai per determinare lo stato dei tuoi file è il comando `git status`.(((git commands, status)))
Se esegui questo comando appena dopo un clone, dovresti vedere qualcosa di simile:


[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

Questo significa che hai una directory di lavoro pulita; ovvero che nessuno dei tuoi file tracciati è stato modificato.
Inoltre Git non ha trovato nessun file non ancora tracciato, altrimenti sarebbero elencati qui.
In aggiunta il comando indica anche in quale ramo sei e ti informa che non si è discostato dallo stesso ramo sul server.
Per ora il ramo è sempre `master`, che è il predefinito; non preoccupartene per adesso.
<<ch03-git-branching#ch03-git-branching>> tratterà in dettagli dei `branch` (ramificazioni) e dei riferimenti.

Immagina di aver aggiunto un nuovo file al tuo progetto, un semplice README.
Se il file non esisteva e lanci `git status`, vedrai così il file non tracciato:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

Puoi vedere che il nuovo file README non è tracciato poiché nell'output è nella sezione dal titolo ``Untracked files''.

Untracked significa che Git vede un file che non avevi nello snapshot precedente (commit); Git non lo includerà negli snapshot delle tue commit fino a quando non glielo dirai esplicitamente.
Fa così per evitare che tu includa accidentalmente dei file binari generati o qualsiasi altro tipo di file che non intendi includere.
Se vuoi includere il file `README`, iniziamo a tracciarlo.


[[_tracking_files]]
==== Tracciare Nuovi File

Per iniziare a tracciare un nuovo file, si usa il comando `git add`.(((git commands, add)))
Per tracciare il file `README`, usa questo comando:

[source,console]
----
$ git add README
----

Se lanci nuovamente il comando per lo stato, puoi vedere che il tuo file `README` ora è tracciato e nell'area di `stage` pronto per essere registrato:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

Sai che è nell'area di `stage` perché è nella sezione ``Changes to be committed''.
Se a questo punto fai commit, la versione del file com'era quando hai lanciato `git add` sarà quella che troverai nella successiva cronologia dello snapshot.
Ricorderai che quando prima hai eseguito `git init`, poi hai dovuto lanciare `git add <files>` -- che era necessario per iniziare a tracciare i file nella tua directory.
Il comando `git add` accetta il nome del percorso di un file o una directory; se è una directory, il comando aggiunge ricorsivamente tutti i file in quella directory.

==== Fare lo stage dei file modificati 

Modifichiamo un file che è già tracciato.
Se modifichi un file tracciato chiamato `CONTRIBUTING.md` e poi esegui il comando `git status`, otterrai qualcosa di simile a:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Il file `CONTRIBUTING.md` appare nella sezione chiamata ``Changes not staged for commit''  --  che significa che un file tracciato è stato modificato nella directory di lavoro ma non è ancora nello stage.
Per farlo, esegui il comando `git add`.
`git add` è un comando multifunzione -- lo usi per iniziare a tracciare nuovi file, per fare lo stage dei file e per fare altre cose, ad esempio per segnare come risolti i conflitti causati da un `merge`.
Adesso esegui `git add` per mettere in `stage` il file `CONTRIBUTING.md`, e riesegui `git status`:


[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

Entrambi i file sono nello `stage` e rientreranno nella prossima commit.
A questo punto, immagina di esserti ricordato di una piccola modifica da fare in `CONTRIBUTING.md` prima della commit.
Riapri il file e fai la modifica: ora sei pronto per la commit.
Come sempre, esegui `git status` un'altra volta:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Cos'è successo?
Ora `CONTRIBUTING.md` è elencato sia dentro che fuori lo `stage`.
Come è possibile?
È saltato fuori che Git ha messo in `stage` il file esattamente com'era quando hai eseguito `git add`.
Se committi ora, la versione di `CONTRIBUTING.md` che verrà registrata sarà quella che avevi quando hai eseguito il `git add`, non la versione del file che trovi nella directory di lavoro quando esegui `git commit`.
Se modifichi un file dopo che hai eseguito `git add`, devi rieseguire `git add` per mettere nello `stage` l'ultima versione del file:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== Status in formato breve

Anche se l'output di `git status` è abbastanza completo, è anche piuttosto prolisso.
Git però ha anche una opzione `short` di status così che si possono vedere le proprie modifiche in un modo più compatto.
Se esegui `git status -s` o `git status --short` ottieni dal comando un output molto più semplificato:

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

I nuovi file che non sono tracciati hanno un `??` accanto a loro, i nuovi file che sono stati aggiunti all'area di stage hanno una `A`, i file modificati hanno una `M` e così via.
Nell'output ci sono due colonne -- la colonna a sinistra indica lo stato dell'area di stage e la colonna a destra indica lo stato dell'albero di lavoro.
Così ad esempio, nel precedente output, il file `README` risulta modificato nella directory di lavoro ma non ancora inserito nell'area di stage, mentre il file `lib/simplegit.rb` é modificato ed inserito nell'area di stage.
Il file `Rakefile` é stato modificato, inserito nell'area di stage e poi modificato di nuovo. Quindi ci sono modifiche di questo file che sono sia nell'area di stage che al di fuori.


[[_ignoring]]
==== Ignorare File 

Spesso hai dei file che non vuoi che Git aggiunga automaticamente e nemmeno che te li mostri come tracciati.
Generalmente si tratta di file generati automaticamente, come i log o quelli prodotti dal tuoi sistema di `build`.
In questi casi puoi creare un file chiamato `.gitignore` con la lista di pattern dei file che vuoi ignorare.(((ignoring files)))
Questo è un file `.gitignore` di esempio:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

La prima riga dice a Git di ignorare qualsiasi file che finisce in ``.o'' or ``.a'' -- file di oggetti o archivi che possono essere il prodotto di una compilazione del tuo codice.
La seconda riga dice a Git di ignorare tutti i file il cui nomefinisce con una tilde (`~`), che è usata da alcuni editor di testo come Emacs per marcare i file temporanei.
Puoi anche includere le directory log, tmp o pid, documenti generati automaticamente e così via.
Definire un file `.gitignore` per un tuo nuovo repository prima di iniziare è generalmente una buona idea, così eviti il rischio di registrare accidentalmente dei file che non vuoi nel tuo repository Git.

Queste sono le regole per i pattern che puoi usare in `.gitignore`:

*  Le righe vuote o che inizino con `#` vengono ignorate.
*  Gli standard glob pattern funzionano (http://it.wikipedia.org/wiki/Glob_pattern, ndt) e saranno applicati ricorsivamente attraverso tutto l'intero albero di lavoro.
*  Puoi iniziare i pattern con uno slash (`/`) per evitare la ricorsività.
*  Puoi terminare i pattern con uno slash (`/`) per indicare una directory.
* Puoi negare un pattern facendolo iniziare con un punto esclamativo (`!`).

I `glob pattern` sono come espressioni regolari semplificate, usate dalla shell.
L'asterisco `\*` corrisponde a zero o più caratteri; `[abc]` corrisponde a ogni carattere all'interno delle parentesi (in questo caso a, b, o c); il punto interrogativo `?` corrisponde ad un carattere singolo; e i caratteri all'interno delle parentesi quadre separati dal segno meno `[0-9]` corrispondono ad ogni carattere compreso tra di loro (in questo caso da 0 a 9).
Puoi anche utilizzare due asterischi per avere la corrispondenza con le directory nidificate; `a/**/z` corrisponderà a `a/z`, `a/b/z`, `a/b/c/z`, e così via.

Questo è un altro esempio di file `.gitignore`:

[source]
----
# ignora tutti i file .a 
*.a

# ma traccia lib.a, sebbene tu stia ignorando tutti i file .a
!lib.a

# ignora solo il TODO nella root, e non subdir/TOD
/TODO

# ignora tutti i file in ogni directory denominata build
build/

# ignora doc/note.txt, ma non doc/server/arch.txt
doc/*.txt

# ignora tutti i file .pdf  nella directory doc/ ed in ognuna delle sue sottodirectory
doc/**/*.pdf
----

[TIP]
====
Se desideri un punto di partenza per i tuoi progetti, GitHub mantiene un elenco abbastanza completo di ottimi esempi di file `.gitignore` per decine di progetti e linguaggi all'URL  https://github.com/github/gitignore[]. 
====

[NOTE]
====
In un caso semplice, un repository potrebbe avere un singolo file `.gitignore` nella propria directory radice, che si applica ricorsivamente all'intero repository.
Comunque, è anche possibile avere ulteriori file `.gitignore` nelle sottodirectory.
Le regole di questi `.gitignore` nidificati si applicano soltanto ai file contenuti nella directory in cui il `.gitignore` è posizionato.
(Il repository del codice sorgente del kernel Linux ha 206 file `.gitignore`.)

È oltre gli scopi di questo libro entrare nei dettagli dei file `.gitignore` multipli; per i dettagli vedi `man gitignore`.
====


[[_git_diff_staged]]
==== Mostra le modifiche dentro e fuori lo `stage` 

Se `git status` è troppo vago per te -- vuoi sapere cos'è stato effettivamente modificato e non solo quali file -- puoi usare il comando `git diff`.(((git commands, diff)))
Tratteremo più avanti `git diff` con maggior dettaglio, ma probabilmente lo userai molto spesso per rispondere a queste due domande: Cos'è che hai modificato ma non è ancora in `stage`?
E cos'hai nello `stage` che non hai ancora registrato con commit?
Sebbene `git status` risponda a queste domande in modo genericoelencando i nomi dei file, `git diff` mostra le righe effettivamente aggiunte e rimosse -- la patch così com'è.

Supponiamo che tu abbia modificato nuovamente `README` e `CONTRIBUTING.md` ma messo nello `stage` solo il primo. Se esegui il comando `git status`, vedrai qualcosa come questo:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Per vedere cosa hai modificato, ma non ancora inserito nell'area di `stage`, digita `git diff` senza altri argomenti:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

Questo comando confronta cosa c'è nella tua directory di lavoro con quello che c'è nella tua area di `stage`.
Il risultato mostra le tue modifiche che ancora non hai messo nello `stage`.

Se vuoi vedere cosa c'è nello `stage` e che farà parte della prossima commit, puoi usare `git diff --staged`.
Questo comando confronta le modifiche che hai nell'area di `stage` e la tua ultima commit:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

È importante notare che `git diff` di per se non visualizza tutte le modifiche fatte dall'ultima commit, ma solo quelle che non sono ancora in `stage`.
Se hai messo in `stage` tutte le tue modifiche, `git diff` non mostrerà nulla.

Ecco un altro esempio, se metti in `stage` il file `CONTRIBUTING.md` e lo modifichi, puoi usare `git diff` per vedere quali modifiche al file sono in stage e i quali non ancora.
Se il nostro ambiente assomiglia a questo:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Allora puoi usare `git diff` per vedere cosa non è ancora in `stage`

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

e `git diff --cached` per vedere cos'è già in `stage` (`--staged` e `--cached` sono sinonimi)

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
.Git Diff in uno Strumento Esterno 
====
Continueremo ad utilizzare il comando `git diff` in vari modi attraverso il resto del libro.
Se invece preferisci un programma grafico o un visualizzatore esterno di differenze c'é un altro modo per visionare queste diff.
Se esegui `git difftool` invece di `git diff`, puoi visualizzare la singola diff in software come emerge, vimdiff e molti altri (inclusi prodotti commerciali).
Esegui `git difftool --tool-help` per vedere cos'é disponibile sul tuo sistema.
====

[[_committing_changes]]
==== Registra con commit le tue modifiche

Ora che la tua area di stage è configurata come vuoi, puoi fare l'operazione di commit delle tue modifiche.
Ricorda che tutto ciò che non è in `stage` -- qualsiasi file che hai creato o modificato per cui non hai fatto `git add` -- non sarà nell'operazione di commit.
Rimarranno come file modificati sul tuo disco.
In questo caso, l'ultima volta che hai eseguito `git status`, hai visto che tutto era in `stage`, così sei pronto a registrare con committ le tue modifiche.(((git commands, status)))
Il modo più semplice per farlo è eseguire `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

Facendolo lanci il tuo editor predefinito.
(Questo è impostato nella tua shell con la variabile di ambiente `EDITOR` -- generalmente vim o emacs, sebbene tu possa configurarlo con qualsiasi altro editor, usando il comando `git config --global core.editor` come hai visto nel <<ch01-getting-started#ch01-getting-started>>).(((editor, changing default)))(((git commands, config)))

L'editor visualizzerà il testo (questo è un esempio della schermata di Vim):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

Come vedi, il messaggio predefinito della commit contiene l'ultimo output del comando `git status`, commentato, e la prima riga in alto è vuota.
Puoi rimuovere questi commenti e inserire il tuo messaggio di commit, o puoi lasciarli così per aiutarti a ricordare cosa stai registrando con commit.
(Per un promemoria ancora più esplicito puoi usare l'opzione `-v` con `git commit`.
Facendo così saranno inserite nel commento anche le modifiche stesse, così che tu possa vedere esattamente quali modifiche stai registrando).
Quando esci dall'editor, Git crea la tua commit con il proprio messaggio (rimuovendo commenti ed eventuali diff).

In alternativa, puoi digitare il tuo messaggio per la commit, sulla riga di comando della `commit` stessa, specificandolo dopo l'opzione -m, come segue:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

Hai creato la tua prima commit!
Puoi vedere che la commit restituisce alcune informazioni su se stessa: su quale `branch` (ramo, ndt) hai fatto la commit (`master`), quale checksum SHA-1 ha la commit (`463dc4f`), quanti file sono stati modificati e le statistiche sulle righe aggiunte e rimosse con la commit.

Ricorda che la commit registra lo snapshot che hai salvato nella tua area di `stage`.
Qualsiasi cosa che non è nello `stage` rimarrà lì come modificata; puoi fare un'altra commit per aggiungerli alla tua cronologia.
Ogni volta che fai una commit, stai salvando un'istantanea (`snapshot`) del tuo progetto che puoi ripristinare o confrontare in seguito.


==== Saltare l'Area di Stage

(((staging area, skipping)))
Sebbene sia estremamente utile per amministrare le commit esattamente come vuoi, l'area di stage è molto più complessa di quanto tu possa necessitare nel lavoro normale.
Se vuoi saltare l'area di `stage`, Git fornisce una semplice sccorciatoia.
Aggiungendo l'opzione `-a` al comando `git commit`, Git, prima di eseguire la commit, mette automaticamente nello `stage` tutti i file che erano già tracciati, permettendoti di saltare la parte `git add`:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

Nota come in questo caso non hai bisogno di eseguire `git add` per `CONTRIBUTING.md` prima della commit.
Questo perchè l'opzione `-a` include tutti i file modificati.
Questo è conveniente, ma attenzione: a volte questa opzione potrebbe causare l'inclusione di modifiche non volute.

[[_removing_files]]
==== Rimuovere i File

(((files, removing)))
Per rimuovere un file da Git devi rimuoverlo dai file tracciati (più precisamente,  rimuoverlo dall'area di `stage`) e quindi registrare con commit.
Il comando `git rm` fa questo e lo rimuove dalla tua directory di lavoro, così che la prossima volta non lo vedrai come un file non tracciato.

Se rimuovi semplicemente il file dalla directory di lavoro, apparirà nella sezione ``Changes not staged for commit''  (cioè, _no in `stage`_) dell'output `git status`:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Se poi esegui `git rm`, la rimozione del file viene messa nello `stage`:


[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

La prossima volta che registrerai una commit, il file sparirà e non sarà più tracciato.
Se avevi già modificato il file o lo avevi aggiunto all'area di stage, devi forzarne la rimozione con l'opzione `-f`.
Questa è una misura di sicurezza per prevenire la rimozione accidentale dei dati che non sono ancora stati salvati in uno `snapshot` e che non potrebbero essere recuperati con Git.

Un'altra cosa utile che potresti voler fare è mantenere il file nel tuo ambiente di di lavoro ma rimuoverlo dall'area di `stage`.
In altre parole, vuoi mantenere il file sul tuo disco ma non vuoi che Git continui a tracciarlo.
Questo è particolarmente utile se hai dimenticato di aggiungere qualcosa al tuo `.gitignore` e accidentalmente lo metti in `stage`, come un file di log molto grande o un sacco di file compilati `.a`.
Per farlo usa l'opzione `--cached`:

[source,console]
----
$ git rm --cached README
----

Puoi passare file, directory o pattern glob di file al comando `git rm`.
Questo significa che puoi fare:

[source,console]
----
$ git rm log/\*.log
----

Nota la barra inversa (`\`) prima di `*`.
Questo è necessario perché Git ha un'espansione propria dei nomi di file oltre a quella della tua shell.
Questo comando rimuove tutti i file che hanno l'estensione `.log` nella directory `log/`.
Oppure, puoi fare qualcosa di questo tipo:

[source,console]
----
$ git rm \*~
----

Questo comando rimuove tutti i file il cui nome termina con una `~`.

[[_git_mv]]
==== Spostare i File 

(((files, moving)))
A differenza di altri sistemi VCS, Git non traccia esplicitamente gli spostamenti dei file.
Se rinomini un file in Git, nessun metadato viene salvato per dirgli che lo hai rinominato.
Tuttavia, Git è abbastanza intelligente da capirlo dopo che l'hai fatto -- più in la ci occuperemo di rilevare il movimento dei file.

Perciò può creare un po' di confusione il fatto che Git abbia un comando `mv`.
Se vuoi rinominare un file in Git puoi eseguire qualcosa come:

[source,console]
----
$ git mv file_from file_to
----

e funziona bene.
Se, infatti, lanci un comando del genere e controlli lo stato, vedrai che Git considera il file rinominato:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

Comunque, questo è equivalente ad eseguire qualcosa come:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

Git capisce che implicitamente stai rinominando il file, così che non c'è differenza tra rinominare un file in questo modo o con il comando `mv`.
L'unica differenza reale è che `mv` è un solo comando invece di tre -- è un questione di convenienza.
Ciò che più conta è che puoi usare qualsiasi strumento per rinominare un file, e gestire l'aggiunta/rimozione più tardi, prima della commit.

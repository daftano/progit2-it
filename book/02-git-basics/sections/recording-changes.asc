////
=== Recording Changes to the Repository
////

=== Salvare le modifiche sul repository

////
At this point, you should have a _bona fide_ Git repository on your local machine, and a checkout or _working copy_ of all of its files in front of you.
Typically, you'll want to start making changes and committing snapshots of those changes into your repository each time the project reaches a state you want to record.
////

A questo punto dovresti avere un _autentico_ repository Git sul tuo computer e un checkout, ovvero una _copia di lavoro_, di tutti i suoi file di fronte a te.
Solitamente vorrai iniziare a fare modifiche e inviare gli snapshot di queste al tuo repository ogni volta che il progetto raggiunga uno stato che vuoi salvare.

////
Remember that each file in your working directory can be in one of two states: _tracked_ or _untracked_.
Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged.
In short, tracked files are files that Git knows about.
////

Ricorda che ogni file della tua directory di lavoro può essere in uno dei due stati seguenti: _tracked_ (tracciato, ndt.) o _untracked_ (non tracciato, ndt.).
I file tracked sono già presenti nell'ultimo snapshot; possono quindi essere unmodified (non modificati, ndt.), modified (modificati, ndt.) o staged.
In breve i file tracked sono file che Git conosce.

////
Untracked files are everything else -- any files in your working directory that were not in your last snapshot and are not in your staging area.
When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven't edited anything.
////

I file untracked sono tutti gli altri -- qualsiasi file nella tua directory di lavoro che non è presente nell'ultimo snapshot o nella tua area di stage.
Quando cloni per la prima volta un repository, tutti i tuoi file sono tracciati e non modificati perché Git li ha appena prelevati e non hai modificato ancora niente.

////
As you edit files, Git sees them as modified, because you've changed them since your last commit.
As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats.
////

Quando editi dei file, Git li vede come modificati, perché sono cambiati rispetto all'ultima commit.
Quando lavori, metti selettivamente nell'area di stage i file modificati e poi fai la commit di tutto ciò che è in quest'area, e quindi il ciclo si ripete.

////
.The lifecycle of the status of your files.
image::images/lifecycle.png[The lifecycle of the status of your files.]
////

.Il ciclo di vita dello stato dei tuoi file.
image::images/lifecycle.png[Il ciclo di vita dello stato dei tuoi file]


[[_checking_status]]
////
==== Checking the Status of Your Files
////
==== Controlla lo stato dei tuoi file 

////
The main tool you use to determine which files are in which state is the `git status` command.(((git commands, status)))
If you run this command directly after a clone, you should see something like this:
////

Lo strumento principale che userai per determinare lo stato dei tuoi file è il comando `git status`.(((git commands, status)))
Se esegui questo comando appena dopo un clone, dovresti vedere qualcosa di simile:


[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

////
This means you have a clean working directory; in other words, none of your tracked files are modified.
Git also doesn't see any untracked files, or they would be listed here.
Finally, the command tells you which branch you're on and informs you that it has not diverged from the same branch on the server.
For now, that branch is always ``master'', which is the default; you won't worry about it here.
<<ch03-git-branching#ch03-git-branching>> will go over branches and references in detail.
////

Questo significa che hai una directory di lavoro pulita; ovvero che nessuno dei tuoi file tracciati è stato modificato.
Inoltre Git non ha trovato nessun file non ancora tracciato, altrimenti sarebbero elencati qui.
In aggiunta il comando indica anche in quale ramo sei e ti informa che non si è discostato dallo stesso ramo sul server.
Per ora il ramo è sempre `master`, che è il predefinito; non preoccupartene per adesso.
<<ch03-git-branching#ch03-git-branching>> tratterà in dettagli dei `branch` (ramificazioni) e dei riferimenti.

////
Let's say you add a new file to your project, a simple `README` file.
If the file didn't exist before, and you run `git status`, you see your untracked file like so:
////

Immagina di aver aggiunto un nuovo file al tuo progetto, un semplice README.
Se il file non esisteva e lanci `git status`, vedrai così il file non tracciato:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

////
You can see that your new `README` file is untracked, because it's under the ``Untracked files'' heading in your status output.
Untracked basically means that Git sees a file you didn't have in the previous snapshot (commit); Git won't start including it in your commit snapshots until you explicitly tell it to do so.
It does this so you don't accidentally begin including generated binary files or other files that you did not mean to include.
You do want to start including `README`, so let's start tracking the file.
////

Puoi vedere che il nuovo file README non è tracciato poiché nell'output è nella sezione dal titolo ``Untracked files''.

Untracked significa che Git vede un file che non avevi nello snapshot precedente (commit); Git non lo includerà negli snapshot delle tue commit fino a quando non glielo dirai esplicitamente.
Fa così per evitare che tu includa accidentalmente dei file binari generati o qualsiasi altro tipo di file che non intendi includere.
Se vuoi includere il file `README`, iniziamo a tracciarlo.


[[_tracking_files]]
////
==== Tracking New Files
////
==== Tracciare Nuovi File

////
In order to begin tracking a new file, you use the command `git add`.(((git commands, add)))
To begin tracking the `README` file, you can run this:
////

Per iniziare a tracciare un nuovo file, si usa il comando `git add`.(((git commands, add)))
Per tracciare il file `README`, usa questo comando:

[source,console]
----
$ git add README
----

////
If you run your status command again, you can see that your `README` file is now tracked and staged to be committed:
////

Se lanci nuovamente il comando per lo stato, puoi vedere che il tuo file `README` ora è tracciato e nell'area di `stage` pronto per essere registrato:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

////
You can tell that it's staged because it's under the ``Changes to be committed'' heading.
If you commit at this point, the version of the file at the time you ran `git add` is what will be in the subsequent historical snapshot.
You may recall that when you ran `git init` earlier, you then ran `git add <files>` -- that was to begin tracking files in your directory.(((git commands, init)))(((git commands, add)))
The `git add` command takes a path name for either a file or a directory; if it's a directory, the command adds all the files in that directory recursively.
////

Sai che è nell'area di `stage` perché è nella sezione ``Changes to be committed''.
Se a questo punto fai commit, la versione del file com'era quando hai lanciato `git add` sarà quella che troverai nella successiva cronologia dello snapshot.
Ricorderai che quando prima hai eseguito `git init`, poi hai dovuto lanciare `git add <files>` -- che era necessario per iniziare a tracciare i file nella tua directory.
Il comando `git add` accetta il nome del percorso di un file o una directory; se è una directory, il comando aggiunge ricorsivamente tutti i file in quella directory.

////
==== Staging Modified Files
////
==== Fare lo stage dei file modificati 

////
Let's change a file that was already tracked.
If you change a previously tracked file called `CONTRIBUTING.md` and then run your `git status` command again, you get something that looks like this:
////

Modifichiamo un file che è già tracciato.
Se modifichi un file tracciato chiamato `CONTRIBUTING.md` e poi esegui il comando `git status`, otterrai qualcosa di simile a:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

////
The `CONTRIBUTING.md` file appears under a section named ``Changes not staged for commit'' -- which means that a file that is tracked has been modified in the working directory but not yet staged.
To stage it, you run the `git add` command.
`git add` is a multipurpose command -- you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved.
It may be helpful to think of it more as ``add precisely this content to the next commit'' rather than ``add this file to the project''.(((git commands, add)))
Let's run `git add` now to stage the `CONTRIBUTING.md` file, and then run `git status` again:
////

Il file `CONTRIBUTING.md` appare nella sezione chiamata ``Changes not staged for commit'' -- che significa che un file tracciato è stato modificato nella directory di lavoro ma non è ancora nello stage.
Per farlo, esegui il comando `git add`.
`git add` è un comando multifunzione -- lo usi per iniziare a tracciare nuovi file, per fare lo stage dei file e per fare altre cose, ad esempio per segnare come risolti i conflitti causati da un `merge`.
Adesso esegui `git add` per mettere in `stage` il file `CONTRIBUTING.md`, e riesegui `git status`:


[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

////
Both files are staged and will go into your next commit.
At this point, suppose you remember one little change that you want to make in `CONTRIBUTING.md` before you commit it.
You open it again and make that change, and you're ready to commit.
However, let's run `git status` one more time:
////

Entrambi i file sono nello `stage` e rientreranno nella prossima commit.
A questo punto, immagina che ti sia ricordato di una piccola modifica da fare in `CONTRIBUTING.md` prima della commit.
Riapri il file e fai la modifica: ora sei pronto per la commit.
Come sempre, esegui `git status` un'altra volta:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

////
What the heck?
Now `CONTRIBUTING.md` is listed as both staged _and_ unstaged.
How is that possible?
It turns out that Git stages a file exactly as it is when you run the `git add` command.
If you commit now, the version of `CONTRIBUTING.md` as it was when you last ran the `git add` command is how it will go into the commit, not the version of the file as it looks in your working directory when you run `git commit`.
If you modify a file after you run `git add`, you have to run `git add` again to stage the latest version of the file:
////

Cos'è successo?
Ora `CONTRIBUTING.md` è elencato sia dentro che fuori lo `stage`.
Come è possibile?
È saltato fuori che Git ha messo in `stage` il file esattamente com'era quando hai eseguito `git add`.
Se committi ora, la versione di `CONTRIBUTING.md` che verrà registrata sarà quella che avevi quando hai eseguito il `git add`, non la versione del file che trovi nella directory di lavoro quando esegui `git commit`.
Se modifichi un file dopo che hai eseguito `git add`, devi rieseguire `git add` per mettere nello `stage` l'ultima versione del file:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

////
==== Short Status
////
==== Status in formato breve

////
While the `git status` output is pretty comprehensive, it's also quite wordy.
Git also has a short status flag so you can see your changes in a more compact way.
If you run `git status -s` or `git status --short` you get a far more simplified output from the command:
////

Anche se l'output di `git status` è abbastanza completo, è anche piuttosto prolisso.
Git però ha anche una opzione `short` di status così che si possono vedere le proprie modifiche in un modo più compatto.
Se esegui `git status -s` o `git status --short` ottieni dal comando un output molto più semplificato:

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

////
New files that aren't tracked have a `??` next to them, new files that have been added to the staging area have an `A`, modified files have an `M` and so on.
There are two columns to the output -- the left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree.
So for example in that output, the `README` file is modified in the working directory but not yet staged, while the `lib/simplegit.rb` file is modified and staged.
The `Rakefile` was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.
////

I nuovi file che non sono tracciati hanno un `??` accanto a loro, i nuovi file che sono stati aggiunti all'area di stage hanno una `A`, i file modificati hanno una `M` e così via.
Nell'output ci sono due colonne -- la colonna a sinistra indica lo stato dell'area di stage e la colonna a destra indica lo stato dell'albero di lavoro.
Così ad esempio, nel precedente output, il file `README` risulta modificato nella directory di lavoro ma non ancora inserito nell'area di stage, mentre il file `lib/simplegit.rb` é modificato ed inserito nell'area di stage.
Il file `Rakefile` é stato modificato, inserito nell'area di stage e poi modificato di nuovo. Quindi ci sono modifiche di questo file che sono sia nell'area di stage che al di fuori.


[[_ignoring]]
////
==== Ignoring Files
////
==== Ignorare File 

////
Often, you'll have a class of files that you don't want Git to automatically add or even show you as being untracked.
These are generally automatically generated files such as log files or files produced by your build system.
In such cases, you can create a file listing patterns to match them named `.gitignore`.(((ignoring files)))
Here is an example `.gitignore` file:
////

Spesso hai dei file che non vuoi che Git aggiunga automaticamente e nemmeno che te li mostri come tracciati.
Generalmente si tratta di file generati automaticamente, come i log o quelli prodotti dal tuoi sistema di `build`.
In questi casi puoi creare un file chiamato `.gitignore` con la lista di pattern dei file che vuoi ignorare.(((ignoring files)))
Questo è un file `.gitignore` di esempio:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

////
The first line tells Git to ignore any files ending in ``.o'' or ``.a'' -- object and archive files that may be the product of building your code.
The second line tells Git to ignore all files whose names end with a tilde (`~`), which is used by many text editors such as Emacs to mark temporary files.
You may also include a log, tmp, or pid directory; automatically generated documentation; and so on.
Setting up a `.gitignore` file for your new repository before you get going is generally a good idea so you don't accidentally commit files that you really don't want in your Git repository.
////

La prima riga dice a Git di ignorare qualsiasi file che finisce in ``.o'' or ``.a'' -- file di oggetti o archivi che possono essere il prodotto di una compilazione del tuo codice.
La seconda riga dice a Git di ignorare tutti i file il cui nomefinisce con una tilde (`~`), che è usata da alcuni editor di testo come Emacs per marcare i file temporanei.
Puoi anche includere le directory log, tmp o pid, documenti generati automaticamente e così via.
Definire un file `.gitignore` per un tuo nuovo repository prima di iniziare è generalmente una buona idea, così eviti il rischio di registrare accidentalmente dei file che non vuoi nel tuo repository Git.

////
The rules for the patterns you can put in the `.gitignore` file are as follows:

*  Blank lines or lines starting with `#` are ignored.
*  Standard glob patterns work, and will be applied recursively throughout the entire working tree.
*  You can start patterns with a forward slash (`/`) to avoid recursivity.
*  You can end patterns with a forward slash (`/`) to specify a directory.
*  You can negate a pattern by starting it with an exclamation point (`!`).
////

Queste sono le regole per i pattern che puoi usare in `.gitignore`:

*  Le righe vuote o che inizino con `#` vengono ignorate.
*  Gli standard glob pattern funzionano (http://it.wikipedia.org/wiki/Glob_pattern, ndt) e saranno applicati ricorsivamente attraverso tutto l'intero albero di lavoro.
*  Puoi iniziare i pattern con uno slash (`/`) per evitare la ricorsività.
*  Puoi terminare i pattern con uno slash (`/`) per indicare una directory.
* Puoi negare un pattern facendolo iniziare con un punto esclamativo (`!`).

////
Glob patterns are like simplified regular expressions that shells use.
An asterisk (`*`) matches zero or more characters; `[abc]` matches any character inside the brackets (in this case a, b, or c); a question mark (`?`) matches a single character; and brackets enclosing characters separated by a hyphen (`[0-9]`) matches any character between them (in this case 0 through 9).
You can also use two asterisks to match nested directories; `a/**/z` would match `a/z`, `a/b/z`, `a/b/c/z`, and so on.
////

I `glob pattern` sono come espressioni regolari semplificate, usate dalla shell.
L'asterisco (`*`) corrisponde a zero o più caratteri; `[abc]` corrisponde a ogni carattere all'interno delle parentesi (in questo caso a, b, o c); il punto interrogativo (`?`) corrisponde ad un carattere singolo; e i caratteri all'interno delle parentesi quadre separati dal segno meno (`[0-9]`) corrispondono ad ogni carattere compreso tra di loro (in questo caso da 0 a 9).
Puoi anche utilizzare due asterischi per avere la corrispondenza con le directory nidificate; `a/**/z` corrisponderà a `a/z`, `a/b/z`, `a/b/c/z`, e così via.

////
Here is another example `.gitignore` file:
////

Questo è un altro esempio di file `.gitignore`:

[source]
----
# ignora tutti i file .a 
*.a

# ma traccia lib.a, sebbene tu stia ignorando tutti i file .a
!lib.a

# ignora solo il TODO nella root, e non subdir/TOD
/TODO

# ignora tutti i file in ogni directory denominata build
build/

# ignora doc/note.txt, ma non doc/server/arch.txt
doc/*.txt

# ignora tutti i file .pdf  nella directory doc/ ed in ognuna delle sue sottodirectory
doc/**/*.pdf
----

////
[TIP]
====
GitHub maintains a fairly comprehensive list of good `.gitignore` file examples for dozens of projects and languages at https://github.com/github/gitignore[] if you want a starting point for your project.
====
////

[TIP]
====
Se desideri un punto di partenza per i tuoi progetti, GitHub mantiene un elenco abbastanza completo di ottimi esempi di file `.gitignore` per decine di progetti e linguaggi all'URL  https://github.com/github/gitignore[]. 
====

////
[NOTE]
====
In the simple case, a repository might have a single `.gitignore` file in its root directory, which applies recursively to the entire repository.
However, it is also possible to have additional `.gitignore` files in subdirectories.
The rules in these nested `.gitignore` files apply only to the files under the directory where they are located.
(The Linux kernel source repository has 206 `.gitignore` files.)

It is beyond the scope of this book to get into the details of multiple `.gitignore` files; see `man gitignore` for the details.
====
////

[NOTE]
====
In un caso semplice, un repository potrebbe avere un singolo file `.gitignore` nella propria directory radice, che si applica ricorsivamente all'intero repository.
Comunque, è anche possibile avere ulteriori file `.gitignore` nelle sottodirectory.
Le regole di questi `.gitignore` nidificati si applicano soltanto ai file contenuti nella directory in cui il `.gitignore` è posizionato.
(Il repository del codice sorgente del kernel Linux ha 206 file `.gitignore`.)

È oltre gli scopi di questo libro entrare nei dettagli dei file `.gitignore` multipli; per i dettagli vedi `man gitignore`.
====


[[_git_diff_staged]]
////
==== Viewing Your Staged and Unstaged Changes
////
==== Mostra le modifiche dentro e fuori lo `stage` 

////
If the `git status` command is too vague for you -- you want to know exactly what you changed, not just which files were changed -- you can use the `git diff` command.(((git commands, diff)))
We'll cover `git diff` in more detail later, but you'll probably use it most often to answer these two questions: What have you changed but not yet staged?
And what have you staged that you are about to commit?
Although `git status` answers those questions very generally by listing the file names, `git diff` shows you the exact lines added and removed -- the patch, as it were.

Let's say you edit and stage the `README` file again and then edit the `CONTRIBUTING.md` file without staging it.
If you run your `git status` command, you once again see something like this:
////

Se `git status` è troppo vago per te -- vuoi sapere cos'è stato effettivamente modificato e non solo quali file -- puoi usare il comando `git diff`.(((git commands, diff)))
Tratteremo più avanti `git diff` con maggior dettaglio, ma probabilmente lo userai molto spesso per rispondere a queste due domande: Cos'è che hai modificato ma non è ancora in `stage`?
E cos'hai nello `stage` che non hai ancora registrato con commit?
Sebbene `git status` risponda a queste domande in modo genericoelencando i nomi dei file, `git diff` mostra le righe effettivamente aggiunte e rimosse -- la patch così com'è.

Supponiamo che tu abbia modificato nuovamente `README` e `CONTRIBUTING.md` ma messo nello `stage` solo il primo. Se esegui il comando `git status`, vedrai qualcosa come questo:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

////
To see what you've changed but not yet staged, type `git diff` with no other arguments:
////

Per vedere cosa hai modificato, ma non ancora inserito nell'area di `stage`, digita `git diff` senza altri argomenti:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

////
That command compares what is in your working directory with what is in your staging area.
The result tells you the changes you've made that you haven't yet staged.

If you want to see what you've staged that will go into your next commit, you can use `git diff --staged`.
This command compares your staged changes to your last commit:
////

Questo comando confronta cosa c'è nella tua directory di lavoro con quello che c'è nella tua area di `stage`.
Il risultato mostra le tue modifiche che ancora non hai messo nello `stage`.

Se vuoi vedere cosa c'è nello `stage` e che farà parte della prossima commit, puoi usare `git diff --staged`.
Questo comando confronta le modifiche che hai nell'area di `stage` e la tua ultima commit:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

////
It's important to note that `git diff` by itself doesn't show all changes made since your last commit -- only changes that are still unstaged.
If you've staged all of your changes, `git diff` will give you no output.
////

È importante notare che `git diff` di per se non visualizza tutte le modifiche fatte dall'ultima commit, ma solo quelle che non sono ancora in `stage`.
Se hai messo in `stage` tutte le tue modifiche, `git diff` non mostrerà nulla.

////
For another example, if you stage the `CONTRIBUTING.md` file and then edit it, you can use `git diff` to see the changes in the file that are staged and the changes that are unstaged.
If our environment looks like this:
////

Ecco un altro esempio, se metti in `stage` il file `CONTRIBUTING.md` e lo modifichi, puoi usare `git diff` per vedere quali modifiche al file sono in stage e i quali non ancora.
Se il nostro ambiente assomiglia a questo:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

////
Now you can use `git diff` to see what is still unstaged:
////

Allora puoi usare `git diff` per vedere cosa non è ancora in `stage`

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

////
and `git diff --cached` to see what you've staged so far (`--staged` and `--cached` are synonyms):
////

e `git diff --cached` per vedere cos'è già in `stage` (`--staged` e `--cached` sono sinonimi)

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

////
[NOTE]
.Git Diff in an External Tool
====
We will continue to use the `git diff` command in various ways throughout the rest of the book.
There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead.
If you run `git difftool` instead of `git diff`, you can view any of these diffs in software like emerge, vimdiff and many more (including commercial products).
Run `git difftool --tool-help` to see what is available on your system.
====
////

[NOTE]
.Git Diff in uno Strumento Esterno 
====
Continueremo ad utilizzare il comando `git diff` in vari modi attraverso il resto del libro.
Se invece preferisci un programma grafico o un visualizzatore esterno di differenze c'é un altro modo per visionare queste diff.
Se esegui `git difftool` invece di `git diff`, puoi visualizzare la singola diff in software come emerge, vimdiff e molti altri (inclusi prodotti commerciali).
Esegui `git difftool --tool-help` per vedere cos'é disponibile sul tuo sistema.
====

[[_committing_changes]]
////
==== Committing Your Changes
////
==== Registra con commit le tue modifiche

////
Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged -- any files you have created or modified that you haven't run `git add` on since you edited them -- won't go into this commit.
They will stay as modified files on your disk.
In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
The simplest way to commit is to type `git commit`:(((git commands, commit)))
////

Ora che la tua area di stage è configurata come vuoi, puoi fare l'operazione di commit delle tue modifiche.
Ricorda che tutto ciò che non è in `stage` -- qualsiasi file che hai creato o modificato per cui non hai fatto `git add` -- non sarà nell'operazione di commit.
Rimarranno come file modificati sul tuo disco.
In questo caso, l'ultima volta che hai eseguito `git status`, hai visto che tutto era in `stage`, così sei pronto a registrare con committ le tue modifiche.(((git commands, status)))
Il modo più semplice per farlo è eseguire `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

////
Doing so launches your editor of choice.
(This is set by your shell's `EDITOR` environment variable -- usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<ch01-getting-started#ch01-getting-started>>).(((editor, changing default)))(((git commands, config)))

The editor displays the following text (this example is a Vim screen):
////

Facendolo lanci il tuo editor predefinito.
(Questo è impostato nella tua shell con la variabile di ambiente `EDITOR` -- generalmente vim o emacs, sebbene tu possa configurarlo con qualsiasi altro editor, usando il comando `git config --global core.editor` come hai visto nel <<ch01-getting-started#ch01-getting-started>>).(((editor, changing default)))(((git commands, config)))

L'editor visualizzerà il testo (questo è un esempio della schermata di Vim):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

////
You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.
(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).

Alternatively, you can type your commit message inline with the `commit` command by specifying it after a `-m` flag, like this:
////

Come vedi, il messaggio predefinito della commit contiene l'ultimo output del comando `git status`, commentato, e la prima riga in alto è vuota.
Puoi rimuovere questi commenti e inserire il tuo messaggio di commit, o puoi lasciarli così per aiutarti a ricordare cosa stai registrando con commit.
(Per un promemoria ancora più esplicito puoi usare l'opzione `-v` con `git commit`.
Facendo così saranno inserite nel commento anche le modifiche stesse, così che tu possa vedere esattamente quali modifiche stai registrando).
Quando esci dall'editor, Git crea la tua commit con il proprio messaggio (rimuovendo commenti ed eventuali diff).

In alternativa, puoi digitare il tuo messaggio per la commit, sulla riga di comando della `commit` stessa, specificandolo dopo l'opzione -m, come segue:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

////
Now you've created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.

Remember that the commit records the snapshot you set up in your staging area.
Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.
////

Hai creato la tua prima commit!
Puoi vedere che la commit restituisce alcune informazioni su se stessa: su quale `branch` (ramo, ndt) hai fatto la commit (`master`), quale checksum SHA-1 ha la commit (`463dc4f`), quanti file sono stati modificati e le statistiche sulle righe aggiunte e rimosse con la commit.

Ricorda che la commit registra lo snapshot che hai salvato nella tua area di `stage`.
Qualsiasi cosa che non è nello `stage` rimarrà lì come modificata; puoi fare un'altra commit per aggiungerli alla tua cronologia.
Ogni volta che fai una commit, stai salvando un'istantanea (`snapshot`) del tuo progetto che puoi ripristinare o confrontare in seguito.


////
==== Skipping the Staging Area
////
==== Saltare l'Area di Stage

(((staging area, skipping)))
////
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:
////

Sebbene sia estremamente utile per amministrare le commit esattamente come vuoi, l'area di stage è molto più complessa di quanto tu possa necessitare nel lavoro normale.
Se vuoi saltare l'area di `stage`, Git fornisce una semplice sccorciatoia.
Aggiungendo l'opzione `-a` al comando `git commit`, Git, prima di eseguire la commit, mette automaticamente nello `stage` tutti i file che erano già tracciati, permettendoti di saltare la parte `git add`:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

////
Notice how you don't have to run `git add` on the `CONTRIBUTING.md` file in this case before you commit.
That's because the `-a` flag includes all changed files.
This is convenient, but be careful; sometimes this flag will cause you to include unwanted changes.
////

Nota come in questo caso non hai bisogno di eseguire `git add` per `CONTRIBUTING.md` prima della commit.
Questo perchè l'opzione `-a` include tutti i file modificati.
Questo è conveniente, ma attenzione: a volte questa opzione potrebbe causare l'inclusione di modifiche non volute.

[[_removing_files]]
==== Removing Files

(((files, removing)))
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.

If you simply remove the file from your working directory, it shows up under the ``Changes not staged for commit'' (that is, _unstaged_) area of your `git status` output:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Then, if you run `git rm`, it stages the file's removal:

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

The next time you commit, the file will be gone and no longer tracked.
If you modified the file or had already added it to the staging area, you must force the removal with the `-f` option.
This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.

Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
To do this, use the `--cached` option:

[source,console]
----
$ git rm --cached README
----

You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as:

[source,console]
----
$ git rm log/\*.log
----

Note the backslash (`\`) in front of the `*`.
This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can do something like this:

[source,console]
----
$ git rm \*~
----

This command removes all files whose names end with a `~`.

[[_git_mv]]
==== Moving Files

(((files, moving)))
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact -- we'll deal with detecting file movement a bit later.

Thus it's a bit confusing that Git has a `mv` command.
If you want to rename a file in Git, you can run something like:

[source,console]
----
$ git mv file_from file_to
----

and it works fine.
In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

However, this is equivalent to running something like this:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
The only real difference is that `git mv` is one command instead of three -- it's a convenience function.
More importantly, you can use any tool you like to rename a file, and address the add/rm later, before you commit.

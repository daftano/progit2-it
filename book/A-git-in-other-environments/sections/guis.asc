=== Interfacce grafiche

(((GUIs)))(((Graphical tools)))
L'ambiente nativo di Git è il terminale.
Qui appaiono per prime le nuove funzionalità, e solo dalla riga di comando si ha tutta la potenza di Git completamente a disposizione.
Ma il semplice testo non è sempre la scelta migliore; a volte una rappresentazione visiva è quello che serve, e ad alcuni utenti risulta molto più comoda un'interfaccia di 'cliccabile'.

È importante notare che le diverse interfacce ritagliate per diversi flussi di lavoro.
Alcuni client espongono solo un sottoinsieme particolarmente curato delle funzionalità Git, al fine di supportare uno specifico modo di lavorare che l'autore considera efficace.
Sotto questa luce, nessuno di questi strumenti si può definire il ``migliore' degli altri, sono semplicemente adatti al loro scopo previsto.
Da notare inoltre che non c'è niente che tali client grafici possano fare che non si già possibile fare da riga di comando; la riga di comando resta il posto in cui si ha la massima potenza e il controllo totale quando si lavora con i repository.

==== `gitk` e `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
Installando Git, si installano anche i suoi strumenti visuali, `gitk` e `git-gui`.

`gitk` visualizza graficamente la cronologia.
La si immagini come una potente shell GUI su `git log` e `git grep`.
Questo è lo strumento da utilizzare quando si cerca qualcosa che è accaduto nel passato, o per visualizzare la storia del progetto.

È. più facile richiamare Gitk dalla riga di comando.
Basta un `cd` in un repository Git, ed inserire:

[source,console]
----
$ gitk [git log options]
----

Gitk accetta molte opzioni sulla riga dei comandi, la maggior parte delle quali vengono trasferite al sottostante `git log`.
Probabilmente la più utile è il flag `--all`, che indica a gitk di mostrare i commit ricercabili da _ogni_ ref, non solo da HEAD.
L'interfaccia di Gitk si presenta così:

.La visualizzazione della cronologia con `gitk`.
image::images/gitk.png[The `gitk` history viewer.]

La parte superiore assomiglia all'output di `git log --graph`; ogni cerchietto rappresenta una commit, le linee rappresentano le relazioni di parentela, e i refs appaiono come caselle colorate.
Il cerchietto giallo rappresenta HEAD, e quello rosso le modifiche non sono ancora diventate dei commit.
In fondo c'è la vista della commit selezionata; i commenti e la patch sulla sinistra, e una visualizzazione di riepilogo a destra.
In mezzo c'è un insieme di controlli per la ricerca nella cronologia.

`git-gui`, d'altra parte, è soprattutto uno strumento per navigare tra i commit.
Anch'esso è più facile da richiamare dalla riga di comando:

[source,console]
-----
$ git gui
-----

Ed appare così:

.Lo strumento di commit `git-gui`.
image::images/git-gui.png[The `git-gui` commit tool.]

A sinistra c'è l'indice; le modifiche non in *stage* sono sulla parte superiore, quelle nell'area di stage in basso.
Si possono spostare interi file tra i due stati cliccando sulle rispettive icone, oppure è possibile selezionare un file per la visualizzazione facendo clic sul suo nome.

In alto a destra c'è la vista *diff*, che mostra le modifiche per il file attualmente selezionato.
Si possono mettere nell'area di stage dei singoli blocchi (o singole righe) col click-destro in quest'area.

In basso a destra c'è l'area dei messaggi e delle azioni. Inserire un messaggio nella text box e cliccare su ``Commit'' fa qualcosa di simile a `git commit`.
Si può anche scegliere di correggere l'ultima commit scegliendo il radio button ``Amend', che aggiornerà le ``modifiche nello stage'' col contenuto dell'ultima commit.
Poi si può semplicemente inserire o rimuovere dall'area di stage delle modifiche, cambiare il messaggio della commit, e cliccando nuovamente su ``Commit'' sostituire la vecchia commit con la nuova.

`gitk` e `git-gui` sono esempi di strumenti task-oriented.
Ognuno è ritagliato per un uso specifico (rispettivamente visualizzare la cronologia e creare commit), ed omettono le funzioni non necessarie a questi compiti.


==== GitHub per Mac e Windows

(((GitHub for Mac)))(((GitHub for Windows)))
GitHub ha creato due client Git *workflow-oriented*: uno per Windows e uno per Mac.
Questi client costituiscono un buon esempio di strumenti orientati al flusso di lavoro (workflow-oriented) - piuttosto che esporre _tutte_ le funzionalità di Git, si concentrano invece su una serie scelta di funzioni di uso comune che lavorano bene insieme.
Appaiono così:

.GitHub per Mac.
image::images/github_mac.png[GitHub for Mac.]

.GitHub per Windows.
image::images/github_win.png[GitHub for Windows.]

Sono progettati per apparire e funzionare in modo molto similare, così li considereremo come un prodotto unico.
Noi non faremo un resoconto dettagliato di questi strumenti (che hanno la loro documentazione), ma daremo solo un rapido sguardo alla vista ``changes'' (che è dove si passerà la maggior parte del tempo).

* Sulla sinistra c'è l'elenco dei repository che il client sta controllando; si può aggiungere un repository (sia da clonazione che collegando localmente) cliccando l'icona ``+'' al di sopra di quest'area.
* al centro c'è un'area di commit-input, che consente di inserire un messaggio di commit, e selezionare i file da includere.
  (Su Windows, la cronologia dei commit appare subito sotto; sul Mac, è su un tab separato.)
* Sulla destra c'è una vista di diff, che mostra le modifiche nella propria directory di lavoro, o quelle incluse nella commit selezionata.
* L'ultima cosa da notare è il pulsante ``Sync'' in alto a destra, che è il modo principale per interagire attraverso la rete.

[NOTE]
====
Non è necessario avere un account GitHub per usare questi strumenti.
Anche se sono progettati per il servizio di GitHub e per il suo flusso di lavoro consigliato, funzioneranno bene con qualsiasi repository e opereranno sulla rete con qualsiasi host Git.
====

===== Installazione

GitHub per Windows è scaricabile da https://windows.github.com[], mentre GitHub per Mac da https://mac.github.com[].
Al primo avvio delle applicazioni, percorrono tutto il setup iniziale di Git, come la configurazione del nome, e l'indirizzo di e-mail, ed entrambe impostano dei default validi per tutte le opzioni di configurazione, come il funzionamento della cache le credenziali e dei fine-riga (CRLF).

Entrambi sono ``evergreen'' – gli aggiornamenti vengono scaricati ed installati in background mentre le applicazioni sono aperte.
Tra le funzioni c'è una versione bundle di Git, quindi, in seguito, non ci si dovrà preoccupare di aggiornarla manualmente.
Su Windows, il client comprende uno shortcut per lanciare Powershell con Posh-git, che vedremo in seguito in questo capitolo.

Il passo successivo consiste nel fornire allo strumento dei repository con cui lavorare.
Il client mostra un elenco dei repository cui si ha accesso su GitHub, e li può clonare in un sol colpo.
Se esiste già un repository locale, basta trascinarne la directory dal Finder a da Windows Explorer nella finestra del client di GitHub, e questo verrà incluso nell'elenco dei repository a sinistra.

===== Workflow raccomandato

Una volta installato e configurato, si può usare il client GitHub per molte delle comuni operazioni con Git.
Il flusso di lavoro (workflow) previsto per questo strumento è detto talvolta chiamato ``GitHub Flow.''
Ce ne occupiamo in dettaglio in << _ github_flow >>, ma il senso generale è che (a) si farà il commit di un branch, e (b) ci si sincronizzerà regolarmente con un repository remoto

La gestione dei branch è una delle due aree dove i due tool differiscono.
Sul Mac, c'è un pulsante nella parte alta della finestra per la creazione di un nuovo branch:

.Il pulsante ``Create Branch'' sul Mac.
image::images/branch_widget_mac.png[``Create Branch'' button on Mac.]

Su Windows, questo viene fatto digitando il nuovo nome del branch nel controllo per cambiare branch:

.La creazione di un branch su Windows.
image::images/branch_widget_win.png[Creating a branch on Windows.]

Una volta creato il proprio branch, creare delle nuove commit è abbastanza semplice.
Si fanno delle modifiche nella directory di lavoro, e quando si passa alla finestra del client di GitHub, appariranno i file modificati.
Si inserisce un messaggio di commit, si selezionano i files che si vogliono includere, e si clicca sul pulsante ``Commit'' (ctrl-enter o ⌘-enter).

Il modo principale per interagire con altri repository sulla rete è farlo tramite la funzionalità di ``Sync''.
Git internamente considera diverse le operazioni per push, fetch, merge, e rebase, mentre i client di GitHub racchiudono tutto in quest'unica funzionalità multi-passo.
Ecco quello che avviene quando si clicca sul pulsante Sync:

. `git pull --rebase`.
  Se fallisce a causa per dei conflitti si ripiega con un `git pull --no-rebase`.
. `git push`.

Questa è la sequenza più comune dei comandi di rete lavorando in questo modo, quindi  si racchiudono in un unico comando e si risparmia un sacco di tempo.

===== Riepilogo

Questi strumenti sono adatti al flusso di lavoro per cui sono stati progettati.
Sviluppatori e non, possono collaborare ad un progetto in pochi minuti, e molte raccomandazioni d'uso per questo tipo di lavoro, sono già implicite in questi tool.
Tuttavia, se il workflow è diverso, o si vuole un controllo maggiore su come e quando effettuare le operazioni di rete, si raccomandano altri strumenti o la riga di comando.


==== Altre GUI

Ci sono diversi altri client Git grafici, e vanno dagli strumenti specializzati, strumenti monouso fino a tool che cercano di fare tutto quello che può fare Git.
Sul sito web ufficiale di Git c'è un elenco accurato dei client più popolari http://git-scm.com/downloads/guis[].
Un elenco più completo è disponibile sul sito wiki di Git, in https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].

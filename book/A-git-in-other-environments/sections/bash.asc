=== Git in Bash

(((bash)))(((tab completion, bash)))(((shell prompts, bash)))
Se si è utenti Bash, si possono ottenere delle funzionalità della shell per alleggerire di molto il lavoro con Git.
Git, in realtà, comprende dei plugin per diverse shell, ma normalmente non sono attivate.

Per cominciare, si faccia una copia del file `contrib/completion/git-completion.bash` dal codice sorgente file di Git.
Il file va copiato in una directory a portata di mano, come la home directory, e lo si aggiunge al proprio `.bashrc`:

[source,console]
-----
. ~/git-completion.bash
-----

Fatto questo, ci si sposta in una directory con un repository Git, e si digita:

[source,console]
----
$ git chec<tab>
----

…e Bash completerà automaticamente il comando: `git checkout`.
Funziona con tutti i sotto-comandi di Git, i parametri sulla riga di comando, i nomi remoti e i quelli dei ref se è il caso.

È utile personalizzare il prompt affinché mostri la i dati del repository Git corrente.
Può essere semplice o complicarsi a piacimento, ma in genere ci sono un paio di informazioni che vogliono tutti, come il branch corrente, e lo stato della directory di lavoro.
Per aggiungerle al prompt, basta copiare il file `contrib/completion/git-prompt.sh` dal repository dei sorgenti Git alla propria home directory, ed aggiungere in `.bashrc` qualcosa del genere:

[source,console]
-----
. ~/git-prompt.sh
export GIT_PS1_SHOWDIRTYSTATE=1
export PS1='\w$(__git_ps1 " (%s)")\$ '
-----

Con `\w` si stampa la directory di lavoro corrente, `\$` stampa la parte `$` del prompt, e `__git_ps1 " (%s)"` chiama la funzione in `git-prompt.sh` con un argomento per la formattazione.
Ora il prompt bash sarà come la figura sotto, quando si andrà in un qualsiasi progetto controllato da Git:

.Prompt `bash` personalizzato.
image::images/git-bash.png[Customized `bash` prompt.]

Entrambi gli script sono dotati di una completa documentazione; per maggiori informazioni si può dare uno sguardo al contenuto di `git-completion.bash` e `git-prompt.sh`.

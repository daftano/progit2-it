[[_first_time]]
////
=== First-Time Git Setup
////

=== Prima Configurazione di Git

////
Now that you have Git on your system, you'll want to do a few things to customize your Git environment.
You should have to do these things only once on any given computer; they'll stick around between upgrades.
You can also change them at any time by running through the commands again.
////

Ora che hai Git sul tuo sistema vorrai fare un paio di cose per personalizzare l'ambiente di Git.
Devi farle solo una volta: rimarrano invariate anche dopo un aggiornamento. Puoi comunque cambiarle in ogni momento, rieseguendo i comandi.

////
Git comes with a tool called `git config` that lets you get and set configuration variables that control all aspects of how Git looks and operates.(((git commands, config)))
These variables can be stored in three different places:
////

Assieme a Git c'é uno strumento che si chiama `git config` che ti permetterà d'impostare e conoscere le variabili di configurazione che controllano ogni aspetto di come appare Git e come opera.(((git commands, config)))
Queste variabili possono essere salvate in tre posti differenti:

////
1. `/etc/gitconfig` file: Contains values for every user on the system and all their repositories.
  If you pass the option `--system` to `git config`, it reads and writes from this file specifically.
////

1. il file `/etc/gitconfig`: contiene i valori per ogni utente sul sistema e per tutti i loro repository. Se passi l'opzione` --system` a `git config`, lui legge e scrive da questo file specifico. 

////
2. `~/.gitconfig` or `~/.config/git/config` file: Values specific personally to you, the user.
  You can make Git read and write to this file specifically by passing the `--global` option, and this affects _all_ of the repositories you work with on your system.
////

2. il file `~/.gitconfig` oppure `~/.config/git/config`:	Valori specifici personali per te, come utente.
Puoi far leggere e scrivere a Git questo file passando l'opzione `--global` e questo ha effetto su tutti gli archivi con cui lavori sul tuo sistema.

////
3. `config` file in the Git directory (that is, `.git/config`) of whatever repository you're currently using: Specific to that single repository.
  You can force Git to read from and write to this file with the `--local` option, but that is in fact the default.
  (Unsurprisingly, you need to be located somewhere in a Git repository for this option to work properly.)
////

3. file `config` nella directory di Git (cioè `.git/config`) di qualsiasi repository che si stia usando. È Specifico di quel singolo repository.
Si può forzare Git a leggere e scrivere su questo file con l'opzione `--local`, ma questo in realtà é il valore predefinito.
(Prevedibilmente é necessario trovarsi da qualche parte in un repository di Git affinchè questa opzione funzioni correttamente).
Ogni livello sovrascrive i valori del precedente, così che i valori in `.git/config` vincono su quelli in `/etc/gitconfig`.

////
Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.
////

////
On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` directory (`C:\Users\$USER` for most people).
It also still looks for `/etc/gitconfig`, although it's relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.
////

Su Windows Git cerca il file `.gitconfig` nella directory `$HOME` (`C:\Users\$USER` per la maggior parte delle persone).
Controlla comunque anche `/etc/gitconfig`, sebbene sia relativo alla root di MSys, che è dove hai deciso di installare Git in Windows quando si lancia l'installazione.

////
If you are using version 2.x or later of Git for Windows, there is also a system-level config file at
`C:\Documents and Settings\All Users\Application Data\Git\config` on Windows XP, and in `C:\ProgramData\Git\config` on Windows Vista and newer.
This config file can only be changed by `git config -f <file>` as an admin.
////

Se stai utilizzando la versione 2.x, o successive, di Git for Windows, c'é anche un file di configurazione a livello di sistema in `C:\Documents and Settings\All Users\Application Data\Git\config` su Windows XP, e in `C:\ProgramData\Git\config` su Windows Vista e seguenti.

////
You can view all of your settings and where they are coming from using:
////

Puoi vedere tutte le tue impostazioni e da dove derivano utilizzando:

[source,console]
----
$ git config --list --show-origin
----

////
==== Your Identity
////

==== La tua Identità

////
The first thing you should do when you install Git is to set your user name and email address.
This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:
////

La prima cosa che occorrerebbe fare quando installi Git è impostare il tuo nome utente e il tuo indirizzo e-mail.
Questo è importante perché ogni commit di Git usa queste informazioni che vengono immutabilmente incapsulate nelle registrazioni che inizi a creare:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

////
Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
If you want to override this with a different name or email address for specific projects, you can run the command without the `--global` option when you're in that project.
////

Come detto, con l'opzione `--global` dovrai farlo solo una volta, dopo di che Git userà sempre queste informazioni per qualsiasi operazione fatta sul sistema.
Se vuoi sovrascriverle con un nome o una email diversi per progetti specifici potrai eseguire il comando senza l'opzione `--global`stando in uno di quei progetti.

////
Many of the GUI tools will help you do this when you first run them.
////

Molti degli strumenti GUI ti aiuteranno a farlo quando li eseguirai la prima volta.

[[_editor]]
////
==== Your Editor
////
==== Il tuo Editor

////
Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system's default editor.

If you want to use a different text editor, such as Emacs, you can do the following:
////

Ora che hai configurato la tua identità, puoi configurare il tuo editor di testo predefinito, che verrà usato quando Git avrà bisogno che tu scriva un messaggio.

Se non é configurato, Git usa l'editor di testo predefinito del sistema.

Se vuoi usarne uno diverso, come Emacs, potrai eseguire:

[source,console]
----
$ git config --global core.editor emacs
----

////
On a Windows system, if you want to use a different text editor, you must specify the full path to its executable file.
This can be different depending on how your editor is packaged.

In the case of Notepad++, a popular programming editor, you are likely to want to use the 32-bit version, since at the time of writing the 64-bit version doesn't support all plug-ins.
If you are on a 32-bit Windows system, or you have a 64-bit editor on a 64-bit system, you'll type something like this:
////

Su un sistema Windows, se vuoi utilizzare un editor di testo differente, devi specificare il percorso completo del suo eseguibile.
Questo percorso può essere differente a seconda di come è pacchettizzato il tuo editor.

Nel caso di Notepad++, un popolare editor per programmatori, probabilmente vorrai utilizzare la versione a 32 bit, dato che nel momento in cui scrivo la versione a 64 bit non supporta tutti i plug-in.
Se sei su un sistema Windows a 32 bit o se hai un editor a 64 bit su un sistema a 64 bit, digiterai qualcosa che assomiglia a questo:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

////
[NOTE]
====
Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix-based systems like Linux and macOS or a Windows system.
If you are using another editor, or a 32-bit version, please find specific instructions for how to set up your favorite editor with Git in <<C-git-commands#_core_editor>>.
====
////

[NOTE]
====
Vim, Emacs e Notepad++ sono popolari editor di testo spesso utilizzati dagli sviluppatori sui sistemi a base Unix come Linux e macOS o su sistemi Windows.
Se stai utilizzando un altro editor, o una versione a 32 bit, troverai istruzioni specifiche su come configurare il tuo editor preferito con Git in <<C-git-commands#_core_editor>>.
====

////
[WARNING]
====
You may find, if you don't setup your editor like this, you get into a really confusing state when Git attempts to launch it.
An example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.
====
////
[WARNING]
====
Se non si imposta il proprio editor in questo modo, quando Git tenta di avviarlo si potrebbe scoprire di trovarsi in uno stato estremamente confuso.
Su un sistema Windows ad esempio si potrebbe arrivare al blocco imprevisto di Git al momento dell'inizio delle modifiche del testo.
====

////
==== Checking Your Settings
////

==== Controlla le Tue Impostazioni 

////
If you want to check your configuration settings, you can use the `git config --list` command to list all the settings Git can find at that point:
////

Per controllare le tue impostazioni puoi usare il comando `git config --list` che elenca tutte le impostazioni attuali di Git:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

////
You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.

You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))
////

Potresti vedere più volte la stessa chiave perché Git legge la stessa chiave da file differenti (`/etc/gitconfig` e `~/.gitconfig`, per esempio).
In questo caso, Git usa l'ultimo valore per ogni chiave unica che trova.

Puoi anche controllare quale sia il valore di una chiave specifica digitando `git config {key}`:(((git commands, config)))


[source,console]
----
$ git config user.name
John Doe
----


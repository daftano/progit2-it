[[_first_time]]
=== Prima Configurazione di Git

Ora che hai Git sul tuo sistema vorrai fare un paio di cose per personalizzare l'ambiente di Git.
Devi farle una sola una volta per ogni computer; rimarrano invariate anche dopo un aggiornamento.
Puoi comunque cambiarle in ogni momento, rieseguendo i comandi.

Git viene con uno strumento che si chiama `git config` che ti permetterà d'impostare e conoscere le variabili di configurazione che controllano ogni aspetto di come appare Git e come opera.(((git commands, config)))
Queste variabili si possono memorizzare in tre diversi posti:

1. `/etc/gitconfig` file: Contiene i valori per ogni utente sul sistema e per tutti i loro repository.
  Se passi l'opzione `--system` a `git config`, lui legge e scrive da questo file specifico.
2. `~/.gitconfig` or `~/.config/git/config` file: Specifico per il tuo utente.
  Puoi far leggere e scrivere a Git questo file passando l'opzione `--global`.
3. `config` file nella directory di Git  (cioè `.git/config`) di qualsiasi repository che si stia usando. È Specifico di quel singolo repository.

Ogni livello sovrascrive i valori del precedente, così che i valori in `.git/config` vincono su quelli in `/etc/gitconfig`.

Su Windows, Git cerca il file `.gitconfig` nella directory `$HOME` (`C:\Users\$USER` per la maggior parte delle persone).
Controlla comunque anche `/etc/gitconfig`, sebbene sia relativo alla root di MSys, che è dove hai deciso di installare Git in Windows quando si lancia l'installazione.

==== La tua Identità

La prima cosa che occorrerebbe fare quando installi Git è impostare il tuo nome utente e il tuo indirizzo e-mail.
Questo è importante perché ogni commit di Git usa queste informazioni che vengono incapsulate nelle tue commit:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Con l'opzione `--global` dovrai farlo solo una volta, dopo di che Git userà sempre queste informazioni per qualsiasi operazione fatta sul sistema.
If you want to override this with a different name or e-mail address for specific projects, you can run the command without the `--global` option when you're in that project.

Many of the GUI tools will help you do this when you first run them.

==== Your Editor

Ora che hai configurato la tua identità, puoi configurare il tuo editor di testo predefinito, che verrà usato quando Git avrà bisogno che scriva un messaggio.
If not configured, Git uses your system's default editor, which is generally Vim.
Se vuoi usarne uno diverso, come Emacs, potrai eseguire:

[source,console]
----
$ git config --global core.editor emacs
----

[WARNING]
====
Vim and Emacs are popular text editors often used by developers on Unix based systems like Linux and Mac. If you are not familiar with either of these editors or are on a Windows system, you may need to search for instructions for how to set up your favorite editor with Git.  
If you don't set an editor like this and you don't know what Vim or Emacs are, you will likely get into a really confusing state when they are launched.
====

==== Checking Your Settings

Per controllare le tue impostazioni puoi usare il comando `git config --list` che elenca tutte le impostazioni attuali di Git:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Potresti vedere più volte la stessa chiave perché Git legge la stessa chiave da file differenti (`/etc/gitconfig` e `~/.gitconfig`, per esempio).
In questo caso, Git usa l'ultimo valore per ogni chiave unica che trova.

You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

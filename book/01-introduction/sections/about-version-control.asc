////
=== About Version Control
////

=== Il Controllo di Versione

(((version control)))
////
What is ``version control'', and why should you care?
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.
For the examples in this book, you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.
////


Cos'è il "controllo di versione", e perché dovresti usarlo?
Il controllo di versione è un sistema che registra, nel tempo, i cambiamenti ad un file o ad una serie di file, così da poter richiamare una specifica versione in un secondo momento.
Per gli esempi di questo libro verrà usato il codice sorgente di un software come file sotto controllo di versione, anche se in realtà gli esempi si possono eseguire quasi con ogni tipo di file sul computer.

////
If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use.
It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.
Using a VCS also generally means that if you screw things up or lose files, you can easily recover.
In addition, you get all this for very little overhead.
////


Se sei un grafico o un webdesigner e vuoi tenere tutte le versioni di un'immagine o di un layout (cosa che sicuramente vorresti), un Sistema per il Controllo di Versione (VCS) è una cosa saggia da utilizzare. 
Un VCS ti permette di ripristinare i file ad una versione precedente, ripristinare l'intero progetto a uno stato precedente, revisionare le modifiche fatte nel tempo, vedere chi ha cambiato qualcosa che può aver causato un problema, chi ha introdotto un problema e quando, e molto altro ancora.
Usare un VCS, in generale, significa anche che se fai un pasticcio o perdi qualche file, puoi facilmente recuperare la situazione.
E ottieni tutto questo con poca fatica.

////
==== Local Version Control Systems
////

==== Sistema di Controllo di Versione Locale

(((version control,local)))

////
Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever).
This approach is very common because it is so simple, but it is also incredibly error prone.
It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.
////


Molte persone gestiscono le diverse versioni copiando i file in un'altra directory (magari una directory denominata con la data, se sono furbi).
Questo approccio è molto comune perché è molto semplice, ma è anche incredibilmente soggetto ad errori.
É facile dimenticare in quale directory sei e modificare il file sbagliato o copiare dei file che non intendevi copiare.

////
To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control.
////

Per far fronte a questo problema, i programmatori svilupparono VCS locali che avevano un database semplice che manteneva tutti i cambiamenti dei file sotto controllo di revisione. 

////
.Local version control.
image::images/local.png[Local version control diagram]
////

.Controllo di versione locale.
image::images/local.png[Schema di controllo di versione locale]

////
One of the most popular VCS tools was a system called RCS, which is still distributed with many computers today.
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.
////

Uno dei più popolari strumenti VCS era un sistema chiamato RCS, che è ancora oggi distribuito con molti computer.
RCS funziona salvando sul disco in un formato specifico un insieme di patch (ovvero le differenze tra i file);
può quindi ricreare lo stato di qualsiasi file in qualsiasi momento determinato, aggiungendo le varie patch.

////
==== Centralized Version Control Systems
////

==== Sistemi di Controllo di Versione Centralizzati

(((version control,centralized)))
////
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.
////


Successivamente queste persone dovettero affrontare il problema del collaborare con altri sviluppatori su altri sistemi.
Per far fronte a questo problema, vennero sviluppati sistemi di controllo di versione centralizzati (CVCS).
Questi sistemi (come CVS, Subversion e Perforce) hanno un unico server che contiene tutte le versioni dei file e un numero di utenti che scaricano i file dal server centrale. (((CVS)))(((Subversion)))(((Perforce)))
Questo è stato lo standard del controllo di versione per molti anni.

////
.Centralized version control.
image::images/centralized.png[Centralized version control diagram]
////


.Controllo di versione centralizzato.
image::images/centralized.png[Schema di controllo di versione centralizzato]

////
This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what, and it's far easier to administer a CVCS than it is to deal with local databases on every client.
////


Questa impostazione offre molti vantaggi, specialmente rispetto ai VCS locali.
Per esempio, chiunque sa, con una certa approssimazione, cosa stia facendo un'altra persona del progetto.
Gli amministratori hanno un controllo preciso su chi può fare cosa, ed è molto più facile amministrare un CVCS che un database locale su ogni client.


////
However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything -- the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem -- whenever you have the entire history of the project in a single place, you risk losing everything.
////


Questa configurazione ha tuttavia alcune gravi controindicazioni.
La più ovvia è che il server centralizzato rappresenta il singolo punto di rottura del sistema.
Se questo va giù per un'ora, in quel periodo nessuno può collaborare o salvare una nuova versione di qualsiasi cosa su cui sta lavorando.
Se il disco rigido del database centrale si danneggia, e non ci sono i backup, perdi assolutamente tutto -- tutta la storia del progetto ad eccezione dei singoli snapshot (istantanee) che le persone possono avere in locale sulle loro macchine.
Anche i sistemi locali di VCS soffrono di questo problema -- ogni volta che tutta la storia del progetto è in un unico posto, si rischia di perdere tutto.

////
==== Distributed Version Control Systems
////


==== Sistemi di Controllo di Versione Distribuiti 

(((version control,distributed)))

////
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.
Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.
////


E qui entrano in gioco i Sistemi di Controllo di Versione Distribuiti (DVCS).
In un DVCS (come Git, Mercurial, Bazaar o Darcs), i client non solo controllano lo snapshot più recente dei file, ma piuttosto fanno una copia identica dell'archivio (repository), completa di tutta la propria storia.
In questo modo se un server smettesse di funzionare e se i sistemi interagissero tramite questo server, il repository di un qualsiasi client potrebbe essere copiato sul server per ripristinarlo.
Ogni clone è proprio un backup completo di tutti i dati.


////
.Distributed version control.
image::images/distributed.png[Distributed version control diagram]
////


.Controllo di versione distribuito.
image::images/distributed.png[Schema del controllo di versione distribuito]

////
Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
////


Inoltre, molti di questi sistemi trattano bene l'avere più repository remoti su cui poter lavorare, così puoi collaborare con gruppi differenti di persone in modi differenti, simultaneamente sullo stesso progetto.
Questo ti permette di impostare diversi tipi di flussi di lavoro che non sono possibili in sistemi centralizzati, come i modelli gerarchici.

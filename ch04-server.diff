1,2c1
< [[ch04-git-on-the-server]]
< == Git on the Server
---
> # Git on the Server #
4,8c3,6
< (((serving repositories)))
< At this point, you should be able to do most of the day-to-day tasks for which you'll be using Git.
< However, in order to do any collaboration in Git, you'll need to have a remote Git repository.
< Although you can technically push changes to and pull changes from individuals' repositories, doing so is discouraged because you can fairly easily confuse what they're working on if you're not careful.
< Furthermore, you want your collaborators to be able to access the repository even if your computer is offline -- having a more reliable common repository is often useful.
---
> At this point, you should be able to do most of the day-to-day tasks for which you’ll be using Git.
> However, in order to do any collaboration in Git, you’ll need to have a remote Git repository.
> Although you can technically push changes to and pull changes from individuals’ repositories, doing so is discouraged because you can fairly easily confuse what they’re working on if you’re not careful.
> Furthermore, you want your collaborators to be able to access the repository even if your computer is offline — having a more reliable common repository is often useful.
9a8
> We’ll refer to this repository as a "Git server"; but you’ll notice that it generally takes a tiny amount of resources to host a Git repository, so you’ll rarely need to use an entire server for it.
11,12c10,11
< Running a Git server is fairly straightforward.
< First, you choose which protocols you want your server to support.
---
> Running a Git server is simple.
> First, you choose which protocols you want your server to communicate with.
15c14
< Last, we'll go over a few hosted options, if you don't mind hosting your code on someone else's server and don't want to go through the hassle of setting up and maintaining your own server.
---
> Last, we’ll go over a few hosted options, if you don’t mind hosting your code on someone else’s server and don’t want to go through the hassle of setting up and maintaining your own server.
19,21c18,20
< A remote repository is generally a _bare repository_ -- a Git repository that has no working directory.
< Because the repository is only used as a collaboration point, there is no reason to have a snapshot checked out on disk; it's just the Git data.
< In the simplest terms, a bare repository is the contents of your project's `.git` directory and nothing else.
---
> A remote repository is generally a _bare repository_ — a Git repository that has no working directory.
> Because the repository is only used as a collaboration point, there is no reason to have a snapshot checked out on disk; it’s just the Git data.
> In the simplest terms, a bare repository is the contents of your project’s `.git` directory and nothing else.
22a22
> ## The Protocols ##
24c24,25
< === The Protocols
---
> Git can use four major network protocols to transfer data: Local, Secure Shell (SSH), Git, and HTTP.
> Here we’ll discuss what they are and in what basic circumstances you would want (or not want) to use them.
26,27c27
< Git can use four distinct protocols to transfer data: Local, HTTP, Secure Shell (SSH) and Git.
< Here we'll discuss what they are and in what basic circumstances you would want (or not want) to use them.
---
> It’s important to note that with the exception of the HTTP protocols, all of these require Git to be installed and working on the server.
29c29
< ==== Local Protocol
---
> ### Local Protocol ###
31,32c31
< (((protocols, local)))
< The most basic is the _Local protocol_, in which the remote repository is in another directory on the same host.
---
> The most basic is the _Local protocol_, in which the remote repository is in another directory on disk.
34c33
< The latter wouldn't be ideal, because all your code repository instances would reside on the same computer, making a catastrophic loss much more likely.
---
> The latter wouldn’t be ideal, because all your code repository instances would reside on the same computer, making a catastrophic loss much more likely.
37c36
< To clone a repository like this, or to add one as a remote to an existing project, use the path to the repository as the URL.
---
> To clone a repository like this or to add one as a remote to an existing project, use the path to the repository as the URL.
40,43c39
< [source,console]
< ----
< $ git clone /srv/git/project.git
< ----
---
> 	$ git clone /opt/git/project.git
47,50c43
< [source,console]
< ----
< $ git clone file:///srv/git/project.git
< ----
---
> 	$ git clone file:///opt/git/project.git
53,56c46,50
< If you just specify the path, Git tries to use hardlinks or directly copy the files it needs.
< If you specify `file://`, Git fires up the processes that it normally uses to transfer data over a network, which is generally much less efficient.
< The main reason to specify the `file://` prefix is if you want a clean copy of the repository with extraneous references or objects left out -- generally after an import from another VCS or something similar (see <<ch10-git-internals#ch10-git-internals>> for maintenance tasks).
< We'll use the normal path here because doing so is almost always faster.
---
> If you just specify the path, and the source and the destination are on the same filesystem, Git tries to hardlink the objects it needs.
> If they are not on the same filesystem, it will copy the objects it needs using the system's standard copying functionality.
> If you specify `file://`, Git fires up the processes that it normally uses to transfer data over a network which is generally a lot less efficient method of transferring the data.
> The main reason to specify the `file://` prefix is if you want a clean copy of the repository with extraneous references or objects left out — generally after an import from another version-control system or something similar (see Chapter 9 for maintenance tasks).
> We’ll use the normal path here because doing so is almost always faster.
60,63c54
< [source,console]
< ----
< $ git remote add local_proj /srv/git/project.git
< ----
---
> 	$ git remote add local_proj /opt/git/project.git
65c56
< Then, you can push to and pull from that remote via your new remote name `local_proj` as though you were doing so over a network.
---
> Then, you can push to and pull from that remote as though you were doing so over a network.
67c58
< ===== The Pros
---
> #### The Pros ####
69c60
< The pros of file-based repositories are that they're simple and they use existing file permissions and network access.
---
> The pros of file-based repositories are that they’re simple and they use existing file permissions and network access.
72c63
< We'll discuss how to export a bare repository copy for this purpose in <<ch04-git-on-the-server#_getting_git_on_a_server>>.
---
> We’ll discuss how to export a bare repository copy for this purpose in the next section, “Getting Git on a Server.”
74,75c65,66
< This is also a nice option for quickly grabbing work from someone else's working repository.
< If you and a co-worker are working on the same project and they want you to check something out, running a command like `git pull /home/john/project` is often easier than them pushing to a remote server and you subsequently fetching from it.
---
> This is also a nice option for quickly grabbing work from someone else’s working repository.
> If you and a co-worker are working on the same project and they want you to check something out, running a command like `git pull /home/john/project` is often easier than them pushing to a remote server and you pulling down.
77c68
< ===== The Cons
---
> #### The Cons ####
80c71
< If you want to push from your laptop when you're at home, you have to mount the remote disk, which can be difficult and slow compared to network-based access.
---
> If you want to push from your laptop when you’re at home, you have to mount the remote disk, which can be difficult and slow compared to network-based access.
82c73
< It's important to mention that this isn't necessarily the fastest option if you're using a shared mount of some kind.
---
> It’s also important to mention that this isn’t necessarily the fastest option if you’re using a shared mount of some kind.
86,87c77
< Finally, this protocol does not protect the repository against accidental damage.
< Every user has full shell access to the ``remote'' directory, and there is nothing preventing them from changing or removing internal Git files and corrupting the repository.
---
> ### The SSH Protocol ###
89c79,83
< ==== The HTTP Protocols
---
> Probably the most common transport protocol for Git is SSH.
> This is because SSH access to servers is already set up in most places — and if it isn’t, it’s easy to do.
> SSH is also the only network-based protocol that you can easily read from and write to.
> The other two network protocols (HTTP and Git) are generally read-only, so even if you have them available for the unwashed masses, you still need SSH for your own write commands.
> SSH is also an authenticated network protocol; and because it’s ubiquitous, it’s generally easy to set up and use.
91,96c85
< Git can communicate over HTTP using two different modes.
< Prior to Git 1.6.6, there was only one way it could do this which was very simple and generally read-only.
< In version 1.6.6, a new, smarter protocol was introduced that involved Git being able to intelligently negotiate data transfer in a manner similar to how it does over SSH.
< In the last few years, this new HTTP protocol has become very popular since it's simpler for the user and smarter about how it communicates.
< The newer version is often referred to as the _Smart_ HTTP protocol and the older way as _Dumb_ HTTP.
< We'll cover the newer Smart HTTP protocol first.
---
> To clone a Git repository over SSH, you can specify ssh:// URL like this:
98c87
< ===== Smart HTTP
---
> 	$ git clone ssh://user@server/project.git
100,101c89
< (((protocols, smart HTTP)))
< Smart HTTP operates very similarly to the SSH or Git protocols but runs over standard HTTPS ports and can use various HTTP authentication mechanisms, meaning it's often easier on the user than something like SSH, since you can use things like username/password authentication rather than having to set up SSH keys.
---
> Or you can use the shorter scp-like syntax for SSH protocol:
103,106c91
< It has probably become the most popular way to use Git now, since it can be set up to both serve anonymously like the `git://` protocol, and can also be pushed over with authentication and encryption like the SSH protocol.
< Instead of having to set up different URLs for these things, you can now use a single URL for both.
< If you try to push and the repository requires authentication (which it normally should), the server can prompt for a username and password.
< The same goes for read access.
---
> 	$ git clone user@server:project.git
108c93
< In fact, for services like GitHub, the URL you use to view the repository online (for example, https://github.com/schacon/simplegit[]) is the same URL you can use to clone and, if you have access, push over.
---
> You can also not specify a user, and Git assumes the user you’re currently logged in as.
110c95
< ===== Dumb HTTP
---
> #### The Pros ####
112,153c97,101
< (((protocols, dumb HTTP)))
< If the server does not respond with a Git HTTP smart service, the Git client will try to fall back to the simpler _Dumb_ HTTP protocol.
< The Dumb protocol expects the bare Git repository to be served like normal files from the web server.
< The beauty of Dumb HTTP is the simplicity of setting it up.
< Basically, all you have to do is put a bare Git repository under your HTTP document root and set up a specific `post-update` hook, and you're done (See <<ch08-customizing-git#_git_hooks>>).
< At that point, anyone who can access the web server under which you put the repository can also clone your repository.
< To allow read access to your repository over HTTP, do something like this:
< 
< [source,console]
< ----
< $ cd /var/www/htdocs/
< $ git clone --bare /path/to/git_project gitproject.git
< $ cd gitproject.git
< $ mv hooks/post-update.sample hooks/post-update
< $ chmod a+x hooks/post-update
< ----
< 
< That's all.(((hooks, post-update)))
< The `post-update` hook that comes with Git by default runs the appropriate command (`git update-server-info`) to make HTTP fetching and cloning work properly.
< This command is run when you push to this repository (over SSH perhaps); then, other people can clone via something like
< 
< [source,console]
< ----
< $ git clone https://example.com/gitproject.git
< ----
< 
< In this particular case, we're using the `/var/www/htdocs` path that is common for Apache setups, but you can use any static web server -- just put the bare repository in its path.
< The Git data is served as basic static files (see the <<ch10-git-internals#ch10-git-internals>> chapter for details about exactly how it's served).
< 
< Generally you would either choose to run a read/write Smart HTTP server or simply have the files accessible as read-only in the Dumb manner.
< It's rare to run a mix of the two services.
< 
< ===== The Pros
< 
< We'll concentrate on the pros of the Smart version of the HTTP protocol.
< 
< The simplicity of having a single URL for all types of access and having the server prompt only when authentication is needed makes things very easy for the end user.
< Being able to authenticate with a username and password is also a big advantage over SSH, since users don't have to generate SSH keys locally and upload their public key to the server before being able to interact with it.
< For less sophisticated users, or users on systems where SSH is less common, this is a major advantage in usability.
< It is also a very fast and efficient protocol, similar to the SSH one.
< 
< You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.
---
> The pros of using SSH are many.
> First, you basically have to use it if you want authenticated write access to your repository over a network.
> Second, SSH is relatively easy to set up — SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
> Next, access over SSH is secure — all data transfer is encrypted and authenticated.
> Last, like the Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.
155c103
< Another nice thing is that HTTPS are such commonly used protocols that corporate firewalls are often set up to allow traffic through these ports.
---
> #### The Cons ####
157c105,108
< ===== The Cons
---
> The negative aspect of SSH is that you can’t serve anonymous access of your repository over it.
> People must have access to your machine over SSH to access it, even in a read-only capacity, which doesn’t make SSH access conducive to open source projects.
> If you’re using it only within your corporate network, SSH may be the only protocol you need to deal with.
> If you want to allow anonymous read-only access to your projects, you’ll have to set up SSH for you to push over but something else for others to pull over.
159,160c110
< Git over HTTPS can be a little more tricky to set up compared to SSH on some servers.
< Other than that, there is very little advantage that other protocols have over Smart HTTP for serving Git content.
---
> ### The Git Protocol ###
162,164c112,118
< If you're using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using keys over SSH.
< There are, however, several credential caching tools you can use, including Keychain access on macOS and Credential Manager on Windows, to make this pretty painless.
< Read <<ch07-git-tools#_credential_caching>> to see how to set up secure HTTP password caching on your system.
---
> Next is the Git protocol.
> This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication.
> In order for a repository to be served over the Git protocol, you must create the `git-daemon-export-ok` file — the daemon won’t serve a repository without that file in it — but other than that there is no security.
> Either the Git repository is available for everyone to clone or it isn’t.
> This means that there is generally no pushing over this protocol.
> You can enable push access; but given the lack of authentication, if you turn on push access, anyone on the internet who finds your project’s URL could push to your project.
> Suffice it to say that this is rare.
166c120
< ==== The SSH Protocol
---
> #### The Pros ####
168,171c122,124
< (((protocols, SSH)))
< A common transport protocol for Git when self-hosting is over SSH.
< This is because SSH access to servers is already set up in most places -- and if it isn't, it's easy to do.
< SSH is also an authenticated network protocol and, because it's ubiquitous, it's generally easy to set up and use.
---
> The Git protocol is the fastest transfer protocol available.
> If you’re serving a lot of traffic for a public project or serving a very large project that doesn’t require user authentication for read access, it’s likely that you’ll want to set up a Git daemon to serve your project.
> It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.
173c126
< To clone a Git repository over SSH, you can specify an `ssh://` URL like this:
---
> #### The Cons ####
175,178c128,134
< [source,console]
< ----
< $ git clone ssh://[user@]server/project.git
< ----
---
> The downside of the Git protocol is the lack of authentication.
> It’s generally undesirable for the Git protocol to be the only access to your project.
> Generally, you’ll pair it with SSH access for the few developers who have push (write) access and have everyone else use `git://` for read-only access.
> It’s also probably the most difficult protocol to set up.
> It must run its own daemon, which is custom — we’ll look at setting one up in the “Gitosis” section of this chapter — it requires `xinetd` configuration or the like, which isn’t always a walk in the park.
> It also requires firewall access to port 9418, which isn’t a standard port that corporate firewalls always allow.
> Behind big corporate firewalls, this obscure port is commonly blocked.
180c136
< Or you can use the shorter scp-like syntax for the SSH protocol:
---
> ### The HTTP/S Protocol ###
182,185c138,142
< [source,console]
< ----
< $ git clone [user@]server:project.git
< ----
---
> Last we have the HTTP protocol.
> The beauty of the HTTP or HTTPS protocol is the simplicity of setting it up.
> Basically, all you have to do is put the bare Git repository under your HTTP document root and set up a specific `post-update` hook, and you’re done (See Chapter 7 for details on Git hooks).
> At that point, anyone who can access the web server under which you put the repository can also clone your repository.
> To allow read access to your repository over HTTP, do something like this:
187c144,148
< In both cases above, if you don't specify the optional username, Git assumes the user you're currently logged in as.
---
> 	$ cd /var/www/htdocs/
> 	$ git clone --bare /path/to/git_project gitproject.git
> 	$ cd gitproject.git
> 	$ mv hooks/post-update.sample hooks/post-update
> 	$ chmod a+x hooks/post-update
189c150,152
< ===== The Pros
---
> That’s all.
> The `post-update` hook that comes with Git by default runs the appropriate command (`git update-server-info`) to make HTTP fetching and cloning work properly.
> This command is run when you push to this repository over SSH; then, other people can clone via something like
191,194c154
< The pros of using SSH are many.
< First, SSH is relatively easy to set up -- SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
< Next, access over SSH is secure -- all data transfer is encrypted and authenticated.
< Last, like the HTTPS, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.
---
> 	$ git clone http://example.com/gitproject.git
196c156,157
< ===== The Cons
---
> In this particular case, we’re using the `/var/www/htdocs` path that is common for Apache setups, but you can use any static web server — just put the bare repository in its path.
> The Git data is served as basic static files (see Chapter 9 for details about exactly how it’s served).
198,201c159,162
< The negative aspect of SSH is that it doesn't support anonymous access to your Git repository.
< If you're using SSH, people _must_ have SSH access to your machine, even in a read-only capacity, which doesn't make SSH conducive to open source projects for which people might simply want to clone your repository to examine it.
< If you're using it only within your corporate network, SSH may be the only protocol you need to deal with.
< If you want to allow anonymous read-only access to your projects and also want to use SSH, you'll have to set up SSH for you to push over but something else for others to fetch from.
---
> It’s possible to make Git push over HTTP as well, although that technique isn’t as widely used and requires you to set up complex WebDAV requirements.
> Because it’s rarely used, we won’t cover it in this book.
> If you’re interested in using the HTTP-push protocols, you can read about preparing a repository for this purpose at `http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt`.
> One nice thing about making Git push over HTTP is that you can use any WebDAV server, without specific Git features; so, you can use this functionality if your web-hosting provider supports WebDAV for writing updates to your web site.
203c164
< ==== The Git Protocol
---
> #### The Pros ####
205,212c166,170
< (((protocols, git)))
< Finally, we have the Git protocol.
< This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication.
< In order for a repository to be served over the Git protocol, you must create a `git-daemon-export-ok` file -- the daemon won't serve a repository without that file in it -- but, other than that, there is no security.
< Either the Git repository is available for everyone to clone, or it isn't.
< This means that there is generally no pushing over this protocol.
< You can enable push access but, given the lack of authentication, anyone on the internet who finds your project's URL could push to that project.
< Suffice it to say that this is rare.
---
> The upside of using the HTTP protocol is that it’s easy to set up.
> Running the handful of required commands gives you a simple way to give the world read access to your Git repository.
> It takes only a few minutes to do.
> The HTTP protocol also isn’t very resource intensive on your server.
> Because it generally uses a static HTTP server to serve all the data, a normal Apache server can serve thousands of files per second on average — it’s difficult to overload even a small server.
214,228c172,173
< ===== The Pros
< 
< The Git protocol is often the fastest network transfer protocol available.
< If you're serving a lot of traffic for a public project or serving a very large project that doesn't require user authentication for read access, it's likely that you'll want to set up a Git daemon to serve your project.
< It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.
< 
< ===== The Cons
< 
< The downside of the Git protocol is the lack of authentication.
< It's generally undesirable for the Git protocol to be the only access to your project.
< Generally, you'll pair it with SSH or HTTPS access for the few developers who have push (write) access and have everyone else use `git://` for read-only access.
< It's also probably the most difficult protocol to set up.
< It must run its own daemon, which requires `xinetd` or `systemd` configuration or the like, which isn't always a walk in the park.
< It also requires firewall access to port 9418, which isn't a standard port that corporate firewalls always allow.
< Behind big corporate firewalls, this obscure port is commonly blocked.
---
> You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.
> Generally, if you’re going to these lengths, it’s easier to use SSH public keys; but it may be a better solution in your specific case to use signed SSL certificates or other HTTP-based authentication methods for read-only access over HTTPS.
229a175
> Another nice thing is that HTTP is such a commonly used protocol that corporate firewalls are often set up to allow traffic through this port.
231,232c177
< [[_getting_git_on_a_server]]
< === Getting Git on a Server
---
> #### The Cons ####
234c179,182
< Now we'll cover setting up a Git service running these protocols on your own server.
---
> The downside of serving your repository over HTTP is that it’s relatively inefficient for the client.
> It generally takes a lot longer to clone or fetch from the repository, and you often have a lot more network overhead and transfer volume over HTTP than with any of the other network protocols.
> Because it’s not as intelligent about transferring only the data you need — there is no dynamic work on the part of the server in these transactions — the HTTP protocol is often referred to as a _dumb_ protocol.
> For more information about the differences in efficiency between the HTTP protocol and the other protocols, see Chapter 9.
236,240c184
< [NOTE]
< ====
< Here we'll be demonstrating the commands and steps needed to do basic, simplified installations on a Linux-based server, though it's also possible to run these services on macOS or Windows servers.
< Actually setting up a production server within your infrastructure will certainly entail differences in security measures or operating system tools, but hopefully this will give you the general idea of what's involved.
< ====
---
> ## Getting Git on a Server ##
242c186
< In order to initially set up any Git server, you have to export an existing repository into a new bare repository -- a repository that doesn't contain a working directory.
---
> In order to initially set up any Git server, you have to export an existing repository into a new bare repository — a repository that doesn’t contain a working directory.
244,245c188,189
< In order to clone your repository to create a new bare repository, you run the clone command with the `--bare` option.(((git commands, clone, bare)))
< By convention, bare repository directory names end with the suffix `.git`, like so:
---
> In order to clone your repository to create a new bare repository, you run the clone command with the `--bare` option.
> By convention, bare repository directories end in `.git`, like so:
247,252c191,193
< [source,console]
< ----
< $ git clone --bare my_project my_project.git
< Cloning into bare repository 'my_project.git'...
< done.
< ----
---
> 	$ git clone --bare my_project my_project.git
> 	Cloning into bare repository 'my_project.git'...
> 	done.
258,261c199
< [source,console]
< ----
< $ cp -Rf my_project/.git my_project.git
< ----
---
> 	$ cp -Rf my_project/.git my_project.git
263c201
< There are a couple of minor differences in the configuration file but, for your purpose, this is close to the same thing.
---
> There are a couple of minor differences in the configuration file; but for your purpose, this is close to the same thing.
266,267c204
< [[_bare_repo]]
< ==== Putting the Bare Repository on a Server
---
> ### Putting the Bare Repository on a Server ###
270,271c207,208
< Let's say you've set up a server called `git.example.com` to which you have SSH access, and you want to store all your Git repositories under the `/srv/git` directory.
< Assuming that `/srv/git` exists on that server, you can set up your new repository by copying your bare repository over:
---
> Let’s say you’ve set up a server called `git.example.com` that you have SSH access to, and you want to store all your Git repositories under the `/opt/git` directory.
> You can set up your new repository by copying your bare repository over:
273,295c210,221
< [source,console]
< ----
< $ scp -r my_project.git user@git.example.com:/srv/git
< ----
< 
< At this point, other users who have SSH-based read access to the `/srv/git` directory on that server can clone your repository by running
< 
< [source,console]
< ----
< $ git clone user@git.example.com:/srv/git/my_project.git
< ----
< 
< If a user SSHs into a server and has write access to the `/srv/git/my_project.git` directory, they will also automatically have push access.
< 
< Git will automatically add group write permissions to a repository properly if you run the `git init` command with the `--shared` option.
< Note that by running this command, you will not destroy any commits, refs, etc. in the process.(((git commands, init, bare)))
< 
< [source,console]
< ----
< $ ssh user@git.example.com
< $ cd /srv/git/my_project.git
< $ git init --bare --shared
< ----
---
> 	$ scp -r my_project.git user@git.example.com:/opt/git
> 
> At this point, other users who have SSH access to the same server which has read-access to the `/opt/git` directory can clone your repository by running
> 
> 	$ git clone user@git.example.com:/opt/git/my_project.git
> 
> If a user SSHs into a server and has write access to the `/opt/git/my_project.git` directory, they will also automatically have push access.
>  Git will automatically add group write permissions to a repository properly if you run the `git init` command with the `--shared` option.
> 
> 	$ ssh user@git.example.com
> 	$ cd /opt/git/my_project.git
> 	$ git init --bare --shared
298c224
< Now you're ready to collaborate on the same project.
---
> Now you’re ready to collaborate on the same project.
300,301c226,227
< It's important to note that this is literally all you need to do to run a useful Git server to which several people have access -- just add SSH-able accounts on a server, and stick a bare repository somewhere that all those users have read and write access to.
< You're ready to go -- nothing else needed.
---
> It’s important to note that this is literally all you need to do to run a useful Git server to which several people have access — just add SSH-able accounts on a server, and stick a bare repository somewhere that all those users have read and write access to.
> You’re ready to go — nothing else needed.
303,304c229,230
< In the next few sections, you'll see how to expand to more sophisticated setups.
< This discussion will include not having to create user accounts for each user, adding public read access to repositories, setting up web UIs and more.
---
> In the next few sections, you’ll see how to expand to more sophisticated setups.
> This discussion will include not having to create user accounts for each user, adding public read access to repositories, setting up web UIs, using the Gitosis tool, and more.
307c233
< ==== Small Setups
---
> ### Small Setups ###
309c235
< If you're a small outfit or are just trying out Git in your organization and have only a few developers, things can be simple for you.
---
> If you’re a small outfit or are just trying out Git in your organization and have only a few developers, things can be simple for you.
311c237
< If you want some repositories to be read-only for certain users and read/write for others, access and permissions can be a bit more difficult to arrange.
---
> If you want some repositories to be read-only to certain users and read/write to others, access and permissions can be a bit difficult to arrange.
313c239
< ===== SSH Access
---
> #### SSH Access ####
315,317c241,242
< (((serving repositories, SSH)))
< If you have a server to which all your developers already have SSH access, it's generally easiest to set up your first repository there, because you have to do almost no work (as we covered in the last section).
< If you want more complex access control type permissions on your repositories, you can handle them with the normal filesystem permissions of your server's operating system.
---
> If you already have a server to which all your developers have SSH access, it’s generally easiest to set up your first repository there, because you have to do almost no work (as we covered in the last section).
> If you want more complex access control type permissions on your repositories, you can handle them with the normal filesystem permissions of the operating system your server runs.
319,320c244,245
< If you want to place your repositories on a server that doesn't have accounts for everyone on your team for whom you want to grant write access, then you must set up SSH access for them.
< We assume that if you have a server with which to do this, you already have an SSH server installed, and that's how you're accessing the server.
---
> If you want to place your repositories on a server that doesn’t have accounts for everyone on your team whom you want to have write access, then you must set up SSH access for them.
> We assume that if you have a server with which to do this, you already have an SSH server installed, and that’s how you’re accessing the server.
324c249
< You may not want to run `adduser` (or the possible alternative `useradd`) and have to set temporary passwords for every new user.
---
> You may not want to run `adduser` and set temporary passwords for every user.
326,328c251,253
< A second method is to create a single 'git' user account on the machine, ask every user who is to have write access to send you an SSH public key, and add that key to the `~/.ssh/authorized_keys` file of that new 'git' account.
< At that point, everyone will be able to access that machine via the 'git' account.
< This doesn't affect the commit data in any way -- the SSH user you connect as doesn't affect the commits you've recorded.
---
> A second method is to create a single 'git' user on the machine, ask every user who is to have write access to send you an SSH public key, and add that key to the `~/.ssh/authorized_keys` file of your new 'git' user.
> At that point, everyone will be able to access that machine via the 'git' user.
> This doesn’t affect the commit data in any way — the SSH user you connect as doesn’t affect the commits you’ve recorded.
332a258
> ## Generating Your SSH Public Key ##
334,339c260,261
< [[_generate_ssh_key]]
< === Generating Your SSH Public Key
< 
< (((SSH keys)))
< Many Git servers authenticate using SSH public keys.
< In order to provide a public key, each user in your system must generate one if they don't already have one.
---
> That being said, many Git servers authenticate using SSH public keys.
> In order to provide a public key, each user in your system must generate one if they don’t already have one.
341,342c263,264
< First, you should check to make sure you don't already have a key.
< By default, a user's SSH keys are stored in that user's `~/.ssh` directory.
---
> First, you should check to make sure you don’t already have a key.
> By default, a user’s SSH keys are stored in that user’s `~/.ssh` directory.
345,373c267,286
< [source,console]
< ----
< $ cd ~/.ssh
< $ ls
< authorized_keys2  id_dsa       known_hosts
< config            id_dsa.pub
< ----
< 
< You're looking for a pair of files named something like `id_dsa` or `id_rsa` and a matching file with a `.pub` extension.
< The `.pub` file is your public key, and the other file is the corresponding private key.
< If you don't have these files (or you don't even have a `.ssh` directory), you can create them by running a program called `ssh-keygen`, which is provided with the SSH package on Linux/macOS systems and comes with Git for Windows:
< 
< [source,console]
< ----
< $ ssh-keygen -o
< Generating public/private rsa key pair.
< Enter file in which to save the key (/home/schacon/.ssh/id_rsa):
< Created directory '/home/schacon/.ssh'.
< Enter passphrase (empty for no passphrase):
< Enter same passphrase again:
< Your identification has been saved in /home/schacon/.ssh/id_rsa.
< Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.
< The key fingerprint is:
< d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local
< ----
< 
< First it confirms where you want to save the key (`.ssh/id_rsa`), and then it asks twice for a passphrase, which you can leave empty if you don't want to type a password when you use the key.
< However, if you do use a password, make sure to add the `-o` option; it saves the private key in a format that is more resistant to brute-force password cracking than is the default format.
< You can also use the `ssh-agent` tool to prevent having to enter the password each time.
---
> 	$ cd ~/.ssh
> 	$ ls
> 	authorized_keys2  id_dsa       known_hosts
> 	config            id_dsa.pub
> 
> You’re looking for a pair of files named something and something.pub, where the something is usually `id_dsa` or `id_rsa`.
> The `.pub` file is your public key, and the other file is your private key.
> If you don’t have these files (or you don’t even have a `.ssh` directory), you can create them by running a program called `ssh-keygen`, which is provided with the SSH package on Linux/Mac systems and comes with the MSysGit package on Windows:
> 
> 	$ ssh-keygen
> 	Generating public/private rsa key pair.
> 	Enter file in which to save the key (/Users/schacon/.ssh/id_rsa):
> 	Enter passphrase (empty for no passphrase):
> 	Enter same passphrase again:
> 	Your identification has been saved in /Users/schacon/.ssh/id_rsa.
> 	Your public key has been saved in /Users/schacon/.ssh/id_rsa.pub.
> 	The key fingerprint is:
> 	43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local
> 
> First it confirms where you want to save the key (`.ssh/id_rsa`), and then it asks twice for a passphrase, which you can leave empty if you don’t want to type a password when you use the key.
375,376c288,289
< Now, each user that does this has to send their public key to you or whoever is administrating the Git server (assuming you're using an SSH server setup that requires public keys).
< All they have to do is copy the contents of the `.pub` file and email it.
---
> Now, each user that does this has to send their public key to you or whoever is administrating the Git server (assuming you’re using an SSH server setup that requires public keys).
> All they have to do is copy the contents of the `.pub` file and e-mail it.
379,414c292,312
< [source,console]
< ----
< $ cat ~/.ssh/id_rsa.pub
< ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
< GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
< Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
< t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
< mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
< NrRFi9wrf+M7Q== schacon@mylaptop.local
< ----
< 
< For a more in-depth tutorial on creating an SSH key on multiple operating systems, see the GitHub guide on SSH keys at https://help.github.com/articles/generating-ssh-keys[].
< 
< 
< [[_setting_up_server]]
< === Setting Up the Server
< 
< Let's walk through setting up SSH access on the server side.
< In this example, you'll use the `authorized_keys` method for authenticating your users.
< We also assume you're running a standard Linux distribution like Ubuntu.
< 
< [NOTE]
< ====
< A good deal of what is described here can be automated by using the `ssh-copy-id` command, rather than manually copying and installing public keys.
< ====
< 
< First, you create a `git` user account and a `.ssh` directory for that user.
< 
< [source,console]
< ----
< $ sudo adduser git
< $ su git
< $ cd
< $ mkdir .ssh && chmod 700 .ssh
< $ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
< ----
---
> 	$ cat ~/.ssh/id_rsa.pub
> 	ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
> 	GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
> 	Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
> 	t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
> 	mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
> 	NrRFi9wrf+M7Q== schacon@agadorlaptop.local
> 
> For a more in-depth tutorial on creating an SSH key on multiple operating systems, see the GitHub guide on SSH keys at `http://github.com/guides/providing-your-ssh-key`.
> 
> ## Setting Up the Server ##
> 
> Let’s walk through setting up SSH access on the server side.
> In this example, you’ll use the `authorized_keys` method for authenticating your users.
> We also assume you’re running a standard Linux distribution like Ubuntu.
> First, you create a 'git' user and a `.ssh` directory for that user.
> 
> 	$ sudo adduser git
> 	$ su git
> 	$ cd
> 	$ mkdir .ssh
416,417c314,315
< Next, you need to add some developer SSH public keys to the `authorized_keys` file for the `git` user.
< Let's assume you have some trusted public keys and have saved them to temporary files.
---
> Next, you need to add some developer SSH public keys to the `authorized_keys` file for that user.
> Let’s assume you’ve received a few keys by e-mail and saved them to temporary files.
420,449c318,342
< [source,console]
< ----
< $ cat /tmp/id_rsa.john.pub
< ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
< ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
< Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
< Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
< O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
< dAv8JggJICUvax2T9va5 gsg-keypair
< ----
< 
< You just append them to the `git` user's `authorized_keys` file in its `.ssh` directory:
< 
< [source,console]
< ----
< $ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
< $ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
< $ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
< ----
< 
< Now, you can set up an empty repository for them by running `git init` with the `--bare` option, which initializes the repository without a working directory:(((git commands, init, bare)))
< 
< [source,console]
< ----
< $ cd /srv/git
< $ mkdir project.git
< $ cd project.git
< $ git init --bare
< Initialized empty Git repository in /srv/git/project.git/
< ----
---
> 	$ cat /tmp/id_rsa.john.pub
> 	ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
> 	ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
> 	Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
> 	Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
> 	O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
> 	dAv8JggJICUvax2T9va5 gsg-keypair
> 
> You just append them to your `authorized_keys` file:
> 
> 	$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
> 	$ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
> 	$ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
> 
> Key-based SSH authentication usually enforces security by requiring restricted rights on the involved files.
> To prevent SSH from refusing to work, type this:
> 
> 	$ chmod -R go= ~/.ssh
> 
> Now, you can set up an empty repository for your users by running `git init` with the `--bare` option, which initializes the repository without a working directory:
> 
> 	$ cd /opt/git
> 	$ mkdir project.git
> 	$ cd project.git
> 	$ git --bare init
453,454c346,347
< Let's use `gitserver` as the hostname of the server on which you've set up your `git` user and repository.
< If you're running it internally, and you set up DNS for `gitserver` to point to that server, then you can use the commands pretty much as is (assuming that `myproject` is an existing project with files in it):
---
> Let’s use `gitserver` as the hostname of the server on which you’ve set up your 'git' user and repository.
> If you’re running it internally, and you set up DNS for `gitserver` to point to that server, then you can use the commands pretty much as is:
456,465c349,355
< [source,console]
< ----
< # on John's computer
< $ cd myproject
< $ git init
< $ git add .
< $ git commit -m 'initial commit'
< $ git remote add origin git@gitserver:/srv/git/project.git
< $ git push origin master
< ----
---
> 	# on Johns computer
> 	$ cd myproject
> 	$ git init
> 	$ git add .
> 	$ git commit -m 'initial commit'
> 	$ git remote add origin git@gitserver:/opt/git/project.git
> 	$ git push origin master
469,476c359,363
< [source,console]
< ----
< $ git clone git@gitserver:/srv/git/project.git
< $ cd project
< $ vim README
< $ git commit -am 'fix for the README file'
< $ git push origin master
< ----
---
> 	$ git clone git@gitserver:/opt/git/project.git
> 	$ cd project
> 	$ vim README
> 	$ git commit -am 'fix for the README file'
> 	$ git push origin master
480,561c367,370
< You should note that currently all these users can also log into the server and get a shell as the `git` user.
< If you want to restrict that, you will have to change the shell to something else in the `/etc/passwd` file.
< 
< You can easily restrict the `git` user account to only Git-related activities with a limited shell tool called `git-shell` that comes with Git.
< If you set this as the `git` user account's login shell, then that  account can't have normal shell access to your server.
< To use this, specify `git-shell` instead of bash or csh for that account's login shell.
< To do so, you must first add the full pathname of the `git-shell` command to `/etc/shells` if it's not already there:
< 
< [source,console]
< ----
< $ cat /etc/shells   # see if `git-shell` is already in there.  If not...
< $ which git-shell   # make sure git-shell is installed on your system.
< $ sudo -e /etc/shells  # and add the path to git-shell from last command
< ----
< 
< Now you can edit the shell for a user using `chsh <username> -s <shell>`:
< 
< [source,console]
< ----
< $ sudo chsh git -s $(which git-shell)
< ----
< 
< Now, the `git` user can only use the SSH connection to push and pull Git repositories and can't shell onto the machine.
< If you try, you'll see a login rejection like this:
< 
< [source,console]
< ----
< $ ssh git@gitserver
< fatal: Interactive git shell is not enabled.
< hint: ~/git-shell-commands should exist and have read and execute access.
< Connection to gitserver closed.
< ----
< 
< Now Git network commands will still work just fine but the users won't be able to get a shell.
< As the output states, you can also set up a directory in the `git` user's home directory that customizes the `git-shell` command a bit.
< For instance, you can restrict the Git commands that the server will accept or you can customize the message that users see if they try to SSH in like that.
< Run `git help shell` for more information on customizing the shell.(((git commands, help)))
< 
< 
< === Git Daemon
< 
< (((serving repositories, git protocol)))
< Next we'll set up a daemon serving repositories using the ``Git'' protocol.
< This is a common choice for fast, unauthenticated access to your Git data.
< Remember that since this is not an authenticated service, anything you serve over this protocol is public within its network.
< 
< If you're running this on a server outside your firewall, it should be used only for projects that are publicly visible to the world.
< If the server you're running it on is inside your firewall, you might use it for projects that a large number of people or computers (continuous integration or build servers) have read-only access to, when you don't want to have to add an SSH key for each.
< 
< In any case, the Git protocol is relatively easy to set up.
< Basically, you need to run this command in a daemonized manner:(((git commands, daemon)))
< 
< [source,console]
< ----
< $ git daemon --reuseaddr --base-path=/srv/git/ /srv/git/
< ----
< 
< The `--reuseaddr` option allows the server to restart without waiting for old connections to time out, while the `--base-path` option allows people to clone projects without specifying the entire path, and the path at the end tells the Git daemon where to look for repositories to export.
< If you're running a firewall, you'll also need to punch a hole in it at port 9418 on the box you're setting this up on.
< 
< You can daemonize this process a number of ways, depending on the operating system you're running.
< 
< Since `systemd` is the most common init system among modern Linux distributions, you can use it for that purpose.
< Simply place a file in `/etc/systemd/system/git-daemon.service` with these contents:
< 
< [source,console]
< ----
< [Unit]
< Description=Start Git Daemon
< 
< [Service]
< ExecStart=/usr/bin/git daemon --reuseaddr --base-path=/srv/git/ /srv/git/
< 
< Restart=always
< RestartSec=500ms
< 
< StandardOutput=syslog
< StandardError=syslog
< SyslogIdentifier=git-daemon
< 
< User=git
< Group=git
---
> As an extra precaution, you can easily restrict the 'git' user to only doing Git activities with a limited shell tool called `git-shell` that comes with Git.
> If you set this as your 'git' user’s login shell, then the 'git' user can’t have normal shell access to your server.
> To use this, specify `git-shell` instead of bash or csh for your user’s login shell.
> To do so, you’ll likely have to edit your `/etc/passwd` file:
563,565c372
< [Install]
< WantedBy=multi-user.target
< ----
---
> 	$ sudo vim /etc/passwd
567,569c374
< You might have noticed that Git daemon is started here with `git` as both group and user.
< Modify it to fit your needs and make sure the provided user exists on the system.
< Also, check that the Git binary is indeed located at `/usr/bin/git` and change the path if necessary.
---
> At the bottom, you should find a line that looks something like this:
571c376
< Finally, you'll run `systemctl enable git-daemon` to automatically start the service on boot, and can start and stop the service with, respectively, `systemctl start git-daemon` and `systemctl stop git-daemon`.
---
> 	git:x:1000:1000::/home/git:/bin/sh
573c378,379
< On other systems, you may want to use `xinetd`, a script in your `sysvinit` system, or something else -- as long as you get that command daemonized and watched somehow.
---
> Change `/bin/sh` to `/usr/bin/git-shell` (or run `which git-shell` to see where it’s installed).
> The line should look something like this:
575,576c381
< Next, you have to tell Git which repositories to allow unauthenticated Git server-based access to.
< You can do this in each repository by creating a file named `git-daemon-export-ok`.
---
> 	git:x:1000:1000::/home/git:/usr/bin/git-shell
578,582c383,384
< [source,console]
< ----
< $ cd /path/to/project.git
< $ touch git-daemon-export-ok
< ----
---
> Now, the 'git' user can only use the SSH connection to push and pull Git repositories and can’t shell onto the machine.
> If you try, you’ll see a login rejection like this:
584c386,388
< The presence of that file tells Git that it's OK to serve this project without authentication.
---
> 	$ ssh git@gitserver
> 	fatal: What do you think I am? A shell?
> 	Connection to gitserver closed.
585a390
> ## Public Access ##
587c392,393
< === Smart HTTP
---
> What if you want anonymous read access to your project? Perhaps instead of hosting an internal private project, you want to host an open source project.
> Or maybe you have a bunch of automated build servers or continuous integration servers that change a lot, and you don’t want to have to generate SSH keys all the time — you just want to add simple anonymous read access.
589,593c395,398
< (((serving repositories, HTTP)))
< We now have authenticated access through SSH and unauthenticated access through `git://`, but there is also a protocol that can do both at the same time.
< Setting up Smart HTTP is basically just enabling a CGI script that is provided with Git called `git-http-backend` on the server.(((git commands, "http-backend")))
< This CGI will read the path and headers sent by a `git fetch` or `git push` to an HTTP URL and determine if the client can communicate over HTTP (which is true for any client since version 1.6.6).
< If the CGI sees that the client is smart, it will communicate smartly with it; otherwise it will fall back to the dumb behavior (so it is backward compatible for reads with older clients).
---
> Probably the simplest way for smaller setups is to run a static web server with its document root where your Git repositories are, and then enable that `post-update` hook we mentioned in the first section of this chapter.
> Let’s work from the previous example.
> Say you have your repositories in the `/opt/git` directory, and an Apache server is running on your machine.
> Again, you can use any web server for this; but as an example, we’ll demonstrate some basic Apache configurations that should give you an idea of what you might need.
595,597c400
< Let's walk through a very basic setup.
< We'll set this up with Apache as the CGI server.
< If you don't have Apache setup, you can do so on a Linux box with something like this:(((Apache)))
---
> First you need to enable the hook:
599,603c402,404
< [source,console]
< ----
< $ sudo apt-get install apache2 apache2-utils
< $ a2enmod cgi alias env
< ----
---
> 	$ cd project.git
> 	$ mv hooks/post-update.sample hooks/post-update
> 	$ chmod a+x hooks/post-update
605c406
< This also enables the `mod_cgi`, `mod_alias`, and `mod_env` modules, which are all needed for this to work properly.
---
> What does this `post-update` hook do? It looks basically like this:
607c408,415
< You'll also need to set the Unix user group of the `/srv/git` directories to `www-data` so your web server can read- and write-access the repositories, because the Apache instance running the CGI script will (by default) be running as that user:
---
> 	$ cat .git/hooks/post-update
> 	#!/bin/sh
> 	#
> 	# An example hook script to prepare a packed repository for use over
> 	# dumb transports.
> 	#
> 	# To enable this hook, rename this file to "post-update".
> 	#
609,612c417
< [source,console]
< ----
< $ chgrp -R www-data /srv/git
< ----
---
> 	exec git-update-server-info
614c419
< Next we need to add some things to the Apache configuration to run the `git-http-backend` as the handler for anything coming into the `/git` path of your web server.
---
> This means that when you push to the server via SSH, Git will run this command to update the files needed for HTTP fetching.
616,621c421,422
< [source,console]
< ----
< SetEnv GIT_PROJECT_ROOT /srv/git
< SetEnv GIT_HTTP_EXPORT_ALL
< ScriptAlias /git/ /usr/lib/git-core/git-http-backend/
< ----
---
> Next, you need to add a VirtualHost entry to your Apache configuration with the document root as the root directory of your Git projects.
> Here, we’re assuming that you have wildcard DNS set up to send `*.gitserver` to whatever box you’re using to run all this:
623,639c424,431
< If you leave out `GIT_HTTP_EXPORT_ALL` environment variable, then Git will only serve to unauthenticated clients the repositories with the `git-daemon-export-ok` file in them, just like the Git daemon did.
< 
< Finally you'll want to tell Apache to allow requests to `git-http-backend` and make writes be authenticated somehow, possibly with an Auth block like this:
< 
< [source,console]
< ----
< <Files "git-http-backend">
<     AuthType Basic
<     AuthName "Git Access"
<     AuthUserFile /srv/git/.htpasswd
<     Require expr !(%{QUERY_STRING} -strmatch '*service=git-receive-pack*' || %{REQUEST_URI} =~ m#/git-receive-pack$#)
<     Require valid-user
< </Files>
< ----
< 
< That will require you to create a `.htpasswd` file containing the passwords of all the valid users.
< Here is an example of adding a ``schacon'' user to the file:
---
> 	<VirtualHost *:80>
> 	    ServerName git.gitserver
> 	    DocumentRoot /opt/git
> 	    <Directory /opt/git/>
> 	        Order allow, deny
> 	        allow from all
> 	    </Directory>
> 	</VirtualHost>
641,644c433
< [source,console]
< ----
< $ htpasswd -c /srv/git/.htpasswd schacon
< ----
---
> You’ll also need to set the Unix user group of the `/opt/git` directories to `www-data` so your web server can read-access the repositories, because the Apache instance running the CGI script will (by default) be running as that user:
646,648c435
< There are tons of ways to have Apache authenticate users, you'll have to choose and implement one of them.
< This is just the simplest example we could come up with.
< You'll also almost certainly want to set this up over SSL so all this data is encrypted.
---
> 	$ chgrp -R www-data /opt/git
650,653c437
< We don't want to go too far down the rabbit hole of Apache configuration specifics, since you could well be using a different server or have different authentication needs.
< The idea is that Git comes with a CGI called `git-http-backend` that when invoked will do all the negotiation to send and receive data over HTTP.
< It does not implement any authentication itself, but that can easily be controlled at the layer of the web server that invokes it.
< You can do this with nearly any CGI-capable web server, so go with the one that you know best.
---
> When you restart Apache, you should be able to clone your repositories under that directory by specifying the URL for your project:
655,658c439
< [NOTE]
< ====
< For more information on configuring authentication in Apache, check out the Apache docs here: https://httpd.apache.org/docs/current/howto/auth.html[]
< ====
---
> 	$ git clone http://git.gitserver/project.git
659a441,442
> This way, you can set up HTTP-based read access to any of your projects for a fair number of users in a few minutes.
> Another simple option for public unauthenticated access is to start a Git daemon, although that requires you to daemonize the process - we’ll cover this option in the next section, if you prefer that route.
661c444
< === GitWeb
---
> ## GitWeb ##
663d445
< (((serving repositories, GitWeb)))(((GitWeb)))
665c447,448
< Git comes with a CGI script called GitWeb that is sometimes used for this.
---
> Git comes with a CGI script called GitWeb that is commonly used for this.
> You can see GitWeb in use at sites like `http://git.kernel.org` (see Figure 4-1).
667,669c450,451
< [[gitweb]]
< .The GitWeb web-based user interface.
< image::images/git-instaweb.png[The GitWeb web-based user interface.]
---
> Insert 18333fig0401.png
> Figure 4-1. The GitWeb web-based user interface.
671c453
< If you want to check out what GitWeb would look like for your project, Git comes with a command to fire up a temporary instance if you have a lightweight web server on your system like `lighttpd` or `webrick`.
---
> If you want to check out what GitWeb would look like for your project, Git comes with a command to fire up a temporary instance if you have a lightweight server on your system like `lighttpd` or `webrick`.
673,674c455,456
< If you're running a Mac, Leopard comes preinstalled with Ruby, so `webrick` may be your best bet.
< To start `instaweb` with a non-lighttpd handler, you can run it with the `--httpd` option.(((git commands, instaweb)))
---
> If you’re running a Mac, Leopard comes preinstalled with Ruby, so `webrick` may be your best bet.
> To start `instaweb` with a non-lighttpd handler, you can run it with the `--httpd` option.
676,681c458,460
< [source,console]
< ----
< $ git instaweb --httpd=webrick
< [2009-02-21 10:02:21] INFO  WEBrick 1.3.1
< [2009-02-21 10:02:21] INFO  ruby 1.8.6 (2008-03-03) [universal-darwin9.0]
< ----
---
> 	$ git instaweb --httpd=webrick
> 	[2009-02-21 10:02:21] INFO  WEBrick 1.3.1
> 	[2009-02-21 10:02:21] INFO  ruby 1.8.6 (2008-03-03) [universal-darwin9.0]
684,685c463,464
< It's pretty easy on your part.
< When you're done and want to shut down the server, you can run the same command with the `--stop` option:
---
> It’s pretty easy on your part.
> When you’re done and want to shut down the server, you can run the same command with the `--stop` option:
687,694c466,470
< [source,console]
< ----
< $ git instaweb --httpd=webrick --stop
< ----
< 
< If you want to run the web interface on a server all the time for your team or for an open source project you're hosting, you'll need to set up the CGI script to be served by your normal web server.
< Some Linux distributions have a `gitweb` package that you may be able to install via `apt` or `dnf`, so you may want to try that first.
< We'll walk through installing GitWeb manually very quickly.
---
> 	$ git instaweb --httpd=webrick --stop
> 
> If you want to run the web interface on a server all the time for your team or for an open source project you’re hosting, you’ll need to set up the CGI script to be served by your normal web server.
> Some Linux distributions have a `gitweb` package that you may be able to install via `apt` or `yum`, so you may want to try that first.
> We’ll walk though installing GitWeb manually very quickly.
697,708c473,477
< [source,console]
< ----
< $ git clone git://git.kernel.org/pub/scm/git/git.git
< $ cd git/
< $ make GITWEB_PROJECTROOT="/srv/git" prefix=/usr gitweb
<     SUBDIR gitweb
<     SUBDIR ../
< make[2]: `GIT-VERSION-FILE' is up to date.
<     GEN gitweb.cgi
<     GEN static/gitweb.js
< $ sudo cp -Rf gitweb /var/www/
< ----
---
> 	$ git clone git://git.kernel.org/pub/scm/git/git.git
> 	$ cd git/
> 	$ make GITWEB_PROJECTROOT="/opt/git" \
> 	        prefix=/usr gitweb
> 	$ sudo cp -Rf gitweb /var/www/
713,715c482
< [source,console]
< ----
< <VirtualHost *:80>
---
> 	<VirtualHost *:80>
719c486
<         Options +ExecCGI +FollowSymLinks +SymLinksIfOwnerMatch
---
> 	        Options ExecCGI +FollowSymLinks +SymLinksIfOwnerMatch
726,727c493,659
< </VirtualHost>
< ----
---
> 	</VirtualHost>
> 
> Again, GitWeb can be served with any CGI capable web server; if you prefer to use something else, it shouldn’t be difficult to set up.
> At this point, you should be able to visit `http://gitserver/` to view your repositories online, and you can use `http://git.gitserver` to clone and fetch your repositories over HTTP.
> 
> ## Gitosis ##
> 
> Keeping all users’ public keys in the `authorized_keys` file for access works well only for a while.
> When you have hundreds of users, it’s much more of a pain to manage that process.
> You have to shell onto the server each time, and there is no access control — everyone in the file has read and write access to every project.
> 
> At this point, you may want to turn to a widely used software project called Gitosis.
> Gitosis is basically a set of scripts that help you manage the `authorized_keys` file as well as implement some simple access controls.
> The really interesting part is that the UI for this tool for adding people and determining access isn’t a web interface but a special Git repository.
> You set up the information in that project; and when you push it, Gitosis reconfigures the server based on that, which is cool.
> 
> Installing Gitosis isn’t the simplest task ever, but it’s not too difficult.
> It’s easiest to use a Linux server for it — these examples use a stock Ubuntu 8.10 server.
> 
> Gitosis requires some Python tools, so first you have to install the Python setuptools package, which Ubuntu provides as python-setuptools:
> 
> 	$ apt-get install python-setuptools
> 
> Next, you clone and install Gitosis from the project’s main site:
> 
> 	$ git clone https://github.com/tv42/gitosis.git
> 	$ cd gitosis
> 	$ sudo python setup.py install
> 
> That installs a couple of executables that Gitosis will use.
> Next, Gitosis wants to put its repositories under `/home/git`, which is fine.
> But you have already set up your repositories in `/opt/git`, so instead of reconfiguring everything, you create a symlink:
> 
> 	$ ln -s /opt/git /home/git/repositories
> 
> Gitosis is going to manage your keys for you, so you need to remove the current file, re-add the keys later, and let Gitosis control the `authorized_keys` file automatically.
> For now, move the `authorized_keys` file out of the way:
> 
> 	$ mv /home/git/.ssh/authorized_keys /home/git/.ssh/ak.bak
> 
> Next you need to turn your shell back on for the 'git' user, if you changed it to the `git-shell` command.
> People still won’t be able to log in, but Gitosis will control that for you.
> So, let’s change this line in your `/etc/passwd` file
> 
> 	git:x:1000:1000::/home/git:/usr/bin/git-shell
> 
> back to this:
> 
> 	git:x:1000:1000::/home/git:/bin/sh
> 
> Now it’s time to initialize Gitosis.
> You do this by running the `gitosis-init` command with your personal public key.
> If your public key isn’t on the server, you’ll have to copy it there:
> 
> 	$ sudo -H -u git gitosis-init < /tmp/id_dsa.pub
> 	Initialized empty Git repository in /opt/git/gitosis-admin.git/
> 	Reinitialized existing Git repository in /opt/git/gitosis-admin.git/
> 
> This lets the user with that key modify the main Git repository that controls the Gitosis setup.
> Next, you have to manually set the execute bit on the `post-update` script for your new control repository.
> 
> 	$ sudo chmod 755 /opt/git/gitosis-admin.git/hooks/post-update
> 
> You’re ready to roll.
> If you’re set up correctly, you can try to SSH into your server as the user for which you added the public key to initialize Gitosis.
> You should see something like this:
> 
> 	$ ssh git@gitserver
> 	PTY allocation request failed on channel 0
> 	ERROR:gitosis.serve.main:Need SSH_ORIGINAL_COMMAND in environment.
> 	  Connection to gitserver closed.
> 
> That means Gitosis recognized you but shut you out because you’re not trying to do any Git commands.
> So, let’s do an actual Git command — you’ll clone the Gitosis control repository:
> 
> 	# on your local computer
> 	$ git clone git@gitserver:gitosis-admin.git
> 
> Now you have a directory named `gitosis-admin`, which has two major parts:
> 
> 	$ cd gitosis-admin
> 	$ find .
> 	./gitosis.conf
> 	./keydir
> 	./keydir/scott.pub
> 
> The `gitosis.conf` file is the control file you use to specify users, repositories, and permissions.
> The `keydir` directory is where you store the public keys of all the users who have any sort of access to your repositories — one file per user.
> The name of the file in `keydir` (in the previous example, `scott.pub`) will be different for you — Gitosis takes that name from the description at the end of the public key that was imported with the `gitosis-init` script.
> 
> If you look at the `gitosis.conf` file, it should only specify information about the `gitosis-admin` project that you just cloned:
> 
> 	$ cat gitosis.conf
> 	[gitosis]
> 
> 	[group gitosis-admin]
> 	members = scott
> 	writable = gitosis-admin
> 
> It shows you that the 'scott' user — the user with whose public key you initialized Gitosis — is the only one who has access to the `gitosis-admin` project.
> 
> Now, let’s add a new project for you.
> You’ll add a new section called `mobile` where you’ll list the developers on your mobile team and projects that those developers need access to.
> Because 'scott' is the only user in the system right now, you’ll add him as the only member, and you’ll create a new project called `iphone_project` to start on:
> 
> 	[group mobile]
> 	members = scott
> 	writable = iphone_project
> 
> Whenever you make changes to the `gitosis-admin` project, you have to commit the changes and push them back up to the server in order for them to take effect:
> 
> 	$ git commit -am 'add iphone_project and mobile group'
> 	[master 8962da8] add iphone_project and mobile group
> 	 1 file changed, 4 insertions(+)
> 	$ git push origin master
> 	Counting objects: 5, done.
> 	Compressing objects: 100% (3/3), done.
> 	Writing objects: 100% (3/3), 272 bytes | 0 bytes/s, done.
> 	Total 3 (delta 0), reused 0 (delta 0)
> 	To git@gitserver:gitosis-admin.git
> 	   fb27aec..8962da8  master -> master
> 
> You can make your first push to the new `iphone_project` project by adding your server as a remote to your local version of the project and pushing.
> You no longer have to manually create a bare repository for new projects on the server — Gitosis creates them automatically when it sees the first push:
> 
> 	$ git remote add origin git@gitserver:iphone_project.git
> 	$ git push origin master
> 	Initialized empty Git repository in /opt/git/iphone_project.git/
> 	Counting objects: 3, done.
> 	Writing objects: 100% (3/3), 230 bytes | 0 bytes/s, done.
> 	Total 3 (delta 0), reused 0 (delta 0)
> 	To git@gitserver:iphone_project.git
> 	 * [new branch]      master -> master
> 
> Notice that you don’t need to specify the path (in fact, doing so won’t work), just a colon and then the name of the project — Gitosis finds it for you.
> 
> You want to work on this project with your friends, so you’ll have to re-add their public keys.
> But instead of appending them manually to the `~/.ssh/authorized_keys` file on your server, you’ll add them, one key per file, into the `keydir` directory.
> How you name the keys determines how you refer to the users in the `gitosis.conf` file.
> Let’s re-add the public keys for John, Josie, and Jessica:
> 
> 	$ cp /tmp/id_rsa.john.pub keydir/john.pub
> 	$ cp /tmp/id_rsa.josie.pub keydir/josie.pub
> 	$ cp /tmp/id_rsa.jessica.pub keydir/jessica.pub
> 
> Now you can add them all to your 'mobile' team so they have read and write access to `iphone_project`:
> 
> 	[group mobile]
> 	members = scott john josie jessica
> 	writable = iphone_project
> 
> After you commit and push that change, all four users will be able to read from and write to that project.
> 
> Gitosis has simple access controls as well.
> If you want John to have only read access to this project, you can do this instead:
> 
> 	[group mobile]
> 	members = scott josie jessica
> 	writable = iphone_project
> 
> 	[group mobile_ro]
> 	members = john
> 	readonly = iphone_project
> 
> Now John can clone the project and get updates, but Gitosis won’t allow him to push back up to the project.
> You can create as many of these groups as you want, each containing different users and projects.
> You can also specify another group as one of the members (using `@` as prefix), to inherit all of its members automatically:
729,730c661,662
< Again, GitWeb can be served with any CGI or Perl capable web server; if you prefer to use something else, it shouldn't be difficult to set up.
< At this point, you should be able to visit `http://gitserver/` to view your repositories online.
---
> 	[group mobile_committers]
> 	members = scott josie jessica
731a664,666
> 	[group mobile]
> 	members   = @mobile_committers
> 	writable  = iphone_project
733c668,670
< === GitLab
---
> 	[group mobile_2]
> 	members   = @mobile_committers john
> 	writable  = another_iphone_project
735,739c672,675
< (((serving repositories, GitLab)))(((GitLab)))
< GitWeb is pretty simplistic though.
< If you're looking for a more modern, fully featured Git server, there are some several open source solutions out there that you can install instead.
< As GitLab is one of the more popular ones, we'll cover installing and using it as an example.
< This is a bit more complex than the GitWeb option and likely requires more maintenance, but it is a much more fully featured option.
---
> If you have any issues, it may be useful to add `loglevel=DEBUG` under the `[gitosis]` section.
> If you’ve lost push access by pushing a messed-up configuration, you can manually fix the file on the server under `/home/git/.gitosis.conf` — the file from which Gitosis reads its info.
> A push to the project takes the `gitosis.conf` file you just pushed up and sticks it there.
> If you edit that file manually, it remains like that until the next successful push to the `gitosis-admin` project.
741c677
< ==== Installation
---
> ## Gitolite ##
743,744c679,681
< GitLab is a database-backed web application, so its installation is a bit more involved than some other Git servers.
< Fortunately, this process is very well-documented and supported.
---
> This section serves as a quick introduction to Gitolite, and provides basic installation and setup instructions.
>  It cannot, however, replace the enormous amount of [documentation][gltoc] that Gitolite comes with.
>  There may also be occasional changes to this section itself, so you may also want to look at the latest version [here][gldpg].
746,748c683,684
< There are a few methods you can pursue to install GitLab.
< To get something up and running quickly, you can download a virtual machine image or a one-click installer from https://bitnami.com/stack/gitlab[], and tweak the configuration to match your particular environment.(((bitnami)))
< One nice touch Bitnami has included is the login screen (accessed by typing alt+→); it tells you the IP address and default username and password for the installed GitLab.
---
> [gldpg]: http://sitaramc.github.com/gitolite/progit.html
> [gltoc]: http://sitaramc.github.com/gitolite/master-toc.html
750,752c686,687
< [[bitnami]]
< .The Bitnami GitLab virtual machine login screen.
< image::images/bitnami.png[The Bitnami GitLab virtual machine login screen.]
---
> Gitolite is an authorization layer on top of Git, relying on `sshd` or `httpd` for authentication.
>  (Recap: authentication is identifying who the user is, authorization is deciding if he is allowed to do what he is attempting to).
754,756c689,690
< For anything else, follow the guidance in the GitLab Community Edition readme, which can be found at https://gitlab.com/gitlab-org/gitlab-ce/tree/master[].
< There you'll find assistance for installing GitLab using Chef recipes, a virtual machine on Digital Ocean, and RPM and DEB packages (which, as of this writing, are in beta).
< There's also ``unofficial'' guidance on getting GitLab running with non-standard operating systems and databases, a fully-manual installation script, and many other topics.
---
> Gitolite allows you to specify permissions not just by repository, but also by branch or tag names within each repository.
>  That is, you can specify that certain people (or groups of people) can only push certain "refs" (branches or tags) but not others.
758c692
< ==== Administration
---
> ### Installing ###
760,763c694,697
< GitLab's administration interface is accessed over the web.
< Simply point your browser to the hostname or IP address where GitLab is installed, and log in as an admin user.
< The default username is `admin@local.host`, and the default password is `5iveL!fe` (which you will be prompted to change as soon as you enter it).
< Once logged in, click the ``Admin area'' icon in the menu at the top right.
---
> Installing Gitolite is very easy, even if you don’t read the extensive documentation that comes with it.
>  You need an account on a Unix server of some kind.
>  You do not need root access, assuming Git, Perl, and an OpenSSH compatible SSH server are already installed.
>  In the examples below, we will use the `git` account on a host called `gitserver`.
765,767c699,700
< [[gitlab_menu]]
< .The ``Admin area'' item in the GitLab menu.
< image::images/gitlab-menu.png[The ``Admin area'' item in the GitLab menu.]
---
> Gitolite is somewhat unusual as far as "server" software goes — access is via SSH, and so every userid on the server is a potential "gitolite host".
>  We will describe the simplest install method in this article; for the other methods please see the documentation.
769c702,704
< ===== Users
---
> To begin, create a user called `git` on your server and login to this user.
>  Copy your SSH public key (a file called `~/.ssh/id_rsa.pub` if you did a plain `ssh-keygen` with all the defaults) from your workstation, renaming it to `<yourname>.pub` (we'll use `scott.pub` in our examples).
>  Then run these commands:
771,774c706,709
< Users in GitLab are accounts that correspond to people.
< User accounts don't have a lot of complexity; mainly it's a collection of personal information attached to login data.
< Each user account comes with a *namespace*, which is a logical grouping of projects that belong to that user.
< If the user +jane+ had a project named +project+, that project's url would be `http://server/jane/project`.
---
> 	$ git clone git://github.com/sitaramc/gitolite
> 	$ gitolite/install -ln
> 	    # assumes $HOME/bin exists and is in your $PATH
> 	$ gitolite setup -pk $HOME/scott.pub
776,778c711
< [[gitlab_users]]
< .The GitLab user administration screen.
< image::images/gitlab-users.png[The GitLab user administration screen.]
---
> That last command creates new Git repository called `gitolite-admin` on the server.
780,781c713,715
< Removing a user can be done in two ways.
< ``Blocking'' a user prevents them from logging into the GitLab instance, but all of the data under that user's namespace will be preserved, and commits signed with that user's email address will still link back to their profile.
---
> Finally, back on your workstation, run `git clone git@gitserver:gitolite-admin`.
> And you’re done!  Gitolite has now been installed on the server, and you now have a brand new repository called `gitolite-admin` in your workstation.
>  You administer your Gitolite setup by making changes to this repository and pushing.
783,785c717
< ``Destroying'' a user, on the other hand, completely removes them from the database and filesystem.
< All projects and data in their namespace is removed, and any groups they own will also be removed.
< This is obviously a much more permanent and destructive action, and its uses are rare.
---
> ### Customising the Install ###
787,788c719,720
< [[_gitlab_groups_section]]
< ===== Groups
---
> While the default, quick, install works for most people, there are some ways to customise the install if you need to.
>  Some changes can be made simply by editing the rc file, but if that is not sufficient, there’s documentation on customising Gitolite.
790,791c722
< A GitLab group is an assemblage of projects, along with data about how users can access those projects.
< Each group has a project namespace (the same way that users do), so if the group +training+ has a project +materials+, its url would be `http://server/training/materials`.
---
> ### Config File and Access Control Rules ###
793,795c724
< [[gitlab_groups]]
< .The GitLab group administration screen.
< image::images/gitlab-groups.png[The GitLab group administration screen.]
---
> Once the install is done, you switch to the `gitolite-admin` clone you just made on your workstation, and poke around to see what you got:
797,799c726,732
< Each group is associated with a number of users, each of which has a level of permissions for the group's projects and the group itself.
< These range from ``Guest'' (issues and chat only) to ``Owner'' (full control of the group, its members, and its projects).
< The types of permissions are too numerous to list here, but GitLab has a helpful link on the administration screen.
---
> 	$ cd ~/gitolite-admin/
> 	$ ls
> 	conf/  keydir/
> 	$ find conf keydir -type f
> 	conf/gitolite.conf
> 	keydir/scott.pub
> 	$ cat conf/gitolite.conf
801c734,735
< ===== Projects
---
> 	repo gitolite-admin
> 	    RW+                 = scott
803,805c737,738
< A GitLab project roughly corresponds to a single Git repository.
< Every project belongs to a single namespace, either a user or a group.
< If the project belongs to a user, the owner of the project has direct control over who has access to the project; if the project belongs to a group, the group's user-level permissions will also take effect.
---
> 	repo testing
> 	    RW+                 = @all
807,810c740
< Every project also has a visibility level, which controls who has read access to that project's pages and repository.
< If a project is _Private_, the project's owner must explicitly grant access to specific users.
< An _Internal_ project is visible to any logged-in user, and a _Public_ project is visible to anyone.
< Note that this controls both `git fetch` access as well as access to the web UI for that project.
---
> Notice that "scott" (the name of the pubkey in the `gitolite setup` command you used earlier) has read-write permissions on the `gitolite-admin` repository as well as a public key file of the same name.
812c742,744
< ===== Hooks
---
> Adding users is easy.
>  To add a user called "alice", obtain her public key, name it `alice.pub`, and put it in the `keydir` directory of the clone of the `gitolite-admin` repo you just made on your workstation.
>  Add, commit, and push the change, and the user has been added.
814,816c746
< GitLab includes support for hooks, both at a project or system level.
< For either of these, the GitLab server will perform an HTTP POST with some descriptive JSON whenever relevant events occur.
< This is a great way to connect your Git repositories and GitLab instance to the rest of your development automation, such as CI servers, chat rooms, or deployment tools.
---
> The config file syntax for Gitolite is well documented, so we’ll only mention some highlights here.
818c748,749
< ==== Basic Usage
---
> You can group users or repos for convenience.
>  The group names are just like macros; when defining them, it doesn’t even matter whether they are projects or users; that distinction is only made when you *use* the "macro".
820,824c751,752
< The first thing you'll want to do with GitLab is create a new project.
< This is accomplished by clicking the ``+'' icon on the toolbar.
< You'll be asked for the project's name, which namespace it should belong to, and what its visibility level should be.
< Most of what you specify here isn't permanent, and can be re-adjusted later through the settings interface.
< Click ``Create Project'', and you're done.
---
> 	@oss_repos      = linux perl rakudo git gitolite
> 	@secret_repos   = fenestra pear
826,829c754,757
< Once the project exists, you'll probably want to connect it with a local Git repository.
< Each project is accessible over HTTPS or SSH, either of which can be used to configure a Git remote.
< The URLs are visible at the top of the project's home page.
< For an existing local repository, this command will create a remote named `gitlab` to the hosted location:
---
> 	@admins         = scott
> 	@interns        = ashok
> 	@engineers      = sitaram dilbert wally alice
> 	@staff          = @admins @engineers @interns
831,834c759,762
< [source,console]
< ----
< $ git remote add gitlab https://server/namespace/project.git
< ----
---
> You can control permissions at the "ref" level.
>  In the following example, interns can only push the "int" branch.
>  Engineers can push any branch whose name starts with "eng-", and tags that start with "rc" followed by a digit.
>  And the admins can do anything (including rewind) to any ref.
836c764,768
< If you don't have a local copy of the repository, you can simply do this:
---
> 	repo @oss_repos
> 	    RW  int$                = @interns
> 	    RW  eng-                = @engineers
> 	    RW  refs/tags/rc[0-9]   = @engineers
> 	    RW+                     = @admins
838,841c770,771
< [source,console]
< ----
< $ git clone https://server/namespace/project.git
< ----
---
> The expression after the `RW` or `RW+` is a regular expression (regex) that the refname (ref) being pushed is matched against.
>  So we call it a "refex"!  Of course, a refex can be far more powerful than shown here, so don’t overdo it if you’re not comfortable with Perl regexes.
843,844c773
< The web UI provides access to several useful views of the repository itself.
< Each project's home page shows recent activity, and links along the top will lead you to views of the project's files and commit log.
---
> Also, as you probably guessed, Gitolite prefixes `refs/heads/` as a syntactic convenience if the refex does not begin with `refs/`.
846c775,776
< ==== Working Together
---
> An important feature of the config file’s syntax is that all the rules for a repository need not be in one place.
>  You can keep all the common stuff together, like the rules for all `oss_repos` shown above, then add specific rules for specific cases later on, like so:
848,850c778,779
< The simplest way of working together on a GitLab project is by giving another user direct push access to the Git repository.
< You can add a user to a project by going to the ``Members'' section of that project's settings, and associating the new user with an access level (the different access levels are discussed a bit in <<_gitlab_groups_section>>).
< By giving a user an access level of ``Developer'' or above, that user can push commits and branches directly to the repository with impunity.
---
> 	repo gitolite
> 	    RW+                     = sitaram
852,856c781
< Another, more decoupled way of collaboration is by using merge requests.
< This feature enables any user that can see a project to contribute to it in a controlled way.
< Users with direct access can simply create a branch, push commits to it, and open a merge request from their branch back into `master` or any other branch.
< Users who don't have push permissions for a repository can ``fork'' it (create their own copy), push commits to _that_ copy, and open a merge request from their fork back to the main project.
< This model allows the owner to be in full control of what goes into the repository and when, while allowing contributions from untrusted users.
---
> That rule will just get added to the ruleset for the `gitolite` repository.
858,860c783
< Merge requests and issues are the main units of long-lived discussion in GitLab.
< Each merge request allows a line-by-line discussion of the proposed change (which supports a lightweight kind of code review), as well as a general overall discussion thread.
< Both can be assigned to users, or organized into milestones.
---
> At this point you might be wondering how the access control rules are actually applied, so let’s go over that briefly.
862,863c785,786
< This section is focused mainly on the Git-related features of GitLab, but as a mature project, it provides many other features to help your team work together, such as project wikis and system maintenance tools.
< One benefit to GitLab is that, once the server is set up and running, you'll rarely need to tweak a configuration file or access the server via SSH; most administration and general usage can be accomplished through the in-browser interface.
---
> There are two levels of access control in Gitolite.
>  The first is at the repository level; if you have read (or write) access to *any* ref in the repository, then you have read (or write) access to the repository.
864a788,792
> The second level, applicable only to "write" access, is by branch or tag within a repository.
>  The username, the access being attempted (`W` or `+`), and the refname being updated are known.
>  The access rules are checked in order of appearance in the config file, looking for a match for this combination (but remember that the refname is regex-matched, not merely string-matched).
>  If a match is found, the push succeeds.
>  A fallthrough results in access being denied.
866c794
< === Third Party Hosted Options
---
> ### Advanced Access Control with "deny" rules ###
868c796,948
< If you don't want to go through all of the work involved in setting up your own Git server, you have several options for hosting your Git projects on an external dedicated hosting site.
---
> So far, we’ve only seen permissions to be one of `R`, `RW`, or `RW+`.
>  However, Gitolite allows another permission: `-`, standing for "deny".
>  This gives you a lot more power, at the expense of some complexity, because now fallthrough is not the *only* way for access to be denied, so the *order of the rules now matters*!
> 
> Let us say, in the situation above, we want engineers to be able to rewind any branch *except* master and integ.
>  Here’s how to do that:
> 
> 	    RW  master integ    = @engineers
> 	    -   master integ    = @engineers
> 	    RW+                 = @engineers
> 
> Again, you simply follow the rules top down until you hit a match for your access mode, or a deny.
>  Non-rewind push to master or integ is allowed by the first rule.
>  A rewind push to those refs does not match the first rule, drops down to the second, and is therefore denied.
>  Any push (rewind or non-rewind) to refs other than master or integ won’t match the first two rules anyway, and the third rule allows it.
> 
> ### Restricting pushes by files changed ###
> 
> In addition to restricting what branches a user can push changes to, you can also restrict what files they are allowed to touch.
>  For example, perhaps the Makefile (or some other program) is really not supposed to be changed by just anyone, because a lot of things depend on it or would break if the changes are not done *just right*.
>  You can tell Gitolite:
> 
>     repo foo
>         RW                      =   @junior_devs @senior_devs
> 
>         -   VREF/NAME/Makefile  =   @junior_devs
> 
> Users who are migrating from the older Gitolite should note that there is a significant change in behaviour with regard to this feature; please see the migration guide for details.
> 
> ### Personal Branches ###
> 
> Gitolite also has a feature called "personal branches" (or rather, "personal branch namespace") that can be very useful in a corporate environment.
> 
> A lot of code exchange in the Git world happens by "please pull" requests.
>  In a corporate environment, however, unauthenticated access is a no-no, and a developer workstation cannot do authentication, so you have to push to the central server and ask someone to pull from there.
> 
> This would normally cause the same branch name clutter as in a centralised VCS, plus setting up permissions for this becomes a chore for the admin.
> 
> Gitolite lets you define a "personal" or "scratch" namespace prefix for each developer (for example, `refs/personal/<devname>/*`); please see the documentation for details.
> 
> ### "Wildcard" repositories ###
> 
> Gitolite allows you to specify repositories with wildcards (actually Perl regexes), like, for example `assignments/s[0-9][0-9]/a[0-9][0-9]`, to pick a random example.
>  It also allows you to assign a new permission mode (`C`) which enables users to create repositories based on such wild cards, automatically assigns ownership to the specific user who created it, allows him/her to hand out `R` and `RW` permissions to other users to collaborate, etc.
>  Again, please see the documentation for details.
> 
> ### Other Features ###
> 
> We’ll round off this discussion with a sampling of other features, all of which, and many more, are described in great detail in the documentation.
> 
> **Logging**: Gitolite logs all successful accesses.
>  If you were somewhat relaxed about giving people rewind permissions (`RW+`) and some kid blew away `master`, the log file is a life saver, in terms of easily and quickly finding the SHA that got hosed.
> 
> **Access rights reporting**: Another convenient feature is what happens when you try and just ssh to the server.
>  Gitolite shows you what repos you have access to, and what that access may be.
>  Here’s an example:
> 
>         hello scott, this is git@git running gitolite3 v3.01-18-g9609868 on git 1.7.4.4
> 
>              R     anu-wsd
>              R     entrans
>              R  W  git-notes
>              R  W  gitolite
>              R  W  gitolite-admin
>              R     indic_web_input
>              R     shreelipi_converter
> 
> **Delegation**: For really large installations, you can delegate responsibility for groups of repositories to various people and have them manage those pieces independently.
>  This reduces the load on the main admin, and makes him less of a bottleneck.
> 
> **Mirroring**: Gitolite can help you maintain multiple mirrors, and switch between them easily if the primary server goes down.
> 
> ## Git Daemon ##
> 
> For public, unauthenticated read access to your projects, you’ll want to move past the HTTP protocol and start using the Git protocol.
> The main reason is speed.
> The Git protocol is far more efficient and thus faster than the HTTP protocol, so using it will save your users time.
> 
> Again, this is for unauthenticated read-only access.
> If you’re running this on a server outside your firewall, it should only be used for projects that are publicly visible to the world.
> If the server you’re running it on is inside your firewall, you might use it for projects that a large number of people or computers (continuous integration or build servers) have read-only access to, when you don’t want to have to add an SSH key for each.
> 
> In any case, the Git protocol is relatively easy to set up.
> Basically, you need to run this command in a daemonized manner:
> 
> 	git daemon --reuseaddr --base-path=/opt/git/ /opt/git/
> 
> `--reuseaddr` allows the server to restart without waiting for old connections to time out, the `--base-path` option allows people to clone projects without specifying the entire path, and the path at the end tells the Git daemon where to look for repositories to export.
> If you’re running a firewall, you’ll also need to punch a hole in it at port 9418 on the box you’re setting this up on.
> 
> You can daemonize this process a number of ways, depending on the operating system you’re running.
> On an Ubuntu machine, you use an Upstart script.
> So, in the following file
> 
> 	/etc/event.d/local-git-daemon
> 
> you put this script:
> 
> 	start on startup
> 	stop on shutdown
> 	exec /usr/bin/git daemon \
> 	    --user=git --group=git \
> 	    --reuseaddr \
> 	    --base-path=/opt/git/ \
> 	    /opt/git/
> 	respawn
> 
> For security reasons, it is strongly encouraged to have this daemon run as a user with read-only permissions to the repositories — you can easily do this by creating a new user 'git-ro' and running the daemon as them.
>  For the sake of simplicity we’ll simply run it as the same 'git' user that Gitosis is running as.
> 
> When you restart your machine, your Git daemon will start automatically and respawn if it goes down.
> To get it running without having to reboot, you can run this:
> 
> 	initctl start local-git-daemon
> 
> On other systems, you may want to use `xinetd`, a script in your `sysvinit` system, or something else — as long as you get that command daemonized and watched somehow.
> 
> Next, you have to tell your Gitosis server which repositories to allow unauthenticated Git server-based access to.
> If you add a section for each repository, you can specify the ones from which you want your Git daemon to allow reading.
> If you want to allow Git protocol access for the `iphone_project`, you add this to the end of the `gitosis.conf` file:
> 
> 	[repo iphone_project]
> 	daemon = yes
> 
> When that is committed and pushed up, your running daemon should start serving requests for the project to anyone who has access to port 9418 on your server.
> 
> If you decide not to use Gitosis, but you want to set up a Git daemon, you’ll have to run this on each project you want the Git daemon to serve:
> 
> 	$ cd /path/to/project.git
> 	$ touch git-daemon-export-ok
> 
> The presence of that file tells Git that it’s OK to serve this project without authentication.
> 
> Gitosis can also control which projects GitWeb shows.
> First, you need to add something like the following to the `/etc/gitweb.conf` file:
> 
> 	$projects_list = "/home/git/gitosis/projects.list";
> 	$projectroot = "/home/git/repositories";
> 	$export_ok = "git-daemon-export-ok";
> 	@git_base_url_list = ('git://gitserver');
> 
> You can control which projects GitWeb lets users browse by adding or removing a `gitweb` setting in the Gitosis configuration file.
> For instance, if you want the `iphone_project` to show up on GitWeb, you make the `repo` setting look like this:
> 
> 	[repo iphone_project]
> 	daemon = yes
> 	gitweb = yes
> 
> Now, if you commit and push the project, GitWeb will automatically start showing the `iphone_project`.
> 
> ## Hosted Git ##
> 
> If you don’t want to go through all of the work involved in setting up your own Git server, you have several options for hosting your Git projects on an external dedicated hosting site.
870c950
< Even if you set up and run your own server internally, you may still want to use a public hosting site for your open source code – it's generally easier for the open source community to find and help you with.
---
> Even if you set up and run your own server internally, you may still want to use a public hosting site for your open source code — it’s generally easier for the open source community to find and help you with.
873c953,1116
< To see an up-to-date list, check out the GitHosting page on the main Git wiki at https://git.wiki.kernel.org/index.php/GitHosting[]
---
> To see an up-to-date list, check out the following page:
> 
> 	https://git.wiki.kernel.org/index.php/GitHosting
> 
> Because we can’t cover all of them, and because I happen to work at one of them, we’ll use this section to walk through setting up an account and creating a new project at GitHub.
> This will give you an idea of what is involved.
> 
> GitHub is by far the largest open source Git hosting site and it’s also one of the very few that offers both public and private hosting options so you can keep your open source and private commercial code in the same place.
> In fact, we used GitHub to privately collaborate on this book.
> 
> ### GitHub ###
> 
> GitHub is slightly different than most code-hosting sites in the way that it namespaces projects.
> Instead of being primarily based on the project, GitHub is user-centric.
> That means when I host my `grit` project on GitHub, you won’t find it at `github.com/grit` but instead at `github.com/schacon/grit`.
> There is no canonical version of any project, which allows a project to move from one user to another seamlessly if the first author abandons the project.
> 
> GitHub is also a commercial company that charges for accounts that maintain private repositories, but anyone can quickly get a free account to host as many open source projects as they want.
> We’ll quickly go over how that is done.
> 
> ### Setting Up a User Account ###
> 
> The first thing you need to do is set up a free user account.
> If you visit the "Plans and pricing" page at `https://github.com/pricing` and click the "Sign Up" button on the Free account (see Figure 4-2), you’re taken to the signup page.
> 
> Insert 18333fig0402.png
> Figure 4-2. The GitHub plan page.
> 
> Here you must choose a username that isn’t yet taken in the system and enter an e-mail address that will be associated with the account and a password (see Figure 4-3).
> 
> Insert 18333fig0403.png
> Figure 4-3. The GitHub user signup form.
> 
> If you have it available, this is a good time to add your public SSH key as well.
> We covered how to generate a new key earlier, in the "Simple Setups" section.
> Take the contents of the public key of that pair, and paste it into the SSH Public Key text box.
> Clicking the "explain ssh keys" link takes you to detailed instructions on how to do so on all major operating systems.
> Clicking the "I agree, sign me up" button takes you to your new user dashboard (see Figure 4-4).
> 
> Insert 18333fig0404.png
> Figure 4-4. The GitHub user dashboard.
> 
> Next you can create a new repository.
> 
> ### Creating a New Repository ###
> 
> Start by clicking the "create a new one" link next to Your Repositories on the user dashboard.
> You’re taken to the Create a New Repository form (see Figure 4-5).
> 
> Insert 18333fig0405.png
> Figure 4-5. Creating a new repository on GitHub.
> 
> All you really have to do is provide a project name, but you can also add a description.
> When that is done, click the "Create Repository" button.
> Now you have a new repository on GitHub (see Figure 4-6).
> 
> Insert 18333fig0406.png
> Figure 4-6. GitHub project header information.
> 
> Since you have no code there yet, GitHub will show you instructions for how create a brand-new project, push an existing Git project up, or import a project from a public Subversion repository (see Figure 4-7).
> 
> Insert 18333fig0407.png
> Figure 4-7. Instructions for a new repository.
> 
> These instructions are similar to what we’ve already gone over.
> To initialize a project if it isn’t already a Git project, you use
> 
> 	$ git init
> 	$ git add .
> 	$ git commit -m 'initial commit'
> 
> When you have a Git repository locally, add GitHub as a remote and push up your master branch:
> 
> 	$ git remote add origin git@github.com:testinguser/iphone_project.git
> 	$ git push origin master
> 
> Now your project is hosted on GitHub, and you can give the URL to anyone you want to share your project with.
> In this case, it’s `http://github.com/testinguser/iphone_project`.
> You can also see from the header on each of your project’s pages that you have two Git URLs (see Figure 4-8).
> 
> Insert 18333fig0408.png
> Figure 4-8. Project header with a public URL and a private URL.
> 
> The Public Clone URL is a public, read-only Git URL over which anyone can clone the project.
> Feel free to give out that URL and post it on your web site or what have you.
> 
> The Your Clone URL is a read/write SSH-based URL that you can read or write over only if you connect with the SSH private key associated with the public key you uploaded for your user.
> When other users visit this project page, they won’t see that URL—only the public one.
> 
> ### Importing from Subversion ###
> 
> If you have an existing public Subversion project that you want to import into Git, GitHub can often do that for you.
> At the bottom of the instructions page is a link to a Subversion import.
> If you click it, you see a form with information about the import process and a text box where you can paste in the URL of your public Subversion project (see Figure 4-9).
> 
> Insert 18333fig0409.png
> Figure 4-9. Subversion importing interface.
> 
> If your project is very large, nonstandard, or private, this process probably won’t work for you.
> In Chapter 7, you’ll learn how to do more complicated manual project imports.
> 
> ### Adding Collaborators ###
> 
> Let’s add the rest of the team.
> If John, Josie, and Jessica all sign up for accounts on GitHub, and you want to give them push access to your repository, you can add them to your project as collaborators.
> Doing so will allow pushes from their public keys to work.
> 
> Click the "edit" button in the project header or the Admin tab at the top of the project to reach the Admin page of your GitHub project (see Figure 4-10).
> 
> Insert 18333fig0410.png
> Figure 4-10. GitHub administration page.
> 
> To give another user write access to your project, click the “Add another collaborator” link.
> A new text box appears, into which you can type a username.
> As you type, a helper pops up, showing you possible username matches.
> When you find the correct user, click the Add button to add that user as a collaborator on your project (see Figure 4-11).
> 
> Insert 18333fig0411.png
> Figure 4-11. Adding a collaborator to your project.
> 
> When you’re finished adding collaborators, you should see a list of them in the Repository Collaborators box (see Figure 4-12).
> 
> Insert 18333fig0412.png
> Figure 4-12. A list of collaborators on your project.
> 
> If you need to revoke access to individuals, you can click the "revoke" link, and their push access will be removed.
> For future projects, you can also copy collaborator groups by copying the permissions of an existing project.
> 
> ### Your Project ###
> 
> After you push your project up or have it imported from Subversion, you have a main project page that looks something like Figure 4-13.
> 
> Insert 18333fig0413.png
> Figure 4-13. A GitHub main project page.
> 
> When people visit your project, they see this page.
> It contains tabs to different aspects of your projects.
> The Commits tab shows a list of commits in reverse chronological order, similar to the output of the `git log` command.
> The Network tab shows all the people who have forked your project and contributed back.
> The Downloads tab allows you to upload project binaries and link to tarballs and zipped versions of any tagged points in your project.
> The Wiki tab provides a wiki where you can write documentation or other information about your project.
> The Graphs tab has some contribution visualizations and statistics about your project.
> The main Source tab that you land on shows your project’s main directory listing and automatically renders the README file below it if you have one.
> This tab also shows a box with the latest commit information.
> 
> ### Forking Projects ###
> 
> If you want to contribute to an existing project to which you don’t have push access, GitHub encourages forking the project.
> When you land on a project page that looks interesting and you want to hack on it a bit, you can click the "fork" button in the project header to have GitHub copy that project to your user so you can push to it.
> 
> This way, projects don’t have to worry about adding users as collaborators to give them push access.
> People can fork a project and push to it, and the main project maintainer can pull in those changes by adding them as remotes and merging in their work.
> 
> To fork a project, visit the project page (in this case, mojombo/chronic) and click the "fork" button in the header (see Figure 4-14).
> 
> Insert 18333fig0414.png
> Figure 4-14. Get a writable copy of any repository by clicking the "fork" button.
> 
> After a few seconds, you’re taken to your new project page, which indicates that this project is a fork of another one (see Figure 4-15).
> 
> Insert 18333fig0415.png
> Figure 4-15. Your fork of a project.
> 
> ### GitHub Summary ###
875c1118,1121
< We'll cover using GitHub in detail in <<ch06-github#ch06-github>>, as it is the largest Git host out there and you may need to interact with projects hosted on it in any case, but there are dozens more to choose from should you not want to set up your own Git server.
---
> That’s all we’ll cover about GitHub, but it’s important to note how quickly you can do all this.
> You can create an account, add a new project, and push to it in a matter of minutes.
> If your project is open source, you also get a huge community of developers who now have visibility into your project and may well fork it and help contribute to it.
> At the very least, this may be a way to get up and running with Git and try it out quickly.
877c1123
< === Summary
---
> ## Summary ##
882c1128
< If you place your data on a hosted server, it's easy to set up and maintain; however, you have to be able to keep your code on someone else's servers, and some organizations don't allow that.
---
> If you place your data on a hosted server, it’s easy to set up and maintain; however, you have to be able to keep your code on someone else’s servers, and some organizations don’t allow that.
